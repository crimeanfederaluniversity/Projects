#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KPIWeb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="crimeanfeder_5")]
	public partial class KPIWebDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertReportArchiveTable(ReportArchiveTable instance);
    partial void UpdateReportArchiveTable(ReportArchiveTable instance);
    partial void DeleteReportArchiveTable(ReportArchiveTable instance);
    partial void InsertReportAndRolesMapping(ReportAndRolesMapping instance);
    partial void UpdateReportAndRolesMapping(ReportAndRolesMapping instance);
    partial void DeleteReportAndRolesMapping(ReportAndRolesMapping instance);
    partial void InsertBasicParametersTable(BasicParametersTable instance);
    partial void UpdateBasicParametersTable(BasicParametersTable instance);
    partial void DeleteBasicParametersTable(BasicParametersTable instance);
    partial void InsertBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void UpdateBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void DeleteBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void InsertFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void UpdateFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void DeleteFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void InsertSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void UpdateSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void DeleteSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void InsertThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void UpdateThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void DeleteThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void InsertIndicatorsTable(IndicatorsTable instance);
    partial void UpdateIndicatorsTable(IndicatorsTable instance);
    partial void DeleteIndicatorsTable(IndicatorsTable instance);
    partial void InsertUsersAndRolesMappingTable(UsersAndRolesMappingTable instance);
    partial void UpdateUsersAndRolesMappingTable(UsersAndRolesMappingTable instance);
    partial void DeleteUsersAndRolesMappingTable(UsersAndRolesMappingTable instance);
    partial void InsertUsersTable(UsersTable instance);
    partial void UpdateUsersTable(UsersTable instance);
    partial void DeleteUsersTable(UsersTable instance);
    partial void InsertRolesTable(RolesTable instance);
    partial void UpdateRolesTable(RolesTable instance);
    partial void DeleteRolesTable(RolesTable instance);
    partial void InsertCollectedBasicParametersTable(CollectedBasicParametersTable instance);
    partial void UpdateCollectedBasicParametersTable(CollectedBasicParametersTable instance);
    partial void DeleteCollectedBasicParametersTable(CollectedBasicParametersTable instance);
    #endregion
		
		public KPIWebDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["crimeanfeder_5ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ReportArchiveTable> ReportArchiveTables
		{
			get
			{
				return this.GetTable<ReportArchiveTable>();
			}
		}
		
		public System.Data.Linq.Table<ReportAndRolesMapping> ReportAndRolesMappings
		{
			get
			{
				return this.GetTable<ReportAndRolesMapping>();
			}
		}
		
		public System.Data.Linq.Table<BasicParametersTable> BasicParametersTables
		{
			get
			{
				return this.GetTable<BasicParametersTable>();
			}
		}
		
		public System.Data.Linq.Table<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTables
		{
			get
			{
				return this.GetTable<BasicParametersAndRolesMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<FirstLevelSubdivisionTable> FirstLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<FirstLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<SecondLevelSubdivisionTable> SecondLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<SecondLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<ThirdLevelSubdivisionTable> ThirdLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<ThirdLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorsTable> IndicatorsTables
		{
			get
			{
				return this.GetTable<IndicatorsTable>();
			}
		}
		
		public System.Data.Linq.Table<UsersAndRolesMappingTable> UsersAndRolesMappingTable
		{
			get
			{
				return this.GetTable<UsersAndRolesMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<UsersTable> UsersTable
		{
			get
			{
				return this.GetTable<UsersTable>();
			}
		}
		
		public System.Data.Linq.Table<RolesTable> RolesTable
		{
			get
			{
				return this.GetTable<RolesTable>();
			}
		}
		
		public System.Data.Linq.Table<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this.GetTable<CollectedBasicParametersTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportArchiveTable")]
	public partial class ReportArchiveTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportArchiveTableID;
		
		private bool _Active;
		
		private bool _Calculeted;
		
		private bool _Sent;
		
		private System.Nullable<System.DateTime> _SentDateTime;
		
		private bool _RecipientConfirmed;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _StartDateTime;
		
		private System.Nullable<System.DateTime> _EndDateTime;
		
		private System.Nullable<System.DateTime> _DateToSend;
		
		private EntitySet<ReportAndRolesMapping> _ReportAndRolesMappings;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportArchiveTableIDChanging(int value);
    partial void OnReportArchiveTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCalculetedChanging(bool value);
    partial void OnCalculetedChanged();
    partial void OnSentChanging(bool value);
    partial void OnSentChanged();
    partial void OnSentDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSentDateTimeChanged();
    partial void OnRecipientConfirmedChanging(bool value);
    partial void OnRecipientConfirmedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateTimeChanged();
    partial void OnEndDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateTimeChanged();
    partial void OnDateToSendChanging(System.Nullable<System.DateTime> value);
    partial void OnDateToSendChanged();
    #endregion
		
		public ReportArchiveTable()
		{
			this._ReportAndRolesMappings = new EntitySet<ReportAndRolesMapping>(new Action<ReportAndRolesMapping>(this.attach_ReportAndRolesMappings), new Action<ReportAndRolesMapping>(this.detach_ReportAndRolesMappings));
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportArchiveTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportArchiveTableID
		{
			get
			{
				return this._ReportArchiveTableID;
			}
			set
			{
				if ((this._ReportArchiveTableID != value))
				{
					this.OnReportArchiveTableIDChanging(value);
					this.SendPropertyChanging();
					this._ReportArchiveTableID = value;
					this.SendPropertyChanged("ReportArchiveTableID");
					this.OnReportArchiveTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Calculeted", DbType="Bit NOT NULL")]
		public bool Calculeted
		{
			get
			{
				return this._Calculeted;
			}
			set
			{
				if ((this._Calculeted != value))
				{
					this.OnCalculetedChanging(value);
					this.SendPropertyChanging();
					this._Calculeted = value;
					this.SendPropertyChanged("Calculeted");
					this.OnCalculetedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sent", DbType="Bit NOT NULL")]
		public bool Sent
		{
			get
			{
				return this._Sent;
			}
			set
			{
				if ((this._Sent != value))
				{
					this.OnSentChanging(value);
					this.SendPropertyChanging();
					this._Sent = value;
					this.SendPropertyChanged("Sent");
					this.OnSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SentDateTime
		{
			get
			{
				return this._SentDateTime;
			}
			set
			{
				if ((this._SentDateTime != value))
				{
					this.OnSentDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SentDateTime = value;
					this.SendPropertyChanged("SentDateTime");
					this.OnSentDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientConfirmed", DbType="Bit NOT NULL")]
		public bool RecipientConfirmed
		{
			get
			{
				return this._RecipientConfirmed;
			}
			set
			{
				if ((this._RecipientConfirmed != value))
				{
					this.OnRecipientConfirmedChanging(value);
					this.SendPropertyChanging();
					this._RecipientConfirmed = value;
					this.SendPropertyChanged("RecipientConfirmed");
					this.OnRecipientConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateToSend", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateToSend
		{
			get
			{
				return this._DateToSend;
			}
			set
			{
				if ((this._DateToSend != value))
				{
					this.OnDateToSendChanging(value);
					this.SendPropertyChanging();
					this._DateToSend = value;
					this.SendPropertyChanged("DateToSend");
					this.OnDateToSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportAndRolesMapping", Storage="_ReportAndRolesMappings", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<ReportAndRolesMapping> ReportAndRolesMappings
		{
			get
			{
				return this._ReportAndRolesMappings;
			}
			set
			{
				this._ReportAndRolesMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportAndRolesMappings(ReportAndRolesMapping entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_ReportAndRolesMappings(ReportAndRolesMapping entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportAndRolesMapping")]
	public partial class ReportAndRolesMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportAndRolesMappingID;
		
		private bool _Active;
		
		private int _FK_RolesTable;
		
		private int _FK_ReportArchiveTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<RolesTable> _RolesTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportAndRolesMappingIDChanging(int value);
    partial void OnReportAndRolesMappingIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_RolesTableChanging(int value);
    partial void OnFK_RolesTableChanged();
    partial void OnFK_ReportArchiveTableChanging(int value);
    partial void OnFK_ReportArchiveTableChanged();
    #endregion
		
		public ReportAndRolesMapping()
		{
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._RolesTable = default(EntityRef<RolesTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportAndRolesMappingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportAndRolesMappingID
		{
			get
			{
				return this._ReportAndRolesMappingID;
			}
			set
			{
				if ((this._ReportAndRolesMappingID != value))
				{
					this.OnReportAndRolesMappingIDChanging(value);
					this.SendPropertyChanging();
					this._ReportAndRolesMappingID = value;
					this.SendPropertyChanged("ReportAndRolesMappingID");
					this.OnReportAndRolesMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int NOT NULL")]
		public int FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					if (this._RolesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportAndRolesMapping", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.ReportAndRolesMappings.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.ReportAndRolesMappings.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(int);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_ReportAndRolesMapping", Storage="_RolesTable", ThisKey="FK_RolesTable", OtherKey="RolesTableID", IsForeignKey=true)]
		public RolesTable RolesTable
		{
			get
			{
				return this._RolesTable.Entity;
			}
			set
			{
				RolesTable previousValue = this._RolesTable.Entity;
				if (((previousValue != value) 
							|| (this._RolesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesTable.Entity = null;
						previousValue.ReportAndRolesMapping.Remove(this);
					}
					this._RolesTable.Entity = value;
					if ((value != null))
					{
						value.ReportAndRolesMapping.Add(this);
						this._FK_RolesTable = value.RolesTableID;
					}
					else
					{
						this._FK_RolesTable = default(int);
					}
					this.SendPropertyChanged("RolesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametersTable")]
	public partial class BasicParametersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametersTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _AbbreviationEN;
		
		private string _AbbreviationRU;
		
		private string _Measure;
		
		private EntitySet<BasicParametersAndRolesMappingTable> _BasicParametersAndRolesMappingTables;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametersTableIDChanging(int value);
    partial void OnBasicParametersTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationENChanging(string value);
    partial void OnAbbreviationENChanged();
    partial void OnAbbreviationRUChanging(string value);
    partial void OnAbbreviationRUChanged();
    partial void OnMeasureChanging(string value);
    partial void OnMeasureChanged();
    #endregion
		
		public BasicParametersTable()
		{
			this._BasicParametersAndRolesMappingTables = new EntitySet<BasicParametersAndRolesMappingTable>(new Action<BasicParametersAndRolesMappingTable>(this.attach_BasicParametersAndRolesMappingTables), new Action<BasicParametersAndRolesMappingTable>(this.detach_BasicParametersAndRolesMappingTables));
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametersTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasicParametersTableID
		{
			get
			{
				return this._BasicParametersTableID;
			}
			set
			{
				if ((this._BasicParametersTableID != value))
				{
					this.OnBasicParametersTableIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametersTableID = value;
					this.SendPropertyChanged("BasicParametersTableID");
					this.OnBasicParametersTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationEN", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AbbreviationEN
		{
			get
			{
				return this._AbbreviationEN;
			}
			set
			{
				if ((this._AbbreviationEN != value))
				{
					this.OnAbbreviationENChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationEN = value;
					this.SendPropertyChanged("AbbreviationEN");
					this.OnAbbreviationENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationRU", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AbbreviationRU
		{
			get
			{
				return this._AbbreviationRU;
			}
			set
			{
				if ((this._AbbreviationRU != value))
				{
					this.OnAbbreviationRUChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationRU = value;
					this.SendPropertyChanged("AbbreviationRU");
					this.OnAbbreviationRUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measure", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				if ((this._Measure != value))
				{
					this.OnMeasureChanging(value);
					this.SendPropertyChanging();
					this._Measure = value;
					this.SendPropertyChanged("Measure");
					this.OnMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametersAndRolesMappingTable", Storage="_BasicParametersAndRolesMappingTables", ThisKey="BasicParametersTableID", OtherKey="FK_BasicParametersTable")]
		public EntitySet<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTables
		{
			get
			{
				return this._BasicParametersAndRolesMappingTables;
			}
			set
			{
				this._BasicParametersAndRolesMappingTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="BasicParametersTableID", OtherKey="FK_BasicParametersTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicParametersAndRolesMappingTables(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_BasicParametersAndRolesMappingTables(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametersAndRolesMappingTable")]
	public partial class BasicParametersAndRolesMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametersAndRolesMappingTableID;
		
		private bool _Active;
		
		private int _FK_RolesTable;
		
		private int _FK_BasicParametersTable;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<RolesTable> _RolesTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametersAndRolesMappingTableIDChanging(int value);
    partial void OnBasicParametersAndRolesMappingTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_RolesTableChanging(int value);
    partial void OnFK_RolesTableChanged();
    partial void OnFK_BasicParametersTableChanging(int value);
    partial void OnFK_BasicParametersTableChanged();
    #endregion
		
		public BasicParametersAndRolesMappingTable()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._RolesTable = default(EntityRef<RolesTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametersAndRolesMappingTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasicParametersAndRolesMappingTableID
		{
			get
			{
				return this._BasicParametersAndRolesMappingTableID;
			}
			set
			{
				if ((this._BasicParametersAndRolesMappingTableID != value))
				{
					this.OnBasicParametersAndRolesMappingTableIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametersAndRolesMappingTableID = value;
					this.SendPropertyChanged("BasicParametersAndRolesMappingTableID");
					this.OnBasicParametersAndRolesMappingTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int NOT NULL")]
		public int FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					if (this._RolesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParametersTable", DbType="Int NOT NULL")]
		public int FK_BasicParametersTable
		{
			get
			{
				return this._FK_BasicParametersTable;
			}
			set
			{
				if ((this._FK_BasicParametersTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasicParametersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParametersTable = value;
					this.SendPropertyChanged("FK_BasicParametersTable");
					this.OnFK_BasicParametersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametersAndRolesMappingTable", Storage="_BasicParametersTable", ThisKey="FK_BasicParametersTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.BasicParametersAndRolesMappingTables.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametersAndRolesMappingTables.Add(this);
						this._FK_BasicParametersTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasicParametersTable = default(int);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_BasicParametersAndRolesMappingTable", Storage="_RolesTable", ThisKey="FK_RolesTable", OtherKey="RolesTableID", IsForeignKey=true)]
		public RolesTable RolesTable
		{
			get
			{
				return this._RolesTable.Entity;
			}
			set
			{
				RolesTable previousValue = this._RolesTable.Entity;
				if (((previousValue != value) 
							|| (this._RolesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesTable.Entity = null;
						previousValue.BasicParametersAndRolesMappingTable.Remove(this);
					}
					this._RolesTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametersAndRolesMappingTable.Add(this);
						this._FK_RolesTable = value.RolesTableID;
					}
					else
					{
						this._FK_RolesTable = default(int);
					}
					this.SendPropertyChanged("RolesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FirstLevelSubdivisionTable")]
	public partial class FirstLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FirstLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private EntitySet<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstLevelSubdivisionTableIDChanging(int value);
    partial void OnFirstLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FirstLevelSubdivisionTable()
		{
			this._SecondLevelSubdivisionTable = new EntitySet<SecondLevelSubdivisionTable>(new Action<SecondLevelSubdivisionTable>(this.attach_SecondLevelSubdivisionTable), new Action<SecondLevelSubdivisionTable>(this.detach_SecondLevelSubdivisionTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FirstLevelSubdivisionTableID
		{
			get
			{
				return this._FirstLevelSubdivisionTableID;
			}
			set
			{
				if ((this._FirstLevelSubdivisionTableID != value))
				{
					this.OnFirstLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._FirstLevelSubdivisionTableID = value;
					this.SendPropertyChanged("FirstLevelSubdivisionTableID");
					this.OnFirstLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_SecondLevelSubdivisionTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<SecondLevelSubdivisionTable> SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable;
			}
			set
			{
				this._SecondLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SecondLevelSubdivisionTable(SecondLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_SecondLevelSubdivisionTable(SecondLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecondLevelSubdivisionTable")]
	public partial class SecondLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SecondLevelSubdivisionTableID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private int _FK_FirstLevelSubdivisionTable;
		
		private EntitySet<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecondLevelSubdivisionTableIDChanging(int value);
    partial void OnSecondLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(int value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    #endregion
		
		public SecondLevelSubdivisionTable()
		{
			this._ThirdLevelSubdivisionTable = new EntitySet<ThirdLevelSubdivisionTable>(new Action<ThirdLevelSubdivisionTable>(this.attach_ThirdLevelSubdivisionTable), new Action<ThirdLevelSubdivisionTable>(this.detach_ThirdLevelSubdivisionTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SecondLevelSubdivisionTableID
		{
			get
			{
				return this._SecondLevelSubdivisionTableID;
			}
			set
			{
				if ((this._SecondLevelSubdivisionTableID != value))
				{
					this.OnSecondLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._SecondLevelSubdivisionTableID = value;
					this.SendPropertyChanged("SecondLevelSubdivisionTableID");
					this.OnSecondLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ThirdLevelSubdivisionTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<ThirdLevelSubdivisionTable> ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable;
			}
			set
			{
				this._ThirdLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_SecondLevelSubdivisionTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.SecondLevelSubdivisionTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.SecondLevelSubdivisionTable.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_ThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThirdLevelSubdivisionTable")]
	public partial class ThirdLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThirdLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_SecondLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThirdLevelSubdivisionTableIDChanging(int value);
    partial void OnThirdLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(int value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    #endregion
		
		public ThirdLevelSubdivisionTable()
		{
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThirdLevelSubdivisionTableID
		{
			get
			{
				return this._ThirdLevelSubdivisionTableID;
			}
			set
			{
				if ((this._ThirdLevelSubdivisionTableID != value))
				{
					this.OnThirdLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdLevelSubdivisionTableID = value;
					this.SendPropertyChanged("ThirdLevelSubdivisionTableID");
					this.OnThirdLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ThirdLevelSubdivisionTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.ThirdLevelSubdivisionTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelSubdivisionTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorsTable")]
	public partial class IndicatorsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorsTableID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private string _Measure;
		
		private string _Formula;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorsTableIDChanging(int value);
    partial void OnIndicatorsTableIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMeasureChanging(string value);
    partial void OnMeasureChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    #endregion
		
		public IndicatorsTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorsTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorsTableID
		{
			get
			{
				return this._IndicatorsTableID;
			}
			set
			{
				if ((this._IndicatorsTableID != value))
				{
					this.OnIndicatorsTableIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorsTableID = value;
					this.SendPropertyChanged("IndicatorsTableID");
					this.OnIndicatorsTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measure", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				if ((this._Measure != value))
				{
					this.OnMeasureChanging(value);
					this.SendPropertyChanging();
					this._Measure = value;
					this.SendPropertyChanged("Measure");
					this.OnMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="VarChar(500)")]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersAndRolesMappingTable")]
	public partial class UsersAndRolesMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsersAndRolesMappingTableId;
		
		private bool _Active;
		
		private int _FK_UsersTable;
		
		private int _FK_RolesTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
		private EntityRef<RolesTable> _RolesTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsersAndRolesMappingTableIdChanging(int value);
    partial void OnUsersAndRolesMappingTableIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_UsersTableChanging(int value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_RolesTableChanging(int value);
    partial void OnFK_RolesTableChanged();
    #endregion
		
		public UsersAndRolesMappingTable()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			this._RolesTable = default(EntityRef<RolesTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsersAndRolesMappingTableId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UsersAndRolesMappingTableId
		{
			get
			{
				return this._UsersAndRolesMappingTableId;
			}
			set
			{
				if ((this._UsersAndRolesMappingTableId != value))
				{
					this.OnUsersAndRolesMappingTableIdChanging(value);
					this.SendPropertyChanging();
					this._UsersAndRolesMappingTableId = value;
					this.SendPropertyChanged("UsersAndRolesMappingTableId");
					this.OnUsersAndRolesMappingTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int NOT NULL")]
		public int FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int NOT NULL")]
		public int FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					if (this._RolesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UsersAndRolesMappingTable", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.UsersAndRolesMappingTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.UsersAndRolesMappingTable.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(int);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_UsersAndRolesMappingTable", Storage="_RolesTable", ThisKey="FK_RolesTable", OtherKey="RolesTableID", IsForeignKey=true)]
		public RolesTable RolesTable
		{
			get
			{
				return this._RolesTable.Entity;
			}
			set
			{
				RolesTable previousValue = this._RolesTable.Entity;
				if (((previousValue != value) 
							|| (this._RolesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesTable.Entity = null;
						previousValue.UsersAndRolesMappingTable.Remove(this);
					}
					this._RolesTable.Entity = value;
					if ((value != null))
					{
						value.UsersAndRolesMappingTable.Add(this);
						this._FK_RolesTable = value.RolesTableID;
					}
					else
					{
						this._FK_RolesTable = default(int);
					}
					this.SendPropertyChanged("RolesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersTable")]
	public partial class UsersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsersTableID;
		
		private bool _Active;
		
		private string _Login;
		
		private string _Password;
		
		private string _Email;
		
		private System.Nullable<int> _FK_FirstLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_SecondLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_ThirdLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FourthLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FifthLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_RolesTable;
		
		private EntitySet<UsersAndRolesMappingTable> _UsersAndRolesMappingTable;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsersTableIDChanging(int value);
    partial void OnUsersTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_FourthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FourthLevelSubdivisionTableChanged();
    partial void OnFK_FifthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FifthLevelSubdivisionTableChanged();
    partial void OnFK_RolesTableChanging(System.Nullable<int> value);
    partial void OnFK_RolesTableChanged();
    #endregion
		
		public UsersTable()
		{
			this._UsersAndRolesMappingTable = new EntitySet<UsersAndRolesMappingTable>(new Action<UsersAndRolesMappingTable>(this.attach_UsersAndRolesMappingTable), new Action<UsersAndRolesMappingTable>(this.detach_UsersAndRolesMappingTable));
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsersTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UsersTableID
		{
			get
			{
				return this._UsersTableID;
			}
			set
			{
				if ((this._UsersTableID != value))
				{
					this.OnUsersTableIDChanging(value);
					this.SendPropertyChanging();
					this._UsersTableID = value;
					this.SendPropertyChanged("UsersTableID");
					this.OnUsersTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FourthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FourthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLevelSubdivisionTable != value))
				{
					this.OnFK_FourthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLevelSubdivisionTable");
					this.OnFK_FourthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FifthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FifthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FifthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FifthLevelSubdivisionTable != value))
				{
					this.OnFK_FifthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FifthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FifthLevelSubdivisionTable");
					this.OnFK_FifthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int")]
		public System.Nullable<int> FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UsersAndRolesMappingTable", Storage="_UsersAndRolesMappingTable", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<UsersAndRolesMappingTable> UsersAndRolesMappingTable
		{
			get
			{
				return this._UsersAndRolesMappingTable;
			}
			set
			{
				this._UsersAndRolesMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_UsersTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_UsersTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_UsersTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersAndRolesMappingTable(UsersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_UsersAndRolesMappingTable(UsersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolesTable")]
	public partial class RolesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RolesTableID;
		
		private bool _Active;
		
		private string _RoleName;
		
		private int _Role;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanEdit;
		
		private EntitySet<ReportAndRolesMapping> _ReportAndRolesMapping;
		
		private EntitySet<BasicParametersAndRolesMappingTable> _BasicParametersAndRolesMappingTable;
		
		private EntitySet<UsersAndRolesMappingTable> _UsersAndRolesMappingTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRolesTableIDChanging(int value);
    partial void OnRolesTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnCanViewChanging(System.Nullable<bool> value);
    partial void OnCanViewChanged();
    partial void OnCanEditChanging(System.Nullable<bool> value);
    partial void OnCanEditChanged();
    #endregion
		
		public RolesTable()
		{
			this._ReportAndRolesMapping = new EntitySet<ReportAndRolesMapping>(new Action<ReportAndRolesMapping>(this.attach_ReportAndRolesMapping), new Action<ReportAndRolesMapping>(this.detach_ReportAndRolesMapping));
			this._BasicParametersAndRolesMappingTable = new EntitySet<BasicParametersAndRolesMappingTable>(new Action<BasicParametersAndRolesMappingTable>(this.attach_BasicParametersAndRolesMappingTable), new Action<BasicParametersAndRolesMappingTable>(this.detach_BasicParametersAndRolesMappingTable));
			this._UsersAndRolesMappingTable = new EntitySet<UsersAndRolesMappingTable>(new Action<UsersAndRolesMappingTable>(this.attach_UsersAndRolesMappingTable), new Action<UsersAndRolesMappingTable>(this.detach_UsersAndRolesMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolesTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RolesTableID
		{
			get
			{
				return this._RolesTableID;
			}
			set
			{
				if ((this._RolesTableID != value))
				{
					this.OnRolesTableIDChanging(value);
					this.SendPropertyChanging();
					this._RolesTableID = value;
					this.SendPropertyChanged("RolesTableID");
					this.OnRolesTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_ReportAndRolesMapping", Storage="_ReportAndRolesMapping", ThisKey="RolesTableID", OtherKey="FK_RolesTable")]
		public EntitySet<ReportAndRolesMapping> ReportAndRolesMapping
		{
			get
			{
				return this._ReportAndRolesMapping;
			}
			set
			{
				this._ReportAndRolesMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_BasicParametersAndRolesMappingTable", Storage="_BasicParametersAndRolesMappingTable", ThisKey="RolesTableID", OtherKey="FK_RolesTable")]
		public EntitySet<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTable
		{
			get
			{
				return this._BasicParametersAndRolesMappingTable;
			}
			set
			{
				this._BasicParametersAndRolesMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_UsersAndRolesMappingTable", Storage="_UsersAndRolesMappingTable", ThisKey="RolesTableID", OtherKey="FK_RolesTable")]
		public EntitySet<UsersAndRolesMappingTable> UsersAndRolesMappingTable
		{
			get
			{
				return this._UsersAndRolesMappingTable;
			}
			set
			{
				this._UsersAndRolesMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportAndRolesMapping(ReportAndRolesMapping entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = this;
		}
		
		private void detach_ReportAndRolesMapping(ReportAndRolesMapping entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = null;
		}
		
		private void attach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = this;
		}
		
		private void detach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = null;
		}
		
		private void attach_UsersAndRolesMappingTable(UsersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = this;
		}
		
		private void detach_UsersAndRolesMappingTable(UsersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedBasicParametersTable")]
	public partial class CollectedBasicParametersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectedBasicParametersTableID;
		
		private bool _Active;
		
		private int _FK_UsersTable;
		
		private int _FK_ReportArchiveTable;
		
		private System.DateTime _LastChangeDateTime;
		
		private System.Nullable<System.DateTime> _SavedDateTime;
		
		private string _UserIP;
		
		private System.Nullable<double> _CollectedValue;
		
		private System.Nullable<int> _FK_BasicParametersTable;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectedBasicParametersTableIDChanging(int value);
    partial void OnCollectedBasicParametersTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_UsersTableChanging(int value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_ReportArchiveTableChanging(int value);
    partial void OnFK_ReportArchiveTableChanged();
    partial void OnLastChangeDateTimeChanging(System.DateTime value);
    partial void OnLastChangeDateTimeChanged();
    partial void OnSavedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSavedDateTimeChanged();
    partial void OnUserIPChanging(string value);
    partial void OnUserIPChanged();
    partial void OnCollectedValueChanging(System.Nullable<double> value);
    partial void OnCollectedValueChanged();
    partial void OnFK_BasicParametersTableChanging(System.Nullable<int> value);
    partial void OnFK_BasicParametersTableChanged();
    #endregion
		
		public CollectedBasicParametersTable()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedBasicParametersTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectedBasicParametersTableID
		{
			get
			{
				return this._CollectedBasicParametersTableID;
			}
			set
			{
				if ((this._CollectedBasicParametersTableID != value))
				{
					this.OnCollectedBasicParametersTableIDChanging(value);
					this.SendPropertyChanging();
					this._CollectedBasicParametersTableID = value;
					this.SendPropertyChanged("CollectedBasicParametersTableID");
					this.OnCollectedBasicParametersTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int NOT NULL")]
		public int FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangeDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangeDateTime
		{
			get
			{
				return this._LastChangeDateTime;
			}
			set
			{
				if ((this._LastChangeDateTime != value))
				{
					this.OnLastChangeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastChangeDateTime = value;
					this.SendPropertyChanged("LastChangeDateTime");
					this.OnLastChangeDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SavedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SavedDateTime
		{
			get
			{
				return this._SavedDateTime;
			}
			set
			{
				if ((this._SavedDateTime != value))
				{
					this.OnSavedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SavedDateTime = value;
					this.SendPropertyChanged("SavedDateTime");
					this.OnSavedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIP", DbType="VarChar(15)")]
		public string UserIP
		{
			get
			{
				return this._UserIP;
			}
			set
			{
				if ((this._UserIP != value))
				{
					this.OnUserIPChanging(value);
					this.SendPropertyChanging();
					this._UserIP = value;
					this.SendPropertyChanged("UserIP");
					this.OnUserIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedValue", DbType="Float")]
		public System.Nullable<double> CollectedValue
		{
			get
			{
				return this._CollectedValue;
			}
			set
			{
				if ((this._CollectedValue != value))
				{
					this.OnCollectedValueChanging(value);
					this.SendPropertyChanging();
					this._CollectedValue = value;
					this.SendPropertyChanged("CollectedValue");
					this.OnCollectedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParametersTable", DbType="Int")]
		public System.Nullable<int> FK_BasicParametersTable
		{
			get
			{
				return this._FK_BasicParametersTable;
			}
			set
			{
				if ((this._FK_BasicParametersTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasicParametersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParametersTable = value;
					this.SendPropertyChanged("FK_BasicParametersTable");
					this.OnFK_BasicParametersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_CollectedBasicParametersTable", Storage="_BasicParametersTable", ThisKey="FK_BasicParametersTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_BasicParametersTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasicParametersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedBasicParametersTable", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(int);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedBasicParametersTable", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(int);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
