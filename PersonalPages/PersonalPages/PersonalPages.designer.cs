#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.35312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonalPages
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestRelease_")]
	public partial class PersonalPagesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void UpdateBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void DeleteBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void InsertConnectGroup_And_Users(ConnectGroup_And_Users instance);
    partial void UpdateConnectGroup_And_Users(ConnectGroup_And_Users instance);
    partial void DeleteConnectGroup_And_Users(ConnectGroup_And_Users instance);
    partial void InsertConfirmationHistory(ConfirmationHistory instance);
    partial void UpdateConfirmationHistory(ConfirmationHistory instance);
    partial void DeleteConfirmationHistory(ConfirmationHistory instance);
    partial void InsertDocumentTable(DocumentTable instance);
    partial void UpdateDocumentTable(DocumentTable instance);
    partial void DeleteDocumentTable(DocumentTable instance);
    partial void InsertGroupsTable(GroupsTable instance);
    partial void UpdateGroupsTable(GroupsTable instance);
    partial void DeleteGroupsTable(GroupsTable instance);
    partial void InsertProjects(Projects instance);
    partial void UpdateProjects(Projects instance);
    partial void DeleteProjects(Projects instance);
    partial void InsertStudentsTable(StudentsTable instance);
    partial void UpdateStudentsTable(StudentsTable instance);
    partial void DeleteStudentsTable(StudentsTable instance);
    partial void InsertRolesTable(RolesTable instance);
    partial void UpdateRolesTable(RolesTable instance);
    partial void DeleteRolesTable(RolesTable instance);
    partial void InsertSpecializationTable(SpecializationTable instance);
    partial void UpdateSpecializationTable(SpecializationTable instance);
    partial void DeleteSpecializationTable(SpecializationTable instance);
    partial void InsertStudentChangeDataHistoryTable(StudentChangeDataHistoryTable instance);
    partial void UpdateStudentChangeDataHistoryTable(StudentChangeDataHistoryTable instance);
    partial void DeleteStudentChangeDataHistoryTable(StudentChangeDataHistoryTable instance);
    partial void InsertStudentsAndUserGroupMappingTable(StudentsAndUserGroupMappingTable instance);
    partial void UpdateStudentsAndUserGroupMappingTable(StudentsAndUserGroupMappingTable instance);
    partial void DeleteStudentsAndUserGroupMappingTable(StudentsAndUserGroupMappingTable instance);
    partial void InsertSubdivisionClassTable(SubdivisionClassTable instance);
    partial void UpdateSubdivisionClassTable(SubdivisionClassTable instance);
    partial void DeleteSubdivisionClassTable(SubdivisionClassTable instance);
    partial void InsertSubdomainRedirectAutologinTable(SubdomainRedirectAutologinTable instance);
    partial void UpdateSubdomainRedirectAutologinTable(SubdomainRedirectAutologinTable instance);
    partial void DeleteSubdomainRedirectAutologinTable(SubdomainRedirectAutologinTable instance);
    partial void InsertThirdLevelParametrs(ThirdLevelParametrs instance);
    partial void UpdateThirdLevelParametrs(ThirdLevelParametrs instance);
    partial void DeleteThirdLevelParametrs(ThirdLevelParametrs instance);
    partial void InsertThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void UpdateThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void DeleteThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void InsertTypeOfWritingFIO(TypeOfWritingFIO instance);
    partial void UpdateTypeOfWritingFIO(TypeOfWritingFIO instance);
    partial void DeleteTypeOfWritingFIO(TypeOfWritingFIO instance);
    partial void InsertUserDataChangeHistory(UserDataChangeHistory instance);
    partial void UpdateUserDataChangeHistory(UserDataChangeHistory instance);
    partial void DeleteUserDataChangeHistory(UserDataChangeHistory instance);
    partial void InsertUserGroupTable(UserGroupTable instance);
    partial void UpdateUserGroupTable(UserGroupTable instance);
    partial void DeleteUserGroupTable(UserGroupTable instance);
    partial void InsertUsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable instance);
    partial void UpdateUsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable instance);
    partial void DeleteUsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable instance);
    partial void InsertUsersTable(UsersTable instance);
    partial void UpdateUsersTable(UsersTable instance);
    partial void DeleteUsersTable(UsersTable instance);
    partial void InsertFifthLevelSubdivisionTable(FifthLevelSubdivisionTable instance);
    partial void UpdateFifthLevelSubdivisionTable(FifthLevelSubdivisionTable instance);
    partial void DeleteFifthLevelSubdivisionTable(FifthLevelSubdivisionTable instance);
    partial void InsertFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void UpdateFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void DeleteFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void InsertFieldOfExpertise(FieldOfExpertise instance);
    partial void UpdateFieldOfExpertise(FieldOfExpertise instance);
    partial void DeleteFieldOfExpertise(FieldOfExpertise instance);
    partial void InsertFourthLevelSubdivisionTable(FourthLevelSubdivisionTable instance);
    partial void UpdateFourthLevelSubdivisionTable(FourthLevelSubdivisionTable instance);
    partial void DeleteFourthLevelSubdivisionTable(FourthLevelSubdivisionTable instance);
    partial void InsertTasksTable(TasksTable instance);
    partial void UpdateTasksTable(TasksTable instance);
    partial void DeleteTasksTable(TasksTable instance);
    partial void InsertManualTable(ManualTable instance);
    partial void UpdateManualTable(ManualTable instance);
    partial void DeleteManualTable(ManualTable instance);
    partial void InsertPersonal_Documents(Personal_Documents instance);
    partial void UpdatePersonal_Documents(Personal_Documents instance);
    partial void DeletePersonal_Documents(Personal_Documents instance);
    partial void InsertSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void UpdateSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void DeleteSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    #endregion
		
		public PersonalPagesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TestRelease_ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PersonalPagesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersonalPagesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersonalPagesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersonalPagesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTable
		{
			get
			{
				return this.GetTable<BasicParametersAndRolesMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<ConnectGroup_And_Users> ConnectGroup_And_Users
		{
			get
			{
				return this.GetTable<ConnectGroup_And_Users>();
			}
		}
		
		public System.Data.Linq.Table<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this.GetTable<ConfirmationHistory>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTable> DocumentTable
		{
			get
			{
				return this.GetTable<DocumentTable>();
			}
		}
		
		public System.Data.Linq.Table<GroupsTable> GroupsTable
		{
			get
			{
				return this.GetTable<GroupsTable>();
			}
		}
		
		public System.Data.Linq.Table<Projects> Projects
		{
			get
			{
				return this.GetTable<Projects>();
			}
		}
		
		public System.Data.Linq.Table<StudentsTable> StudentsTable
		{
			get
			{
				return this.GetTable<StudentsTable>();
			}
		}
		
		public System.Data.Linq.Table<RolesTable> RolesTable
		{
			get
			{
				return this.GetTable<RolesTable>();
			}
		}
		
		public System.Data.Linq.Table<SpecializationTable> SpecializationTable
		{
			get
			{
				return this.GetTable<SpecializationTable>();
			}
		}
		
		public System.Data.Linq.Table<StudentChangeDataHistoryTable> StudentChangeDataHistoryTable
		{
			get
			{
				return this.GetTable<StudentChangeDataHistoryTable>();
			}
		}
		
		public System.Data.Linq.Table<StudentsAndUserGroupMappingTable> StudentsAndUserGroupMappingTable
		{
			get
			{
				return this.GetTable<StudentsAndUserGroupMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<SubdivisionClassTable> SubdivisionClassTable
		{
			get
			{
				return this.GetTable<SubdivisionClassTable>();
			}
		}
		
		public System.Data.Linq.Table<SubdomainRedirectAutologinTable> SubdomainRedirectAutologinTable
		{
			get
			{
				return this.GetTable<SubdomainRedirectAutologinTable>();
			}
		}
		
		public System.Data.Linq.Table<ThirdLevelParametrs> ThirdLevelParametrs
		{
			get
			{
				return this.GetTable<ThirdLevelParametrs>();
			}
		}
		
		public System.Data.Linq.Table<ThirdLevelSubdivisionTable> ThirdLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<ThirdLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfWritingFIO> TypeOfWritingFIO
		{
			get
			{
				return this.GetTable<TypeOfWritingFIO>();
			}
		}
		
		public System.Data.Linq.Table<UserDataChangeHistory> UserDataChangeHistory
		{
			get
			{
				return this.GetTable<UserDataChangeHistory>();
			}
		}
		
		public System.Data.Linq.Table<UserGroupTable> UserGroupTable
		{
			get
			{
				return this.GetTable<UserGroupTable>();
			}
		}
		
		public System.Data.Linq.Table<UsersAndUserGroupMappingTable> UsersAndUserGroupMappingTable
		{
			get
			{
				return this.GetTable<UsersAndUserGroupMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<UsersTable> UsersTable
		{
			get
			{
				return this.GetTable<UsersTable>();
			}
		}
		
		public System.Data.Linq.Table<FifthLevelSubdivisionTable> FifthLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<FifthLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<FirstLevelSubdivisionTable> FirstLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<FirstLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<FieldOfExpertise> FieldOfExpertise
		{
			get
			{
				return this.GetTable<FieldOfExpertise>();
			}
		}
		
		public System.Data.Linq.Table<FourthLevelSubdivisionTable> FourthLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<FourthLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<TasksTable> TasksTable
		{
			get
			{
				return this.GetTable<TasksTable>();
			}
		}
		
		public System.Data.Linq.Table<ManualTable> ManualTable
		{
			get
			{
				return this.GetTable<ManualTable>();
			}
		}
		
		public System.Data.Linq.Table<Personal_Documents> Personal_Documents
		{
			get
			{
				return this.GetTable<Personal_Documents>();
			}
		}
		
		public System.Data.Linq.Table<SecondLevelSubdivisionTable> SecondLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<SecondLevelSubdivisionTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametersAndRolesMappingTable")]
	public partial class BasicParametersAndRolesMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametersAndRolesMappingTableID;
		
		private bool _Active;
		
		private int _FK_RolesTable;
		
		private int _FK_BasicParametersTable;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanConfirm;
		
		private EntityRef<RolesTable> _RolesTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametersAndRolesMappingTableIDChanging(int value);
    partial void OnBasicParametersAndRolesMappingTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_RolesTableChanging(int value);
    partial void OnFK_RolesTableChanged();
    partial void OnFK_BasicParametersTableChanging(int value);
    partial void OnFK_BasicParametersTableChanged();
    partial void OnCanEditChanging(System.Nullable<bool> value);
    partial void OnCanEditChanged();
    partial void OnCanViewChanging(System.Nullable<bool> value);
    partial void OnCanViewChanged();
    partial void OnCanConfirmChanging(System.Nullable<bool> value);
    partial void OnCanConfirmChanged();
    #endregion
		
		public BasicParametersAndRolesMappingTable()
		{
			this._RolesTable = default(EntityRef<RolesTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametersAndRolesMappingTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasicParametersAndRolesMappingTableID
		{
			get
			{
				return this._BasicParametersAndRolesMappingTableID;
			}
			set
			{
				if ((this._BasicParametersAndRolesMappingTableID != value))
				{
					this.OnBasicParametersAndRolesMappingTableIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametersAndRolesMappingTableID = value;
					this.SendPropertyChanged("BasicParametersAndRolesMappingTableID");
					this.OnBasicParametersAndRolesMappingTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int NOT NULL")]
		public int FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					if (this._RolesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParametersTable", DbType="Int NOT NULL")]
		public int FK_BasicParametersTable
		{
			get
			{
				return this._FK_BasicParametersTable;
			}
			set
			{
				if ((this._FK_BasicParametersTable != value))
				{
					this.OnFK_BasicParametersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParametersTable = value;
					this.SendPropertyChanged("FK_BasicParametersTable");
					this.OnFK_BasicParametersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanConfirm", DbType="Bit")]
		public System.Nullable<bool> CanConfirm
		{
			get
			{
				return this._CanConfirm;
			}
			set
			{
				if ((this._CanConfirm != value))
				{
					this.OnCanConfirmChanging(value);
					this.SendPropertyChanging();
					this._CanConfirm = value;
					this.SendPropertyChanged("CanConfirm");
					this.OnCanConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_BasicParametersAndRolesMappingTable", Storage="_RolesTable", ThisKey="FK_RolesTable", OtherKey="RolesTableID", IsForeignKey=true)]
		public RolesTable RolesTable
		{
			get
			{
				return this._RolesTable.Entity;
			}
			set
			{
				RolesTable previousValue = this._RolesTable.Entity;
				if (((previousValue != value) 
							|| (this._RolesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesTable.Entity = null;
						previousValue.BasicParametersAndRolesMappingTable.Remove(this);
					}
					this._RolesTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametersAndRolesMappingTable.Add(this);
						this._FK_RolesTable = value.RolesTableID;
					}
					else
					{
						this._FK_RolesTable = default(int);
					}
					this.SendPropertyChanged("RolesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConnectGroup_And_Users")]
	public partial class ConnectGroup_And_Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_UserTable;
		
		private System.Nullable<int> _FK_GroupTable;
		
		private string _Subject_Name;
		
		private EntityRef<GroupsTable> _GroupsTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_UserTableChanging(System.Nullable<int> value);
    partial void OnFK_UserTableChanged();
    partial void OnFK_GroupTableChanging(System.Nullable<int> value);
    partial void OnFK_GroupTableChanged();
    partial void OnSubject_NameChanging(string value);
    partial void OnSubject_NameChanged();
    #endregion
		
		public ConnectGroup_And_Users()
		{
			this._GroupsTable = default(EntityRef<GroupsTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserTable", DbType="Int")]
		public System.Nullable<int> FK_UserTable
		{
			get
			{
				return this._FK_UserTable;
			}
			set
			{
				if ((this._FK_UserTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UserTable = value;
					this.SendPropertyChanged("FK_UserTable");
					this.OnFK_UserTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_GroupTable", DbType="Int")]
		public System.Nullable<int> FK_GroupTable
		{
			get
			{
				return this._FK_GroupTable;
			}
			set
			{
				if ((this._FK_GroupTable != value))
				{
					if (this._GroupsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_GroupTableChanging(value);
					this.SendPropertyChanging();
					this._FK_GroupTable = value;
					this.SendPropertyChanged("FK_GroupTable");
					this.OnFK_GroupTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_Name", DbType="VarChar(50)")]
		public string Subject_Name
		{
			get
			{
				return this._Subject_Name;
			}
			set
			{
				if ((this._Subject_Name != value))
				{
					this.OnSubject_NameChanging(value);
					this.SendPropertyChanging();
					this._Subject_Name = value;
					this.SendPropertyChanged("Subject_Name");
					this.OnSubject_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupsTable_ConnectGroup_And_Users", Storage="_GroupsTable", ThisKey="FK_GroupTable", OtherKey="ID", IsForeignKey=true)]
		public GroupsTable GroupsTable
		{
			get
			{
				return this._GroupsTable.Entity;
			}
			set
			{
				GroupsTable previousValue = this._GroupsTable.Entity;
				if (((previousValue != value) 
							|| (this._GroupsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupsTable.Entity = null;
						previousValue.ConnectGroup_And_Users.Remove(this);
					}
					this._GroupsTable.Entity = value;
					if ((value != null))
					{
						value.ConnectGroup_And_Users.Add(this);
						this._FK_GroupTable = value.ID;
					}
					else
					{
						this._FK_GroupTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConnectGroup_And_Users", Storage="_UsersTable", ThisKey="FK_UserTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.ConnectGroup_And_Users.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.ConnectGroup_And_Users.Add(this);
						this._FK_UserTable = value.UsersTableID;
					}
					else
					{
						this._FK_UserTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfirmationHistory")]
	public partial class ConfirmationHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _FK_IndicatorsTable;
		
		private System.Nullable<int> _FK_CalculatedParamTable;
		
		private System.Nullable<int> _FK_BasicParamTable;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private System.Nullable<int> _FK_ReportTable;
		
		private string _Comment;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnFK_IndicatorsTableChanging(System.Nullable<int> value);
    partial void OnFK_IndicatorsTableChanged();
    partial void OnFK_CalculatedParamTableChanging(System.Nullable<int> value);
    partial void OnFK_CalculatedParamTableChanged();
    partial void OnFK_BasicParamTableChanging(System.Nullable<int> value);
    partial void OnFK_BasicParamTableChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_ReportTableChanging(System.Nullable<int> value);
    partial void OnFK_ReportTableChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public ConfirmationHistory()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorsTable", DbType="Int")]
		public System.Nullable<int> FK_IndicatorsTable
		{
			get
			{
				return this._FK_IndicatorsTable;
			}
			set
			{
				if ((this._FK_IndicatorsTable != value))
				{
					this.OnFK_IndicatorsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorsTable = value;
					this.SendPropertyChanged("FK_IndicatorsTable");
					this.OnFK_IndicatorsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CalculatedParamTable", DbType="Int")]
		public System.Nullable<int> FK_CalculatedParamTable
		{
			get
			{
				return this._FK_CalculatedParamTable;
			}
			set
			{
				if ((this._FK_CalculatedParamTable != value))
				{
					this.OnFK_CalculatedParamTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CalculatedParamTable = value;
					this.SendPropertyChanged("FK_CalculatedParamTable");
					this.OnFK_CalculatedParamTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParamTable", DbType="Int")]
		public System.Nullable<int> FK_BasicParamTable
		{
			get
			{
				return this._FK_BasicParamTable;
			}
			set
			{
				if ((this._FK_BasicParamTable != value))
				{
					this.OnFK_BasicParamTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParamTable = value;
					this.SendPropertyChanged("FK_BasicParamTable");
					this.OnFK_BasicParamTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportTable", DbType="Int")]
		public System.Nullable<int> FK_ReportTable
		{
			get
			{
				return this._FK_ReportTable;
			}
			set
			{
				if ((this._FK_ReportTable != value))
				{
					this.OnFK_ReportTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportTable = value;
					this.SendPropertyChanged("FK_ReportTable");
					this.OnFK_ReportTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConfirmationHistory", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.ConfirmationHistory.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.ConfirmationHistory.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentTable")]
	public partial class DocumentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentID;
		
		private string _DocumentName;
		
		private string _DocumentLink;
		
		private System.Nullable<bool> _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentNameChanging(string value);
    partial void OnDocumentNameChanged();
    partial void OnDocumentLinkChanging(string value);
    partial void OnDocumentLinkChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public DocumentTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentName", DbType="VarChar(2000)")]
		public string DocumentName
		{
			get
			{
				return this._DocumentName;
			}
			set
			{
				if ((this._DocumentName != value))
				{
					this.OnDocumentNameChanging(value);
					this.SendPropertyChanging();
					this._DocumentName = value;
					this.SendPropertyChanged("DocumentName");
					this.OnDocumentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentLink", DbType="VarChar(200)")]
		public string DocumentLink
		{
			get
			{
				return this._DocumentLink;
			}
			set
			{
				if ((this._DocumentLink != value))
				{
					this.OnDocumentLinkChanging(value);
					this.SendPropertyChanging();
					this._DocumentLink = value;
					this.SendPropertyChanged("DocumentLink");
					this.OnDocumentLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupsTable")]
	public partial class GroupsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private System.Nullable<int> _FK_SecondLevel;
		
		private EntitySet<ConnectGroup_And_Users> _ConnectGroup_And_Users;
		
		private EntitySet<TasksTable> _TasksTable;
		
		private EntitySet<Personal_Documents> _Personal_Documents;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_SecondLevelChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelChanged();
    #endregion
		
		public GroupsTable()
		{
			this._ConnectGroup_And_Users = new EntitySet<ConnectGroup_And_Users>(new Action<ConnectGroup_And_Users>(this.attach_ConnectGroup_And_Users), new Action<ConnectGroup_And_Users>(this.detach_ConnectGroup_And_Users));
			this._TasksTable = new EntitySet<TasksTable>(new Action<TasksTable>(this.attach_TasksTable), new Action<TasksTable>(this.detach_TasksTable));
			this._Personal_Documents = new EntitySet<Personal_Documents>(new Action<Personal_Documents>(this.attach_Personal_Documents), new Action<Personal_Documents>(this.detach_Personal_Documents));
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevel", DbType="Int")]
		public System.Nullable<int> FK_SecondLevel
		{
			get
			{
				return this._FK_SecondLevel;
			}
			set
			{
				if ((this._FK_SecondLevel != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevel = value;
					this.SendPropertyChanged("FK_SecondLevel");
					this.OnFK_SecondLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupsTable_ConnectGroup_And_Users", Storage="_ConnectGroup_And_Users", ThisKey="ID", OtherKey="FK_GroupTable")]
		public EntitySet<ConnectGroup_And_Users> ConnectGroup_And_Users
		{
			get
			{
				return this._ConnectGroup_And_Users;
			}
			set
			{
				this._ConnectGroup_And_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupsTable_TasksTable", Storage="_TasksTable", ThisKey="ID", OtherKey="FK_Group")]
		public EntitySet<TasksTable> TasksTable
		{
			get
			{
				return this._TasksTable;
			}
			set
			{
				this._TasksTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupsTable_Personal_Documents", Storage="_Personal_Documents", ThisKey="ID", OtherKey="FK_Group")]
		public EntitySet<Personal_Documents> Personal_Documents
		{
			get
			{
				return this._Personal_Documents;
			}
			set
			{
				this._Personal_Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_GroupsTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevel", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.GroupsTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.GroupsTable.Add(this);
						this._FK_SecondLevel = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.GroupsTable = this;
		}
		
		private void detach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.GroupsTable = null;
		}
		
		private void attach_TasksTable(TasksTable entity)
		{
			this.SendPropertyChanging();
			entity.GroupsTable = this;
		}
		
		private void detach_TasksTable(TasksTable entity)
		{
			this.SendPropertyChanging();
			entity.GroupsTable = null;
		}
		
		private void attach_Personal_Documents(Personal_Documents entity)
		{
			this.SendPropertyChanging();
			entity.GroupsTable = this;
		}
		
		private void detach_Personal_Documents(Personal_Documents entity)
		{
			this.SendPropertyChanging();
			entity.GroupsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _Active;
		
		private string _ProjectName;
		
		private System.Nullable<bool> _CreateButton;
		
		private EntitySet<UserGroupTable> _UserGroupTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnCreateButtonChanging(System.Nullable<bool> value);
    partial void OnCreateButtonChanged();
    #endregion
		
		public Projects()
		{
			this._UserGroupTable = new EntitySet<UserGroupTable>(new Action<UserGroupTable>(this.attach_UserGroupTable), new Action<UserGroupTable>(this.detach_UserGroupTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(500)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateButton", DbType="Bit")]
		public System.Nullable<bool> CreateButton
		{
			get
			{
				return this._CreateButton;
			}
			set
			{
				if ((this._CreateButton != value))
				{
					this.OnCreateButtonChanging(value);
					this.SendPropertyChanging();
					this._CreateButton = value;
					this.SendPropertyChanged("CreateButton");
					this.OnCreateButtonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_UserGroupTable", Storage="_UserGroupTable", ThisKey="Id", OtherKey="Fk_ProjectsTable")]
		public EntitySet<UserGroupTable> UserGroupTable
		{
			get
			{
				return this._UserGroupTable;
			}
			set
			{
				this._UserGroupTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroupTable(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_UserGroupTable(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentsTable")]
	public partial class StudentsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentsTableID;
		
		private System.Nullable<bool> _Active;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronimyc;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<int> _FK_FirstLevelSubdivision;
		
		private System.Nullable<int> _FK_SecondLevelSubdivision;
		
		private System.Nullable<int> _FK_Specialisation;
		
		private System.Nullable<int> _YearOfEnter;
		
		private System.Nullable<int> _Kurs;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.Nullable<int> _FK_Group;
		
		private System.Nullable<bool> _Data_Status;
		
		private EntitySet<StudentChangeDataHistoryTable> _StudentChangeDataHistoryTable;
		
		private EntitySet<StudentsAndUserGroupMappingTable> _StudentsAndUserGroupMappingTable;
		
		private EntityRef<SpecializationTable> _SpecializationTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentsTableIDChanging(int value);
    partial void OnStudentsTableIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronimycChanging(string value);
    partial void OnPatronimycChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnFK_FirstLevelSubdivisionChanging(System.Nullable<int> value);
    partial void OnFK_FirstLevelSubdivisionChanged();
    partial void OnFK_SecondLevelSubdivisionChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelSubdivisionChanged();
    partial void OnFK_SpecialisationChanging(System.Nullable<int> value);
    partial void OnFK_SpecialisationChanged();
    partial void OnYearOfEnterChanging(System.Nullable<int> value);
    partial void OnYearOfEnterChanged();
    partial void OnKursChanging(System.Nullable<int> value);
    partial void OnKursChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnFK_GroupChanging(System.Nullable<int> value);
    partial void OnFK_GroupChanged();
    partial void OnData_StatusChanging(System.Nullable<bool> value);
    partial void OnData_StatusChanged();
    #endregion
		
		public StudentsTable()
		{
			this._StudentChangeDataHistoryTable = new EntitySet<StudentChangeDataHistoryTable>(new Action<StudentChangeDataHistoryTable>(this.attach_StudentChangeDataHistoryTable), new Action<StudentChangeDataHistoryTable>(this.detach_StudentChangeDataHistoryTable));
			this._StudentsAndUserGroupMappingTable = new EntitySet<StudentsAndUserGroupMappingTable>(new Action<StudentsAndUserGroupMappingTable>(this.attach_StudentsAndUserGroupMappingTable), new Action<StudentsAndUserGroupMappingTable>(this.detach_StudentsAndUserGroupMappingTable));
			this._SpecializationTable = default(EntityRef<SpecializationTable>);
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentsTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentsTableID
		{
			get
			{
				return this._StudentsTableID;
			}
			set
			{
				if ((this._StudentsTableID != value))
				{
					this.OnStudentsTableIDChanging(value);
					this.SendPropertyChanging();
					this._StudentsTableID = value;
					this.SendPropertyChanged("StudentsTableID");
					this.OnStudentsTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronimyc", DbType="NVarChar(50)")]
		public string Patronimyc
		{
			get
			{
				return this._Patronimyc;
			}
			set
			{
				if ((this._Patronimyc != value))
				{
					this.OnPatronimycChanging(value);
					this.SendPropertyChanging();
					this._Patronimyc = value;
					this.SendPropertyChanged("Patronimyc");
					this.OnPatronimycChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivision", DbType="Int")]
		public System.Nullable<int> FK_FirstLevelSubdivision
		{
			get
			{
				return this._FK_FirstLevelSubdivision;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivision != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivision = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivision");
					this.OnFK_FirstLevelSubdivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivision", DbType="Int")]
		public System.Nullable<int> FK_SecondLevelSubdivision
		{
			get
			{
				return this._FK_SecondLevelSubdivision;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivision != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivision = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivision");
					this.OnFK_SecondLevelSubdivisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Specialisation", DbType="Int")]
		public System.Nullable<int> FK_Specialisation
		{
			get
			{
				return this._FK_Specialisation;
			}
			set
			{
				if ((this._FK_Specialisation != value))
				{
					if (this._SpecializationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SpecialisationChanging(value);
					this.SendPropertyChanging();
					this._FK_Specialisation = value;
					this.SendPropertyChanged("FK_Specialisation");
					this.OnFK_SpecialisationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearOfEnter", DbType="Int")]
		public System.Nullable<int> YearOfEnter
		{
			get
			{
				return this._YearOfEnter;
			}
			set
			{
				if ((this._YearOfEnter != value))
				{
					this.OnYearOfEnterChanging(value);
					this.SendPropertyChanging();
					this._YearOfEnter = value;
					this.SendPropertyChanged("YearOfEnter");
					this.OnYearOfEnterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kurs", DbType="Int")]
		public System.Nullable<int> Kurs
		{
			get
			{
				return this._Kurs;
			}
			set
			{
				if ((this._Kurs != value))
				{
					this.OnKursChanging(value);
					this.SendPropertyChanging();
					this._Kurs = value;
					this.SendPropertyChanged("Kurs");
					this.OnKursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Group", DbType="Int")]
		public System.Nullable<int> FK_Group
		{
			get
			{
				return this._FK_Group;
			}
			set
			{
				if ((this._FK_Group != value))
				{
					this.OnFK_GroupChanging(value);
					this.SendPropertyChanging();
					this._FK_Group = value;
					this.SendPropertyChanged("FK_Group");
					this.OnFK_GroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_Status", DbType="Bit")]
		public System.Nullable<bool> Data_Status
		{
			get
			{
				return this._Data_Status;
			}
			set
			{
				if ((this._Data_Status != value))
				{
					this.OnData_StatusChanging(value);
					this.SendPropertyChanging();
					this._Data_Status = value;
					this.SendPropertyChanged("Data_Status");
					this.OnData_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsTable_StudentChangeDataHistoryTable", Storage="_StudentChangeDataHistoryTable", ThisKey="StudentsTableID", OtherKey="FK_StudentTable")]
		public EntitySet<StudentChangeDataHistoryTable> StudentChangeDataHistoryTable
		{
			get
			{
				return this._StudentChangeDataHistoryTable;
			}
			set
			{
				this._StudentChangeDataHistoryTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsTable_StudentsAndUserGroupMappingTable", Storage="_StudentsAndUserGroupMappingTable", ThisKey="StudentsTableID", OtherKey="FK_StudentTable")]
		public EntitySet<StudentsAndUserGroupMappingTable> StudentsAndUserGroupMappingTable
		{
			get
			{
				return this._StudentsAndUserGroupMappingTable;
			}
			set
			{
				this._StudentsAndUserGroupMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_StudentsTable", Storage="_SpecializationTable", ThisKey="FK_Specialisation", OtherKey="SpecializationTableID", IsForeignKey=true)]
		public SpecializationTable SpecializationTable
		{
			get
			{
				return this._SpecializationTable.Entity;
			}
			set
			{
				SpecializationTable previousValue = this._SpecializationTable.Entity;
				if (((previousValue != value) 
							|| (this._SpecializationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecializationTable.Entity = null;
						previousValue.StudentsTable.Remove(this);
					}
					this._SpecializationTable.Entity = value;
					if ((value != null))
					{
						value.StudentsTable.Add(this);
						this._FK_Specialisation = value.SpecializationTableID;
					}
					else
					{
						this._FK_Specialisation = default(Nullable<int>);
					}
					this.SendPropertyChanged("SpecializationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_StudentsTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivision", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.StudentsTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.StudentsTable.Add(this);
						this._FK_FirstLevelSubdivision = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivision = default(Nullable<int>);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_StudentsTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivision", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.StudentsTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.StudentsTable.Add(this);
						this._FK_SecondLevelSubdivision = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivision = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentChangeDataHistoryTable(StudentChangeDataHistoryTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentsTable = this;
		}
		
		private void detach_StudentChangeDataHistoryTable(StudentChangeDataHistoryTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentsTable = null;
		}
		
		private void attach_StudentsAndUserGroupMappingTable(StudentsAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentsTable = this;
		}
		
		private void detach_StudentsAndUserGroupMappingTable(StudentsAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolesTable")]
	public partial class RolesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RolesTableID;
		
		private bool _Active;
		
		private string _RoleName;
		
		private System.Nullable<bool> _IsHead;
		
		private EntitySet<BasicParametersAndRolesMappingTable> _BasicParametersAndRolesMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRolesTableIDChanging(int value);
    partial void OnRolesTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnIsHeadChanging(System.Nullable<bool> value);
    partial void OnIsHeadChanged();
    #endregion
		
		public RolesTable()
		{
			this._BasicParametersAndRolesMappingTable = new EntitySet<BasicParametersAndRolesMappingTable>(new Action<BasicParametersAndRolesMappingTable>(this.attach_BasicParametersAndRolesMappingTable), new Action<BasicParametersAndRolesMappingTable>(this.detach_BasicParametersAndRolesMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolesTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RolesTableID
		{
			get
			{
				return this._RolesTableID;
			}
			set
			{
				if ((this._RolesTableID != value))
				{
					this.OnRolesTableIDChanging(value);
					this.SendPropertyChanging();
					this._RolesTableID = value;
					this.SendPropertyChanged("RolesTableID");
					this.OnRolesTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHead", DbType="Bit")]
		public System.Nullable<bool> IsHead
		{
			get
			{
				return this._IsHead;
			}
			set
			{
				if ((this._IsHead != value))
				{
					this.OnIsHeadChanging(value);
					this.SendPropertyChanging();
					this._IsHead = value;
					this.SendPropertyChanged("IsHead");
					this.OnIsHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_BasicParametersAndRolesMappingTable", Storage="_BasicParametersAndRolesMappingTable", ThisKey="RolesTableID", OtherKey="FK_RolesTable")]
		public EntitySet<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTable
		{
			get
			{
				return this._BasicParametersAndRolesMappingTable;
			}
			set
			{
				this._BasicParametersAndRolesMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = this;
		}
		
		private void detach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecializationTable")]
	public partial class SpecializationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecializationTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _SpecializationNumber;
		
		private System.Nullable<int> _FK_FieldOfExpertise;
		
		private EntitySet<StudentsTable> _StudentsTable;
		
		private EntitySet<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntityRef<FieldOfExpertise> _FieldOfExpertise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecializationTableIDChanging(int value);
    partial void OnSpecializationTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpecializationNumberChanging(string value);
    partial void OnSpecializationNumberChanged();
    partial void OnFK_FieldOfExpertiseChanging(System.Nullable<int> value);
    partial void OnFK_FieldOfExpertiseChanged();
    #endregion
		
		public SpecializationTable()
		{
			this._StudentsTable = new EntitySet<StudentsTable>(new Action<StudentsTable>(this.attach_StudentsTable), new Action<StudentsTable>(this.detach_StudentsTable));
			this._FourthLevelSubdivisionTable = new EntitySet<FourthLevelSubdivisionTable>(new Action<FourthLevelSubdivisionTable>(this.attach_FourthLevelSubdivisionTable), new Action<FourthLevelSubdivisionTable>(this.detach_FourthLevelSubdivisionTable));
			this._FieldOfExpertise = default(EntityRef<FieldOfExpertise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecializationTableID
		{
			get
			{
				return this._SpecializationTableID;
			}
			set
			{
				if ((this._SpecializationTableID != value))
				{
					this.OnSpecializationTableIDChanging(value);
					this.SendPropertyChanging();
					this._SpecializationTableID = value;
					this.SendPropertyChanged("SpecializationTableID");
					this.OnSpecializationTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationNumber", DbType="VarChar(50)")]
		public string SpecializationNumber
		{
			get
			{
				return this._SpecializationNumber;
			}
			set
			{
				if ((this._SpecializationNumber != value))
				{
					this.OnSpecializationNumberChanging(value);
					this.SendPropertyChanging();
					this._SpecializationNumber = value;
					this.SendPropertyChanged("SpecializationNumber");
					this.OnSpecializationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FieldOfExpertise", DbType="Int")]
		public System.Nullable<int> FK_FieldOfExpertise
		{
			get
			{
				return this._FK_FieldOfExpertise;
			}
			set
			{
				if ((this._FK_FieldOfExpertise != value))
				{
					if (this._FieldOfExpertise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FieldOfExpertiseChanging(value);
					this.SendPropertyChanging();
					this._FK_FieldOfExpertise = value;
					this.SendPropertyChanged("FK_FieldOfExpertise");
					this.OnFK_FieldOfExpertiseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_StudentsTable", Storage="_StudentsTable", ThisKey="SpecializationTableID", OtherKey="FK_Specialisation")]
		public EntitySet<StudentsTable> StudentsTable
		{
			get
			{
				return this._StudentsTable;
			}
			set
			{
				this._StudentsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_FourthLevelSubdivisionTable", Storage="_FourthLevelSubdivisionTable", ThisKey="SpecializationTableID", OtherKey="FK_Specialization")]
		public EntitySet<FourthLevelSubdivisionTable> FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable;
			}
			set
			{
				this._FourthLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldOfExpertise_SpecializationTable", Storage="_FieldOfExpertise", ThisKey="FK_FieldOfExpertise", OtherKey="FieldOfExpertiseID", IsForeignKey=true)]
		public FieldOfExpertise FieldOfExpertise
		{
			get
			{
				return this._FieldOfExpertise.Entity;
			}
			set
			{
				FieldOfExpertise previousValue = this._FieldOfExpertise.Entity;
				if (((previousValue != value) 
							|| (this._FieldOfExpertise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldOfExpertise.Entity = null;
						previousValue.SpecializationTable.Remove(this);
					}
					this._FieldOfExpertise.Entity = value;
					if ((value != null))
					{
						value.SpecializationTable.Add(this);
						this._FK_FieldOfExpertise = value.FieldOfExpertiseID;
					}
					else
					{
						this._FK_FieldOfExpertise = default(Nullable<int>);
					}
					this.SendPropertyChanged("FieldOfExpertise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentsTable(StudentsTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = this;
		}
		
		private void detach_StudentsTable(StudentsTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = null;
		}
		
		private void attach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = this;
		}
		
		private void detach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentChangeDataHistoryTable")]
	public partial class StudentChangeDataHistoryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentChangeDataID;
		
		private System.Nullable<int> _FK_StudentTable;
		
		private System.Nullable<System.DateTime> _ChangeDate;
		
		private string _Name;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _ID_Param_ToChange;
		
		private System.Nullable<int> _Status;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private EntityRef<StudentsTable> _StudentsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentChangeDataIDChanging(int value);
    partial void OnStudentChangeDataIDChanged();
    partial void OnFK_StudentTableChanging(System.Nullable<int> value);
    partial void OnFK_StudentTableChanged();
    partial void OnChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnChangeDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnID_Param_ToChangeChanging(System.Nullable<int> value);
    partial void OnID_Param_ToChangeChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    #endregion
		
		public StudentChangeDataHistoryTable()
		{
			this._StudentsTable = default(EntityRef<StudentsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentChangeDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentChangeDataID
		{
			get
			{
				return this._StudentChangeDataID;
			}
			set
			{
				if ((this._StudentChangeDataID != value))
				{
					this.OnStudentChangeDataIDChanging(value);
					this.SendPropertyChanging();
					this._StudentChangeDataID = value;
					this.SendPropertyChanged("StudentChangeDataID");
					this.OnStudentChangeDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_StudentTable", DbType="Int")]
		public System.Nullable<int> FK_StudentTable
		{
			get
			{
				return this._FK_StudentTable;
			}
			set
			{
				if ((this._FK_StudentTable != value))
				{
					if (this._StudentsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StudentTableChanging(value);
					this.SendPropertyChanging();
					this._FK_StudentTable = value;
					this.SendPropertyChanged("FK_StudentTable");
					this.OnFK_StudentTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="Date")]
		public System.Nullable<System.DateTime> ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Param_ToChange", DbType="Int")]
		public System.Nullable<int> ID_Param_ToChange
		{
			get
			{
				return this._ID_Param_ToChange;
			}
			set
			{
				if ((this._ID_Param_ToChange != value))
				{
					this.OnID_Param_ToChangeChanging(value);
					this.SendPropertyChanging();
					this._ID_Param_ToChange = value;
					this.SendPropertyChanged("ID_Param_ToChange");
					this.OnID_Param_ToChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="VarChar(MAX)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="VarChar(MAX)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsTable_StudentChangeDataHistoryTable", Storage="_StudentsTable", ThisKey="FK_StudentTable", OtherKey="StudentsTableID", IsForeignKey=true)]
		public StudentsTable StudentsTable
		{
			get
			{
				return this._StudentsTable.Entity;
			}
			set
			{
				StudentsTable previousValue = this._StudentsTable.Entity;
				if (((previousValue != value) 
							|| (this._StudentsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentsTable.Entity = null;
						previousValue.StudentChangeDataHistoryTable.Remove(this);
					}
					this._StudentsTable.Entity = value;
					if ((value != null))
					{
						value.StudentChangeDataHistoryTable.Add(this);
						this._FK_StudentTable = value.StudentsTableID;
					}
					else
					{
						this._FK_StudentTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("StudentsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentsAndUserGroupMappingTable")]
	public partial class StudentsAndUserGroupMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentAndGroupID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_StudentTable;
		
		private System.Nullable<int> _FK_GroupUserTable;
		
		private EntityRef<StudentsTable> _StudentsTable;
		
		private EntityRef<UserGroupTable> _UserGroupTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentAndGroupIDChanging(int value);
    partial void OnStudentAndGroupIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_StudentTableChanging(System.Nullable<int> value);
    partial void OnFK_StudentTableChanged();
    partial void OnFK_GroupUserTableChanging(System.Nullable<int> value);
    partial void OnFK_GroupUserTableChanged();
    #endregion
		
		public StudentsAndUserGroupMappingTable()
		{
			this._StudentsTable = default(EntityRef<StudentsTable>);
			this._UserGroupTable = default(EntityRef<UserGroupTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentAndGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentAndGroupID
		{
			get
			{
				return this._StudentAndGroupID;
			}
			set
			{
				if ((this._StudentAndGroupID != value))
				{
					this.OnStudentAndGroupIDChanging(value);
					this.SendPropertyChanging();
					this._StudentAndGroupID = value;
					this.SendPropertyChanged("StudentAndGroupID");
					this.OnStudentAndGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_StudentTable", DbType="Int")]
		public System.Nullable<int> FK_StudentTable
		{
			get
			{
				return this._FK_StudentTable;
			}
			set
			{
				if ((this._FK_StudentTable != value))
				{
					if (this._StudentsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StudentTableChanging(value);
					this.SendPropertyChanging();
					this._FK_StudentTable = value;
					this.SendPropertyChanged("FK_StudentTable");
					this.OnFK_StudentTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_GroupUserTable", DbType="Int")]
		public System.Nullable<int> FK_GroupUserTable
		{
			get
			{
				return this._FK_GroupUserTable;
			}
			set
			{
				if ((this._FK_GroupUserTable != value))
				{
					if (this._UserGroupTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_GroupUserTableChanging(value);
					this.SendPropertyChanging();
					this._FK_GroupUserTable = value;
					this.SendPropertyChanged("FK_GroupUserTable");
					this.OnFK_GroupUserTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentsTable_StudentsAndUserGroupMappingTable", Storage="_StudentsTable", ThisKey="FK_StudentTable", OtherKey="StudentsTableID", IsForeignKey=true)]
		public StudentsTable StudentsTable
		{
			get
			{
				return this._StudentsTable.Entity;
			}
			set
			{
				StudentsTable previousValue = this._StudentsTable.Entity;
				if (((previousValue != value) 
							|| (this._StudentsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentsTable.Entity = null;
						previousValue.StudentsAndUserGroupMappingTable.Remove(this);
					}
					this._StudentsTable.Entity = value;
					if ((value != null))
					{
						value.StudentsAndUserGroupMappingTable.Add(this);
						this._FK_StudentTable = value.StudentsTableID;
					}
					else
					{
						this._FK_StudentTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("StudentsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_StudentsAndUserGroupMappingTable", Storage="_UserGroupTable", ThisKey="FK_GroupUserTable", OtherKey="UserGroupID", IsForeignKey=true)]
		public UserGroupTable UserGroupTable
		{
			get
			{
				return this._UserGroupTable.Entity;
			}
			set
			{
				UserGroupTable previousValue = this._UserGroupTable.Entity;
				if (((previousValue != value) 
							|| (this._UserGroupTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroupTable.Entity = null;
						previousValue.StudentsAndUserGroupMappingTable.Remove(this);
					}
					this._UserGroupTable.Entity = value;
					if ((value != null))
					{
						value.StudentsAndUserGroupMappingTable.Add(this);
						this._FK_GroupUserTable = value.UserGroupID;
					}
					else
					{
						this._FK_GroupUserTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroupTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubdivisionClassTable")]
	public partial class SubdivisionClassTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private EntitySet<ThirdLevelParametrs> _ThirdLevelParametrs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SubdivisionClassTable()
		{
			this._ThirdLevelParametrs = new EntitySet<ThirdLevelParametrs>(new Action<ThirdLevelParametrs>(this.attach_ThirdLevelParametrs), new Action<ThirdLevelParametrs>(this.detach_ThirdLevelParametrs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubdivisionClassTable_ThirdLevelParametrs", Storage="_ThirdLevelParametrs", ThisKey="ID", OtherKey="FK_SubdivisionClassTable")]
		public EntitySet<ThirdLevelParametrs> ThirdLevelParametrs
		{
			get
			{
				return this._ThirdLevelParametrs;
			}
			set
			{
				this._ThirdLevelParametrs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThirdLevelParametrs(ThirdLevelParametrs entity)
		{
			this.SendPropertyChanging();
			entity.SubdivisionClassTable = this;
		}
		
		private void detach_ThirdLevelParametrs(ThirdLevelParametrs entity)
		{
			this.SendPropertyChanging();
			entity.SubdivisionClassTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubdomainRedirectAutologinTable")]
	public partial class SubdomainRedirectAutologinTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private string _PassCode;
		
		private System.DateTime _EndDate;
		
		private int _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnPassCodeChanging(string value);
    partial void OnPassCodeChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public SubdomainRedirectAutologinTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string PassCode
		{
			get
			{
				return this._PassCode;
			}
			set
			{
				if ((this._PassCode != value))
				{
					this.OnPassCodeChanging(value);
					this.SendPropertyChanging();
					this._PassCode = value;
					this.SendPropertyChanged("PassCode");
					this.OnPassCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThirdLevelParametrs")]
	public partial class ThirdLevelParametrs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThirdLevelParametrsID;
		
		private bool _Active;
		
		private bool _CanGraduate;
		
		private System.Nullable<bool> _IsBasic;
		
		private System.Nullable<int> _FK_SubdivisionClassTable;
		
		private EntityRef<SubdivisionClassTable> _SubdivisionClassTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThirdLevelParametrsIDChanging(int value);
    partial void OnThirdLevelParametrsIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCanGraduateChanging(bool value);
    partial void OnCanGraduateChanged();
    partial void OnIsBasicChanging(System.Nullable<bool> value);
    partial void OnIsBasicChanged();
    partial void OnFK_SubdivisionClassTableChanging(System.Nullable<int> value);
    partial void OnFK_SubdivisionClassTableChanged();
    #endregion
		
		public ThirdLevelParametrs()
		{
			this._SubdivisionClassTable = default(EntityRef<SubdivisionClassTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdLevelParametrsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ThirdLevelParametrsID
		{
			get
			{
				return this._ThirdLevelParametrsID;
			}
			set
			{
				if ((this._ThirdLevelParametrsID != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThirdLevelParametrsIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdLevelParametrsID = value;
					this.SendPropertyChanged("ThirdLevelParametrsID");
					this.OnThirdLevelParametrsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanGraduate", DbType="Bit NOT NULL")]
		public bool CanGraduate
		{
			get
			{
				return this._CanGraduate;
			}
			set
			{
				if ((this._CanGraduate != value))
				{
					this.OnCanGraduateChanging(value);
					this.SendPropertyChanging();
					this._CanGraduate = value;
					this.SendPropertyChanged("CanGraduate");
					this.OnCanGraduateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBasic", DbType="Bit")]
		public System.Nullable<bool> IsBasic
		{
			get
			{
				return this._IsBasic;
			}
			set
			{
				if ((this._IsBasic != value))
				{
					this.OnIsBasicChanging(value);
					this.SendPropertyChanging();
					this._IsBasic = value;
					this.SendPropertyChanged("IsBasic");
					this.OnIsBasicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SubdivisionClassTable", DbType="Int")]
		public System.Nullable<int> FK_SubdivisionClassTable
		{
			get
			{
				return this._FK_SubdivisionClassTable;
			}
			set
			{
				if ((this._FK_SubdivisionClassTable != value))
				{
					if (this._SubdivisionClassTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SubdivisionClassTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SubdivisionClassTable = value;
					this.SendPropertyChanged("FK_SubdivisionClassTable");
					this.OnFK_SubdivisionClassTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubdivisionClassTable_ThirdLevelParametrs", Storage="_SubdivisionClassTable", ThisKey="FK_SubdivisionClassTable", OtherKey="ID", IsForeignKey=true)]
		public SubdivisionClassTable SubdivisionClassTable
		{
			get
			{
				return this._SubdivisionClassTable.Entity;
			}
			set
			{
				SubdivisionClassTable previousValue = this._SubdivisionClassTable.Entity;
				if (((previousValue != value) 
							|| (this._SubdivisionClassTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubdivisionClassTable.Entity = null;
						previousValue.ThirdLevelParametrs.Remove(this);
					}
					this._SubdivisionClassTable.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelParametrs.Add(this);
						this._FK_SubdivisionClassTable = value.ID;
					}
					else
					{
						this._FK_SubdivisionClassTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubdivisionClassTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_ThirdLevelParametrs", Storage="_ThirdLevelSubdivisionTable", ThisKey="ThirdLevelParametrsID", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.ThirdLevelParametrs = null;
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelParametrs = this;
						this._ThirdLevelParametrsID = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._ThirdLevelParametrsID = default(int);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThirdLevelSubdivisionTable")]
	public partial class ThirdLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThirdLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_SecondLevelSubdivisionTable;
		
		private EntityRef<ThirdLevelParametrs> _ThirdLevelParametrs;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntitySet<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThirdLevelSubdivisionTableIDChanging(int value);
    partial void OnThirdLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(int value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    #endregion
		
		public ThirdLevelSubdivisionTable()
		{
			this._ThirdLevelParametrs = default(EntityRef<ThirdLevelParametrs>);
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FourthLevelSubdivisionTable = new EntitySet<FourthLevelSubdivisionTable>(new Action<FourthLevelSubdivisionTable>(this.attach_FourthLevelSubdivisionTable), new Action<FourthLevelSubdivisionTable>(this.detach_FourthLevelSubdivisionTable));
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThirdLevelSubdivisionTableID
		{
			get
			{
				return this._ThirdLevelSubdivisionTableID;
			}
			set
			{
				if ((this._ThirdLevelSubdivisionTableID != value))
				{
					this.OnThirdLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdLevelSubdivisionTableID = value;
					this.SendPropertyChanged("ThirdLevelSubdivisionTableID");
					this.OnThirdLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_ThirdLevelParametrs", Storage="_ThirdLevelParametrs", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="ThirdLevelParametrsID", IsUnique=true, IsForeignKey=false)]
		public ThirdLevelParametrs ThirdLevelParametrs
		{
			get
			{
				return this._ThirdLevelParametrs.Entity;
			}
			set
			{
				ThirdLevelParametrs previousValue = this._ThirdLevelParametrs.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelParametrs.Entity = null;
						previousValue.ThirdLevelSubdivisionTable = null;
					}
					this._ThirdLevelParametrs.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelSubdivisionTable = this;
					}
					this.SendPropertyChanged("ThirdLevelParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_FourthLevelSubdivisionTable", Storage="_FourthLevelSubdivisionTable", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<FourthLevelSubdivisionTable> FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable;
			}
			set
			{
				this._FourthLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ThirdLevelSubdivisionTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.ThirdLevelSubdivisionTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelSubdivisionTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
		
		private void attach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfWritingFIO")]
	public partial class TypeOfWritingFIO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FK_UserTableID;
		
		private string _FIO;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFK_UserTableIDChanging(System.Nullable<int> value);
    partial void OnFK_UserTableIDChanged();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public TypeOfWritingFIO()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserTableID", DbType="Int")]
		public System.Nullable<int> FK_UserTableID
		{
			get
			{
				return this._FK_UserTableID;
			}
			set
			{
				if ((this._FK_UserTableID != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserTableIDChanging(value);
					this.SendPropertyChanging();
					this._FK_UserTableID = value;
					this.SendPropertyChanged("FK_UserTableID");
					this.OnFK_UserTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO", DbType="NVarChar(50)")]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_TypeOfWritingFIO", Storage="_UsersTable", ThisKey="FK_UserTableID", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.TypeOfWritingFIO.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.TypeOfWritingFIO.Add(this);
						this._FK_UserTableID = value.UsersTableID;
					}
					else
					{
						this._FK_UserTableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDataChangeHistory")]
	public partial class UserDataChangeHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserChangeDataID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_User;
		
		private System.Nullable<System.DateTime> _ChangeDate;
		
		private string _Name;
		
		private System.Nullable<int> _ID_Param_ToChange;
		
		private System.Nullable<int> _Status;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserChangeDataIDChanging(int value);
    partial void OnUserChangeDataIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_UserChanging(System.Nullable<int> value);
    partial void OnFK_UserChanged();
    partial void OnChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnChangeDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnID_Param_ToChangeChanging(System.Nullable<int> value);
    partial void OnID_Param_ToChangeChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    #endregion
		
		public UserDataChangeHistory()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserChangeDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserChangeDataID
		{
			get
			{
				return this._UserChangeDataID;
			}
			set
			{
				if ((this._UserChangeDataID != value))
				{
					this.OnUserChangeDataIDChanging(value);
					this.SendPropertyChanging();
					this._UserChangeDataID = value;
					this.SendPropertyChanged("UserChangeDataID");
					this.OnUserChangeDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_User", DbType="Int")]
		public System.Nullable<int> FK_User
		{
			get
			{
				return this._FK_User;
			}
			set
			{
				if ((this._FK_User != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserChanging(value);
					this.SendPropertyChanging();
					this._FK_User = value;
					this.SendPropertyChanged("FK_User");
					this.OnFK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="Date")]
		public System.Nullable<System.DateTime> ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Param_ToChange", DbType="Int")]
		public System.Nullable<int> ID_Param_ToChange
		{
			get
			{
				return this._ID_Param_ToChange;
			}
			set
			{
				if ((this._ID_Param_ToChange != value))
				{
					this.OnID_Param_ToChangeChanging(value);
					this.SendPropertyChanging();
					this._ID_Param_ToChange = value;
					this.SendPropertyChanged("ID_Param_ToChange");
					this.OnID_Param_ToChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="VarChar(MAX)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="VarChar(MAX)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UserDataChangeHistory", Storage="_UsersTable", ThisKey="FK_User", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.UserDataChangeHistory.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.UserDataChangeHistory.Add(this);
						this._FK_User = value.UsersTableID;
					}
					else
					{
						this._FK_User = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroupTable")]
	public partial class UserGroupTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserGroupID;
		
		private System.Nullable<bool> _Active;
		
		private string _UserGroupName;
		
		private string _URLtoGroupMain;
		
		private System.Nullable<bool> _AutoLogin;
		
		private System.Nullable<int> _Fk_ProjectsTable;
		
		private EntitySet<StudentsAndUserGroupMappingTable> _StudentsAndUserGroupMappingTable;
		
		private EntitySet<UsersAndUserGroupMappingTable> _UsersAndUserGroupMappingTable;
		
		private EntityRef<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnUserGroupNameChanging(string value);
    partial void OnUserGroupNameChanged();
    partial void OnURLtoGroupMainChanging(string value);
    partial void OnURLtoGroupMainChanged();
    partial void OnAutoLoginChanging(System.Nullable<bool> value);
    partial void OnAutoLoginChanged();
    partial void OnFk_ProjectsTableChanging(System.Nullable<int> value);
    partial void OnFk_ProjectsTableChanged();
    #endregion
		
		public UserGroupTable()
		{
			this._StudentsAndUserGroupMappingTable = new EntitySet<StudentsAndUserGroupMappingTable>(new Action<StudentsAndUserGroupMappingTable>(this.attach_StudentsAndUserGroupMappingTable), new Action<StudentsAndUserGroupMappingTable>(this.detach_StudentsAndUserGroupMappingTable));
			this._UsersAndUserGroupMappingTable = new EntitySet<UsersAndUserGroupMappingTable>(new Action<UsersAndUserGroupMappingTable>(this.attach_UsersAndUserGroupMappingTable), new Action<UsersAndUserGroupMappingTable>(this.detach_UsersAndUserGroupMappingTable));
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupName", DbType="NVarChar(50)")]
		public string UserGroupName
		{
			get
			{
				return this._UserGroupName;
			}
			set
			{
				if ((this._UserGroupName != value))
				{
					this.OnUserGroupNameChanging(value);
					this.SendPropertyChanging();
					this._UserGroupName = value;
					this.SendPropertyChanged("UserGroupName");
					this.OnUserGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URLtoGroupMain", DbType="VarChar(500)")]
		public string URLtoGroupMain
		{
			get
			{
				return this._URLtoGroupMain;
			}
			set
			{
				if ((this._URLtoGroupMain != value))
				{
					this.OnURLtoGroupMainChanging(value);
					this.SendPropertyChanging();
					this._URLtoGroupMain = value;
					this.SendPropertyChanged("URLtoGroupMain");
					this.OnURLtoGroupMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoLogin", DbType="Bit")]
		public System.Nullable<bool> AutoLogin
		{
			get
			{
				return this._AutoLogin;
			}
			set
			{
				if ((this._AutoLogin != value))
				{
					this.OnAutoLoginChanging(value);
					this.SendPropertyChanging();
					this._AutoLogin = value;
					this.SendPropertyChanged("AutoLogin");
					this.OnAutoLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_ProjectsTable", DbType="Int")]
		public System.Nullable<int> Fk_ProjectsTable
		{
			get
			{
				return this._Fk_ProjectsTable;
			}
			set
			{
				if ((this._Fk_ProjectsTable != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_ProjectsTableChanging(value);
					this.SendPropertyChanging();
					this._Fk_ProjectsTable = value;
					this.SendPropertyChanged("Fk_ProjectsTable");
					this.OnFk_ProjectsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_StudentsAndUserGroupMappingTable", Storage="_StudentsAndUserGroupMappingTable", ThisKey="UserGroupID", OtherKey="FK_GroupUserTable")]
		public EntitySet<StudentsAndUserGroupMappingTable> StudentsAndUserGroupMappingTable
		{
			get
			{
				return this._StudentsAndUserGroupMappingTable;
			}
			set
			{
				this._StudentsAndUserGroupMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_UsersAndUserGroupMappingTable", Storage="_UsersAndUserGroupMappingTable", ThisKey="UserGroupID", OtherKey="FK_GroupTable")]
		public EntitySet<UsersAndUserGroupMappingTable> UsersAndUserGroupMappingTable
		{
			get
			{
				return this._UsersAndUserGroupMappingTable;
			}
			set
			{
				this._UsersAndUserGroupMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_UserGroupTable", Storage="_Projects", ThisKey="Fk_ProjectsTable", OtherKey="Id", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.UserGroupTable.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.UserGroupTable.Add(this);
						this._Fk_ProjectsTable = value.Id;
					}
					else
					{
						this._Fk_ProjectsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentsAndUserGroupMappingTable(StudentsAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = this;
		}
		
		private void detach_StudentsAndUserGroupMappingTable(StudentsAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = null;
		}
		
		private void attach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = this;
		}
		
		private void detach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersAndUserGroupMappingTable")]
	public partial class UsersAndUserGroupMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserAndGroupID;
		
		private System.Nullable<int> _FK_UserTable;
		
		private System.Nullable<int> _FK_GroupTable;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<UserGroupTable> _UserGroupTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAndGroupIDChanging(int value);
    partial void OnUserAndGroupIDChanged();
    partial void OnFK_UserTableChanging(System.Nullable<int> value);
    partial void OnFK_UserTableChanged();
    partial void OnFK_GroupTableChanging(System.Nullable<int> value);
    partial void OnFK_GroupTableChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public UsersAndUserGroupMappingTable()
		{
			this._UserGroupTable = default(EntityRef<UserGroupTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAndGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserAndGroupID
		{
			get
			{
				return this._UserAndGroupID;
			}
			set
			{
				if ((this._UserAndGroupID != value))
				{
					this.OnUserAndGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserAndGroupID = value;
					this.SendPropertyChanged("UserAndGroupID");
					this.OnUserAndGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserTable", DbType="Int")]
		public System.Nullable<int> FK_UserTable
		{
			get
			{
				return this._FK_UserTable;
			}
			set
			{
				if ((this._FK_UserTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UserTable = value;
					this.SendPropertyChanged("FK_UserTable");
					this.OnFK_UserTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_GroupTable", DbType="Int")]
		public System.Nullable<int> FK_GroupTable
		{
			get
			{
				return this._FK_GroupTable;
			}
			set
			{
				if ((this._FK_GroupTable != value))
				{
					if (this._UserGroupTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_GroupTableChanging(value);
					this.SendPropertyChanging();
					this._FK_GroupTable = value;
					this.SendPropertyChanged("FK_GroupTable");
					this.OnFK_GroupTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_UsersAndUserGroupMappingTable", Storage="_UserGroupTable", ThisKey="FK_GroupTable", OtherKey="UserGroupID", IsForeignKey=true)]
		public UserGroupTable UserGroupTable
		{
			get
			{
				return this._UserGroupTable.Entity;
			}
			set
			{
				UserGroupTable previousValue = this._UserGroupTable.Entity;
				if (((previousValue != value) 
							|| (this._UserGroupTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroupTable.Entity = null;
						previousValue.UsersAndUserGroupMappingTable.Remove(this);
					}
					this._UserGroupTable.Entity = value;
					if ((value != null))
					{
						value.UsersAndUserGroupMappingTable.Add(this);
						this._FK_GroupTable = value.UserGroupID;
					}
					else
					{
						this._FK_GroupTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroupTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UsersAndUserGroupMappingTable", Storage="_UsersTable", ThisKey="FK_UserTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.UsersAndUserGroupMappingTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.UsersAndUserGroupMappingTable.Add(this);
						this._FK_UserTable = value.UsersTableID;
					}
					else
					{
						this._FK_UserTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersTable")]
	public partial class UsersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsersTableID;
		
		private bool _Active;
		
		private string _Login;
		
		private string _Password;
		
		private string _Email;
		
		private System.Nullable<int> _FK_FirstLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_SecondLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_ThirdLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FourthLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FifthLevelSubdivisionTable;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.Nullable<int> _FK_ZeroLevelSubdivisionTable;
		
		private string _PassCode;
		
		private System.Nullable<bool> _Confirmed;
		
		private string _Position;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronimyc;
		
		private string _AcademicDegree;
		
		private string _AcademicRank;
		
		private System.Nullable<bool> _Gender;
		
		private string _PublicInfo;
		
		private System.Nullable<bool> _Data_Status;
		
		private EntitySet<ConnectGroup_And_Users> _ConnectGroup_And_Users;
		
		private EntitySet<ConfirmationHistory> _ConfirmationHistory;
		
		private EntitySet<TypeOfWritingFIO> _TypeOfWritingFIO;
		
		private EntitySet<UserDataChangeHistory> _UserDataChangeHistory;
		
		private EntitySet<UsersAndUserGroupMappingTable> _UsersAndUserGroupMappingTable;
		
		private EntitySet<Personal_Documents> _Personal_Documents;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
		private EntityRef<FifthLevelSubdivisionTable> _FifthLevelSubdivisionTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsersTableIDChanging(int value);
    partial void OnUsersTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_FourthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FourthLevelSubdivisionTableChanged();
    partial void OnFK_FifthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FifthLevelSubdivisionTableChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnFK_ZeroLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ZeroLevelSubdivisionTableChanged();
    partial void OnPassCodeChanging(string value);
    partial void OnPassCodeChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronimycChanging(string value);
    partial void OnPatronimycChanged();
    partial void OnAcademicDegreeChanging(string value);
    partial void OnAcademicDegreeChanged();
    partial void OnAcademicRankChanging(string value);
    partial void OnAcademicRankChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnPublicInfoChanging(string value);
    partial void OnPublicInfoChanged();
    partial void OnData_StatusChanging(System.Nullable<bool> value);
    partial void OnData_StatusChanged();
    #endregion
		
		public UsersTable()
		{
			this._ConnectGroup_And_Users = new EntitySet<ConnectGroup_And_Users>(new Action<ConnectGroup_And_Users>(this.attach_ConnectGroup_And_Users), new Action<ConnectGroup_And_Users>(this.detach_ConnectGroup_And_Users));
			this._ConfirmationHistory = new EntitySet<ConfirmationHistory>(new Action<ConfirmationHistory>(this.attach_ConfirmationHistory), new Action<ConfirmationHistory>(this.detach_ConfirmationHistory));
			this._TypeOfWritingFIO = new EntitySet<TypeOfWritingFIO>(new Action<TypeOfWritingFIO>(this.attach_TypeOfWritingFIO), new Action<TypeOfWritingFIO>(this.detach_TypeOfWritingFIO));
			this._UserDataChangeHistory = new EntitySet<UserDataChangeHistory>(new Action<UserDataChangeHistory>(this.attach_UserDataChangeHistory), new Action<UserDataChangeHistory>(this.detach_UserDataChangeHistory));
			this._UsersAndUserGroupMappingTable = new EntitySet<UsersAndUserGroupMappingTable>(new Action<UsersAndUserGroupMappingTable>(this.attach_UsersAndUserGroupMappingTable), new Action<UsersAndUserGroupMappingTable>(this.detach_UsersAndUserGroupMappingTable));
			this._Personal_Documents = new EntitySet<Personal_Documents>(new Action<Personal_Documents>(this.attach_Personal_Documents), new Action<Personal_Documents>(this.detach_Personal_Documents));
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			this._FifthLevelSubdivisionTable = default(EntityRef<FifthLevelSubdivisionTable>);
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsersTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UsersTableID
		{
			get
			{
				return this._UsersTableID;
			}
			set
			{
				if ((this._UsersTableID != value))
				{
					this.OnUsersTableIDChanging(value);
					this.SendPropertyChanging();
					this._UsersTableID = value;
					this.SendPropertyChanged("UsersTableID");
					this.OnUsersTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FourthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FourthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLevelSubdivisionTable != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FourthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLevelSubdivisionTable");
					this.OnFK_FourthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FifthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FifthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FifthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FifthLevelSubdivisionTable != value))
				{
					if (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FifthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FifthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FifthLevelSubdivisionTable");
					this.OnFK_FifthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ZeroLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ZeroLevelSubdivisionTable
		{
			get
			{
				return this._FK_ZeroLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ZeroLevelSubdivisionTable != value))
				{
					this.OnFK_ZeroLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ZeroLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ZeroLevelSubdivisionTable");
					this.OnFK_ZeroLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassCode", DbType="VarChar(50)")]
		public string PassCode
		{
			get
			{
				return this._PassCode;
			}
			set
			{
				if ((this._PassCode != value))
				{
					this.OnPassCodeChanging(value);
					this.SendPropertyChanging();
					this._PassCode = value;
					this.SendPropertyChanged("PassCode");
					this.OnPassCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(500)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronimyc", DbType="NVarChar(50)")]
		public string Patronimyc
		{
			get
			{
				return this._Patronimyc;
			}
			set
			{
				if ((this._Patronimyc != value))
				{
					this.OnPatronimycChanging(value);
					this.SendPropertyChanging();
					this._Patronimyc = value;
					this.SendPropertyChanged("Patronimyc");
					this.OnPatronimycChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicDegree", DbType="NVarChar(50)")]
		public string AcademicDegree
		{
			get
			{
				return this._AcademicDegree;
			}
			set
			{
				if ((this._AcademicDegree != value))
				{
					this.OnAcademicDegreeChanging(value);
					this.SendPropertyChanging();
					this._AcademicDegree = value;
					this.SendPropertyChanged("AcademicDegree");
					this.OnAcademicDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicRank", DbType="NVarChar(50)")]
		public string AcademicRank
		{
			get
			{
				return this._AcademicRank;
			}
			set
			{
				if ((this._AcademicRank != value))
				{
					this.OnAcademicRankChanging(value);
					this.SendPropertyChanging();
					this._AcademicRank = value;
					this.SendPropertyChanged("AcademicRank");
					this.OnAcademicRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicInfo", DbType="NVarChar(MAX)")]
		public string PublicInfo
		{
			get
			{
				return this._PublicInfo;
			}
			set
			{
				if ((this._PublicInfo != value))
				{
					this.OnPublicInfoChanging(value);
					this.SendPropertyChanging();
					this._PublicInfo = value;
					this.SendPropertyChanged("PublicInfo");
					this.OnPublicInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_Status", DbType="Bit")]
		public System.Nullable<bool> Data_Status
		{
			get
			{
				return this._Data_Status;
			}
			set
			{
				if ((this._Data_Status != value))
				{
					this.OnData_StatusChanging(value);
					this.SendPropertyChanging();
					this._Data_Status = value;
					this.SendPropertyChanged("Data_Status");
					this.OnData_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConnectGroup_And_Users", Storage="_ConnectGroup_And_Users", ThisKey="UsersTableID", OtherKey="FK_UserTable")]
		public EntitySet<ConnectGroup_And_Users> ConnectGroup_And_Users
		{
			get
			{
				return this._ConnectGroup_And_Users;
			}
			set
			{
				this._ConnectGroup_And_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConfirmationHistory", Storage="_ConfirmationHistory", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this._ConfirmationHistory;
			}
			set
			{
				this._ConfirmationHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_TypeOfWritingFIO", Storage="_TypeOfWritingFIO", ThisKey="UsersTableID", OtherKey="FK_UserTableID")]
		public EntitySet<TypeOfWritingFIO> TypeOfWritingFIO
		{
			get
			{
				return this._TypeOfWritingFIO;
			}
			set
			{
				this._TypeOfWritingFIO.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UserDataChangeHistory", Storage="_UserDataChangeHistory", ThisKey="UsersTableID", OtherKey="FK_User")]
		public EntitySet<UserDataChangeHistory> UserDataChangeHistory
		{
			get
			{
				return this._UserDataChangeHistory;
			}
			set
			{
				this._UserDataChangeHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UsersAndUserGroupMappingTable", Storage="_UsersAndUserGroupMappingTable", ThisKey="UsersTableID", OtherKey="FK_UserTable")]
		public EntitySet<UsersAndUserGroupMappingTable> UsersAndUserGroupMappingTable
		{
			get
			{
				return this._UsersAndUserGroupMappingTable;
			}
			set
			{
				this._UsersAndUserGroupMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_Personal_Documents", Storage="_Personal_Documents", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<Personal_Documents> Personal_Documents
		{
			get
			{
				return this._Personal_Documents;
			}
			set
			{
				this._Personal_Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_UsersTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_UsersTable", Storage="_FifthLevelSubdivisionTable", ThisKey="FK_FifthLevelSubdivisionTable", OtherKey="FifthLevelSubdivisionTableID", IsForeignKey=true)]
		public FifthLevelSubdivisionTable FifthLevelSubdivisionTable
		{
			get
			{
				return this._FifthLevelSubdivisionTable.Entity;
			}
			set
			{
				FifthLevelSubdivisionTable previousValue = this._FifthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FifthLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._FifthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_FifthLevelSubdivisionTable = value.FifthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FifthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FifthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_UsersTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_UsersTable", Storage="_FourthLevelSubdivisionTable", ThisKey="FK_FourthLevelSubdivisionTable", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_FourthLevelSubdivisionTable = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FourthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_UsersTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_TypeOfWritingFIO(TypeOfWritingFIO entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_TypeOfWritingFIO(TypeOfWritingFIO entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_UserDataChangeHistory(UserDataChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_UserDataChangeHistory(UserDataChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_Personal_Documents(Personal_Documents entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_Personal_Documents(Personal_Documents entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FifthLevelSubdivisionTable")]
	public partial class FifthLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FifthLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_FourthLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFifthLevelSubdivisionTableIDChanging(int value);
    partial void OnFifthLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_FourthLevelSubdivisionTableChanging(int value);
    partial void OnFK_FourthLevelSubdivisionTableChanged();
    #endregion
		
		public FifthLevelSubdivisionTable()
		{
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FifthLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FifthLevelSubdivisionTableID
		{
			get
			{
				return this._FifthLevelSubdivisionTableID;
			}
			set
			{
				if ((this._FifthLevelSubdivisionTableID != value))
				{
					this.OnFifthLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._FifthLevelSubdivisionTableID = value;
					this.SendPropertyChanged("FifthLevelSubdivisionTableID");
					this.OnFifthLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_FourthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FourthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLevelSubdivisionTable != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FourthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLevelSubdivisionTable");
					this.OnFK_FourthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="FifthLevelSubdivisionTableID", OtherKey="FK_FifthLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_FifthLevelSubdivisionTable", Storage="_FourthLevelSubdivisionTable", ThisKey="FK_FourthLevelSubdivisionTable", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.FifthLevelSubdivisionTable.Remove(this);
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.FifthLevelSubdivisionTable.Add(this);
						this._FK_FourthLevelSubdivisionTable = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FourthLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FirstLevelSubdivisionTable")]
	public partial class FirstLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FirstLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private System.Nullable<int> _FK_ZeroLevelSubvisionTable;
		
		private string _AbbRu;
		
		private EntitySet<StudentsTable> _StudentsTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntitySet<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstLevelSubdivisionTableIDChanging(int value);
    partial void OnFirstLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_ZeroLevelSubvisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ZeroLevelSubvisionTableChanged();
    partial void OnAbbRuChanging(string value);
    partial void OnAbbRuChanged();
    #endregion
		
		public FirstLevelSubdivisionTable()
		{
			this._StudentsTable = new EntitySet<StudentsTable>(new Action<StudentsTable>(this.attach_StudentsTable), new Action<StudentsTable>(this.detach_StudentsTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._SecondLevelSubdivisionTable = new EntitySet<SecondLevelSubdivisionTable>(new Action<SecondLevelSubdivisionTable>(this.attach_SecondLevelSubdivisionTable), new Action<SecondLevelSubdivisionTable>(this.detach_SecondLevelSubdivisionTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FirstLevelSubdivisionTableID
		{
			get
			{
				return this._FirstLevelSubdivisionTableID;
			}
			set
			{
				if ((this._FirstLevelSubdivisionTableID != value))
				{
					this.OnFirstLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._FirstLevelSubdivisionTableID = value;
					this.SendPropertyChanged("FirstLevelSubdivisionTableID");
					this.OnFirstLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ZeroLevelSubvisionTable", DbType="Int")]
		public System.Nullable<int> FK_ZeroLevelSubvisionTable
		{
			get
			{
				return this._FK_ZeroLevelSubvisionTable;
			}
			set
			{
				if ((this._FK_ZeroLevelSubvisionTable != value))
				{
					this.OnFK_ZeroLevelSubvisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ZeroLevelSubvisionTable = value;
					this.SendPropertyChanged("FK_ZeroLevelSubvisionTable");
					this.OnFK_ZeroLevelSubvisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbRu", DbType="VarChar(50)")]
		public string AbbRu
		{
			get
			{
				return this._AbbRu;
			}
			set
			{
				if ((this._AbbRu != value))
				{
					this.OnAbbRuChanging(value);
					this.SendPropertyChanging();
					this._AbbRu = value;
					this.SendPropertyChanged("AbbRu");
					this.OnAbbRuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_StudentsTable", Storage="_StudentsTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivision")]
		public EntitySet<StudentsTable> StudentsTable
		{
			get
			{
				return this._StudentsTable;
			}
			set
			{
				this._StudentsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_SecondLevelSubdivisionTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<SecondLevelSubdivisionTable> SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable;
			}
			set
			{
				this._SecondLevelSubdivisionTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentsTable(StudentsTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_StudentsTable(StudentsTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_SecondLevelSubdivisionTable(SecondLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_SecondLevelSubdivisionTable(SecondLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldOfExpertise")]
	public partial class FieldOfExpertise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldOfExpertiseID;
		
		private bool _Active;
		
		private string _Name;
		
		private EntitySet<SpecializationTable> _SpecializationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldOfExpertiseIDChanging(int value);
    partial void OnFieldOfExpertiseIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FieldOfExpertise()
		{
			this._SpecializationTable = new EntitySet<SpecializationTable>(new Action<SpecializationTable>(this.attach_SpecializationTable), new Action<SpecializationTable>(this.detach_SpecializationTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldOfExpertiseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldOfExpertiseID
		{
			get
			{
				return this._FieldOfExpertiseID;
			}
			set
			{
				if ((this._FieldOfExpertiseID != value))
				{
					this.OnFieldOfExpertiseIDChanging(value);
					this.SendPropertyChanging();
					this._FieldOfExpertiseID = value;
					this.SendPropertyChanged("FieldOfExpertiseID");
					this.OnFieldOfExpertiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldOfExpertise_SpecializationTable", Storage="_SpecializationTable", ThisKey="FieldOfExpertiseID", OtherKey="FK_FieldOfExpertise")]
		public EntitySet<SpecializationTable> SpecializationTable
		{
			get
			{
				return this._SpecializationTable;
			}
			set
			{
				this._SpecializationTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecializationTable(SpecializationTable entity)
		{
			this.SendPropertyChanging();
			entity.FieldOfExpertise = this;
		}
		
		private void detach_SpecializationTable(SpecializationTable entity)
		{
			this.SendPropertyChanging();
			entity.FieldOfExpertise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FourthLevelSubdivisionTable")]
	public partial class FourthLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FourthLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_ThirdLevelSubdivisionTable;
		
		private int _FK_Specialization;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntitySet<FifthLevelSubdivisionTable> _FifthLevelSubdivisionTable;
		
		private EntityRef<SpecializationTable> _SpecializationTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFourthLevelSubdivisionTableIDChanging(int value);
    partial void OnFourthLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(int value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_SpecializationChanging(int value);
    partial void OnFK_SpecializationChanged();
    #endregion
		
		public FourthLevelSubdivisionTable()
		{
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FifthLevelSubdivisionTable = new EntitySet<FifthLevelSubdivisionTable>(new Action<FifthLevelSubdivisionTable>(this.attach_FifthLevelSubdivisionTable), new Action<FifthLevelSubdivisionTable>(this.detach_FifthLevelSubdivisionTable));
			this._SpecializationTable = default(EntityRef<SpecializationTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FourthLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FourthLevelSubdivisionTableID
		{
			get
			{
				return this._FourthLevelSubdivisionTableID;
			}
			set
			{
				if ((this._FourthLevelSubdivisionTableID != value))
				{
					this.OnFourthLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._FourthLevelSubdivisionTableID = value;
					this.SendPropertyChanged("FourthLevelSubdivisionTableID");
					this.OnFourthLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Specialization", DbType="Int NOT NULL")]
		public int FK_Specialization
		{
			get
			{
				return this._FK_Specialization;
			}
			set
			{
				if ((this._FK_Specialization != value))
				{
					if (this._SpecializationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SpecializationChanging(value);
					this.SendPropertyChanging();
					this._FK_Specialization = value;
					this.SendPropertyChanged("FK_Specialization");
					this.OnFK_SpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FK_FourthLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_FifthLevelSubdivisionTable", Storage="_FifthLevelSubdivisionTable", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FK_FourthLevelSubdivisionTable")]
		public EntitySet<FifthLevelSubdivisionTable> FifthLevelSubdivisionTable
		{
			get
			{
				return this._FifthLevelSubdivisionTable;
			}
			set
			{
				this._FifthLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_FourthLevelSubdivisionTable", Storage="_SpecializationTable", ThisKey="FK_Specialization", OtherKey="SpecializationTableID", IsForeignKey=true)]
		public SpecializationTable SpecializationTable
		{
			get
			{
				return this._SpecializationTable.Entity;
			}
			set
			{
				SpecializationTable previousValue = this._SpecializationTable.Entity;
				if (((previousValue != value) 
							|| (this._SpecializationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecializationTable.Entity = null;
						previousValue.FourthLevelSubdivisionTable.Remove(this);
					}
					this._SpecializationTable.Entity = value;
					if ((value != null))
					{
						value.FourthLevelSubdivisionTable.Add(this);
						this._FK_Specialization = value.SpecializationTableID;
					}
					else
					{
						this._FK_Specialization = default(int);
					}
					this.SendPropertyChanged("SpecializationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_FourthLevelSubdivisionTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.FourthLevelSubdivisionTable.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.FourthLevelSubdivisionTable.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = null;
		}
		
		private void attach_FifthLevelSubdivisionTable(FifthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = this;
		}
		
		private void detach_FifthLevelSubdivisionTable(FifthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TasksTable")]
	public partial class TasksTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Task_FileName;
		
		private System.Nullable<int> _FK_Group;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<GroupsTable> _GroupsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnTask_FileNameChanging(string value);
    partial void OnTask_FileNameChanged();
    partial void OnFK_GroupChanging(System.Nullable<int> value);
    partial void OnFK_GroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public TasksTable()
		{
			this._GroupsTable = default(EntityRef<GroupsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Task_FileName", DbType="VarChar(150)")]
		public string Task_FileName
		{
			get
			{
				return this._Task_FileName;
			}
			set
			{
				if ((this._Task_FileName != value))
				{
					this.OnTask_FileNameChanging(value);
					this.SendPropertyChanging();
					this._Task_FileName = value;
					this.SendPropertyChanged("Task_FileName");
					this.OnTask_FileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Group", DbType="Int")]
		public System.Nullable<int> FK_Group
		{
			get
			{
				return this._FK_Group;
			}
			set
			{
				if ((this._FK_Group != value))
				{
					if (this._GroupsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_GroupChanging(value);
					this.SendPropertyChanging();
					this._FK_Group = value;
					this.SendPropertyChanged("FK_Group");
					this.OnFK_GroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupsTable_TasksTable", Storage="_GroupsTable", ThisKey="FK_Group", OtherKey="ID", IsForeignKey=true)]
		public GroupsTable GroupsTable
		{
			get
			{
				return this._GroupsTable.Entity;
			}
			set
			{
				GroupsTable previousValue = this._GroupsTable.Entity;
				if (((previousValue != value) 
							|| (this._GroupsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupsTable.Entity = null;
						previousValue.TasksTable.Remove(this);
					}
					this._GroupsTable.Entity = value;
					if ((value != null))
					{
						value.TasksTable.Add(this);
						this._FK_Group = value.ID;
					}
					else
					{
						this._FK_Group = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManualTable")]
	public partial class ManualTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManualID;
		
		private System.Nullable<bool> _Active;
		
		private string _ManualName;
		
		private string _ManualLink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManualIDChanging(int value);
    partial void OnManualIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnManualNameChanging(string value);
    partial void OnManualNameChanged();
    partial void OnManualLinkChanging(string value);
    partial void OnManualLinkChanged();
    #endregion
		
		public ManualTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ManualID
		{
			get
			{
				return this._ManualID;
			}
			set
			{
				if ((this._ManualID != value))
				{
					this.OnManualIDChanging(value);
					this.SendPropertyChanging();
					this._ManualID = value;
					this.SendPropertyChanged("ManualID");
					this.OnManualIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualName", DbType="VarChar(200)")]
		public string ManualName
		{
			get
			{
				return this._ManualName;
			}
			set
			{
				if ((this._ManualName != value))
				{
					this.OnManualNameChanging(value);
					this.SendPropertyChanging();
					this._ManualName = value;
					this.SendPropertyChanged("ManualName");
					this.OnManualNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualLink", DbType="VarChar(200)")]
		public string ManualLink
		{
			get
			{
				return this._ManualLink;
			}
			set
			{
				if ((this._ManualLink != value))
				{
					this.OnManualLinkChanging(value);
					this.SendPropertyChanging();
					this._ManualLink = value;
					this.SendPropertyChanged("ManualLink");
					this.OnManualLinkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Personal_Documents")]
	public partial class Personal_Documents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Document_Name;
		
		private System.Nullable<int> _FK_Group;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private string _Doc_URL;
		
		private System.Nullable<int> _Doc_Type;
		
		private EntityRef<GroupsTable> _GroupsTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnDocument_NameChanging(string value);
    partial void OnDocument_NameChanged();
    partial void OnFK_GroupChanging(System.Nullable<int> value);
    partial void OnFK_GroupChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    partial void OnDoc_URLChanging(string value);
    partial void OnDoc_URLChanged();
    partial void OnDoc_TypeChanging(System.Nullable<int> value);
    partial void OnDoc_TypeChanged();
    #endregion
		
		public Personal_Documents()
		{
			this._GroupsTable = default(EntityRef<GroupsTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document_Name", DbType="VarChar(50)")]
		public string Document_Name
		{
			get
			{
				return this._Document_Name;
			}
			set
			{
				if ((this._Document_Name != value))
				{
					this.OnDocument_NameChanging(value);
					this.SendPropertyChanging();
					this._Document_Name = value;
					this.SendPropertyChanged("Document_Name");
					this.OnDocument_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Group", DbType="Int")]
		public System.Nullable<int> FK_Group
		{
			get
			{
				return this._FK_Group;
			}
			set
			{
				if ((this._FK_Group != value))
				{
					if (this._GroupsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_GroupChanging(value);
					this.SendPropertyChanging();
					this._FK_Group = value;
					this.SendPropertyChanged("FK_Group");
					this.OnFK_GroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doc_URL", DbType="VarChar(50)")]
		public string Doc_URL
		{
			get
			{
				return this._Doc_URL;
			}
			set
			{
				if ((this._Doc_URL != value))
				{
					this.OnDoc_URLChanging(value);
					this.SendPropertyChanging();
					this._Doc_URL = value;
					this.SendPropertyChanged("Doc_URL");
					this.OnDoc_URLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doc_Type", DbType="Int")]
		public System.Nullable<int> Doc_Type
		{
			get
			{
				return this._Doc_Type;
			}
			set
			{
				if ((this._Doc_Type != value))
				{
					this.OnDoc_TypeChanging(value);
					this.SendPropertyChanging();
					this._Doc_Type = value;
					this.SendPropertyChanged("Doc_Type");
					this.OnDoc_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupsTable_Personal_Documents", Storage="_GroupsTable", ThisKey="FK_Group", OtherKey="ID", IsForeignKey=true)]
		public GroupsTable GroupsTable
		{
			get
			{
				return this._GroupsTable.Entity;
			}
			set
			{
				GroupsTable previousValue = this._GroupsTable.Entity;
				if (((previousValue != value) 
							|| (this._GroupsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupsTable.Entity = null;
						previousValue.Personal_Documents.Remove(this);
					}
					this._GroupsTable.Entity = value;
					if ((value != null))
					{
						value.Personal_Documents.Add(this);
						this._FK_Group = value.ID;
					}
					else
					{
						this._FK_Group = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_Personal_Documents", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.Personal_Documents.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.Personal_Documents.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecondLevelSubdivisionTable")]
	public partial class SecondLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SecondLevelSubdivisionTableID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private int _FK_FirstLevelSubdivisionTable;
		
		private EntitySet<GroupsTable> _GroupsTable;
		
		private EntitySet<StudentsTable> _StudentsTable;
		
		private EntitySet<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecondLevelSubdivisionTableIDChanging(int value);
    partial void OnSecondLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(int value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    #endregion
		
		public SecondLevelSubdivisionTable()
		{
			this._GroupsTable = new EntitySet<GroupsTable>(new Action<GroupsTable>(this.attach_GroupsTable), new Action<GroupsTable>(this.detach_GroupsTable));
			this._StudentsTable = new EntitySet<StudentsTable>(new Action<StudentsTable>(this.attach_StudentsTable), new Action<StudentsTable>(this.detach_StudentsTable));
			this._ThirdLevelSubdivisionTable = new EntitySet<ThirdLevelSubdivisionTable>(new Action<ThirdLevelSubdivisionTable>(this.attach_ThirdLevelSubdivisionTable), new Action<ThirdLevelSubdivisionTable>(this.detach_ThirdLevelSubdivisionTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SecondLevelSubdivisionTableID
		{
			get
			{
				return this._SecondLevelSubdivisionTableID;
			}
			set
			{
				if ((this._SecondLevelSubdivisionTableID != value))
				{
					this.OnSecondLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._SecondLevelSubdivisionTableID = value;
					this.SendPropertyChanged("SecondLevelSubdivisionTableID");
					this.OnSecondLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_GroupsTable", Storage="_GroupsTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevel")]
		public EntitySet<GroupsTable> GroupsTable
		{
			get
			{
				return this._GroupsTable;
			}
			set
			{
				this._GroupsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_StudentsTable", Storage="_StudentsTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivision")]
		public EntitySet<StudentsTable> StudentsTable
		{
			get
			{
				return this._StudentsTable;
			}
			set
			{
				this._StudentsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ThirdLevelSubdivisionTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<ThirdLevelSubdivisionTable> ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable;
			}
			set
			{
				this._ThirdLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_SecondLevelSubdivisionTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.SecondLevelSubdivisionTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.SecondLevelSubdivisionTable.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupsTable(GroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_GroupsTable(GroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_StudentsTable(StudentsTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_StudentsTable(StudentsTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_ThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_ThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
	}
}
#pragma warning restore 1591
