#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Competition
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Konkursy")]
	public partial class CompetitionDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertAnswers(Answers instance);
    partial void UpdateAnswers(Answers instance);
    partial void DeleteAnswers(Answers instance);
    partial void InsertAutoFilling(AutoFilling instance);
    partial void UpdateAutoFilling(AutoFilling instance);
    partial void DeleteAutoFilling(AutoFilling instance);
    partial void InsertBids(Bids instance);
    partial void UpdateBids(Bids instance);
    partial void DeleteBids(Bids instance);
    partial void InsertCalendarPlan(CalendarPlan instance);
    partial void UpdateCalendarPlan(CalendarPlan instance);
    partial void DeleteCalendarPlan(CalendarPlan instance);
    partial void InsertIndicators(Indicators instance);
    partial void UpdateIndicators(Indicators instance);
    partial void DeleteIndicators(Indicators instance);
    partial void InsertKonkurs_QuestionMapingTable(Konkurs_QuestionMapingTable instance);
    partial void UpdateKonkurs_QuestionMapingTable(Konkurs_QuestionMapingTable instance);
    partial void DeleteKonkurs_QuestionMapingTable(Konkurs_QuestionMapingTable instance);
    partial void InsertKonkurs_TargetMapingTable(Konkurs_TargetMapingTable instance);
    partial void UpdateKonkurs_TargetMapingTable(Konkurs_TargetMapingTable instance);
    partial void DeleteKonkurs_TargetMapingTable(Konkurs_TargetMapingTable instance);
    partial void InsertKonkursy(Konkursy instance);
    partial void UpdateKonkursy(Konkursy instance);
    partial void DeleteKonkursy(Konkursy instance);
    partial void InsertPartners(Partners instance);
    partial void UpdatePartners(Partners instance);
    partial void DeletePartners(Partners instance);
    partial void InsertPurchasePlan(PurchasePlan instance);
    partial void UpdatePurchasePlan(PurchasePlan instance);
    partial void DeletePurchasePlan(PurchasePlan instance);
    partial void InsertQuestion_AnswerMapingTable(Question_AnswerMapingTable instance);
    partial void UpdateQuestion_AnswerMapingTable(Question_AnswerMapingTable instance);
    partial void DeleteQuestion_AnswerMapingTable(Question_AnswerMapingTable instance);
    partial void InsertQuestions(Questions instance);
    partial void UpdateQuestions(Questions instance);
    partial void DeleteQuestions(Questions instance);
    partial void InsertReports(Reports instance);
    partial void UpdateReports(Reports instance);
    partial void DeleteReports(Reports instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertRisks(Risks instance);
    partial void UpdateRisks(Risks instance);
    partial void DeleteRisks(Risks instance);
    partial void InsertSmeta(Smeta instance);
    partial void UpdateSmeta(Smeta instance);
    partial void DeleteSmeta(Smeta instance);
    partial void InsertSmetaValue(SmetaValue instance);
    partial void UpdateSmetaValue(SmetaValue instance);
    partial void DeleteSmetaValue(SmetaValue instance);
    partial void InsertSpecialPart(SpecialPart instance);
    partial void UpdateSpecialPart(SpecialPart instance);
    partial void DeleteSpecialPart(SpecialPart instance);
    partial void InsertTargetIndicators(TargetIndicators instance);
    partial void UpdateTargetIndicators(TargetIndicators instance);
    partial void DeleteTargetIndicators(TargetIndicators instance);
    partial void InsertTargetIndicatorValue(TargetIndicatorValue instance);
    partial void UpdateTargetIndicatorValue(TargetIndicatorValue instance);
    partial void DeleteTargetIndicatorValue(TargetIndicatorValue instance);
    partial void InsertTaskResult(TaskResult instance);
    partial void UpdateTaskResult(TaskResult instance);
    partial void DeleteTaskResult(TaskResult instance);
    partial void InsertTitleInfo(TitleInfo instance);
    partial void UpdateTitleInfo(TitleInfo instance);
    partial void DeleteTitleInfo(TitleInfo instance);
    partial void InsertUser_BidMapingTable(User_BidMapingTable instance);
    partial void UpdateUser_BidMapingTable(User_BidMapingTable instance);
    partial void DeleteUser_BidMapingTable(User_BidMapingTable instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public CompetitionDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["KonkursyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activity
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<Answers> Answers
		{
			get
			{
				return this.GetTable<Answers>();
			}
		}
		
		public System.Data.Linq.Table<AutoFilling> AutoFilling
		{
			get
			{
				return this.GetTable<AutoFilling>();
			}
		}
		
		public System.Data.Linq.Table<Bids> Bids
		{
			get
			{
				return this.GetTable<Bids>();
			}
		}
		
		public System.Data.Linq.Table<CalendarPlan> CalendarPlan
		{
			get
			{
				return this.GetTable<CalendarPlan>();
			}
		}
		
		public System.Data.Linq.Table<Indicators> Indicators
		{
			get
			{
				return this.GetTable<Indicators>();
			}
		}
		
		public System.Data.Linq.Table<Konkurs_QuestionMapingTable> Konkurs_QuestionMapingTable
		{
			get
			{
				return this.GetTable<Konkurs_QuestionMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Konkurs_TargetMapingTable> Konkurs_TargetMapingTable
		{
			get
			{
				return this.GetTable<Konkurs_TargetMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Konkursy> Konkursy
		{
			get
			{
				return this.GetTable<Konkursy>();
			}
		}
		
		public System.Data.Linq.Table<Partners> Partners
		{
			get
			{
				return this.GetTable<Partners>();
			}
		}
		
		public System.Data.Linq.Table<PurchasePlan> PurchasePlan
		{
			get
			{
				return this.GetTable<PurchasePlan>();
			}
		}
		
		public System.Data.Linq.Table<Question_AnswerMapingTable> Question_AnswerMapingTable
		{
			get
			{
				return this.GetTable<Question_AnswerMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Questions> Questions
		{
			get
			{
				return this.GetTable<Questions>();
			}
		}
		
		public System.Data.Linq.Table<Reports> Reports
		{
			get
			{
				return this.GetTable<Reports>();
			}
		}
		
		public System.Data.Linq.Table<Result> Result
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<ResultComent> ResultComent
		{
			get
			{
				return this.GetTable<ResultComent>();
			}
		}
		
		public System.Data.Linq.Table<Risks> Risks
		{
			get
			{
				return this.GetTable<Risks>();
			}
		}
		
		public System.Data.Linq.Table<Smeta> Smeta
		{
			get
			{
				return this.GetTable<Smeta>();
			}
		}
		
		public System.Data.Linq.Table<SmetaValue> SmetaValue
		{
			get
			{
				return this.GetTable<SmetaValue>();
			}
		}
		
		public System.Data.Linq.Table<SpecialPart> SpecialPart
		{
			get
			{
				return this.GetTable<SpecialPart>();
			}
		}
		
		public System.Data.Linq.Table<TargetIndicators> TargetIndicators
		{
			get
			{
				return this.GetTable<TargetIndicators>();
			}
		}
		
		public System.Data.Linq.Table<TargetIndicatorValue> TargetIndicatorValue
		{
			get
			{
				return this.GetTable<TargetIndicatorValue>();
			}
		}
		
		public System.Data.Linq.Table<TaskResult> TaskResult
		{
			get
			{
				return this.GetTable<TaskResult>();
			}
		}
		
		public System.Data.Linq.Table<TitleInfo> TitleInfo
		{
			get
			{
				return this.GetTable<TitleInfo>();
			}
		}
		
		public System.Data.Linq.Table<User_BidMapingTable> User_BidMapingTable
		{
			get
			{
				return this.GetTable<User_BidMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Activity;
		
		private string _Activity1;
		
		private System.Nullable<System.DateTime> _PlanDateNull;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Bid;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ActivityChanging(int value);
    partial void OnID_ActivityChanged();
    partial void OnActivity1Changing(string value);
    partial void OnActivity1Changed();
    partial void OnPlanDateNullChanging(System.Nullable<System.DateTime> value);
    partial void OnPlanDateNullChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    #endregion
		
		public Activity()
		{
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Activity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Activity
		{
			get
			{
				return this._ID_Activity;
			}
			set
			{
				if ((this._ID_Activity != value))
				{
					this.OnID_ActivityChanging(value);
					this.SendPropertyChanging();
					this._ID_Activity = value;
					this.SendPropertyChanged("ID_Activity");
					this.OnID_ActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Activity", Storage="_Activity1", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Activity1
		{
			get
			{
				return this._Activity1;
			}
			set
			{
				if ((this._Activity1 != value))
				{
					this.OnActivity1Changing(value);
					this.SendPropertyChanging();
					this._Activity1 = value;
					this.SendPropertyChanged("Activity1");
					this.OnActivity1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanDateNull", DbType="Date")]
		public System.Nullable<System.DateTime> PlanDateNull
		{
			get
			{
				return this._PlanDateNull;
			}
			set
			{
				if ((this._PlanDateNull != value))
				{
					this.OnPlanDateNullChanging(value);
					this.SendPropertyChanging();
					this._PlanDateNull = value;
					this.SendPropertyChanged("PlanDateNull");
					this.OnPlanDateNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Activity", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Activity.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Activity.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answers")]
	public partial class Answers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Answer;
		
		private string _Answer;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Bid;
		
		private EntitySet<Question_AnswerMapingTable> _Question_AnswerMapingTable;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AnswerChanging(int value);
    partial void OnID_AnswerChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    #endregion
		
		public Answers()
		{
			this._Question_AnswerMapingTable = new EntitySet<Question_AnswerMapingTable>(new Action<Question_AnswerMapingTable>(this.attach_Question_AnswerMapingTable), new Action<Question_AnswerMapingTable>(this.detach_Question_AnswerMapingTable));
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Answer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Answer
		{
			get
			{
				return this._ID_Answer;
			}
			set
			{
				if ((this._ID_Answer != value))
				{
					this.OnID_AnswerChanging(value);
					this.SendPropertyChanging();
					this._ID_Answer = value;
					this.SendPropertyChanged("ID_Answer");
					this.OnID_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answers_Question_AnswerMapingTable", Storage="_Question_AnswerMapingTable", ThisKey="ID_Answer", OtherKey="FK_Answer")]
		public EntitySet<Question_AnswerMapingTable> Question_AnswerMapingTable
		{
			get
			{
				return this._Question_AnswerMapingTable;
			}
			set
			{
				this._Question_AnswerMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Answers", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Question_AnswerMapingTable(Question_AnswerMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Answers = this;
		}
		
		private void detach_Question_AnswerMapingTable(Question_AnswerMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Answers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AutoFilling")]
	public partial class AutoFilling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Doc;
		
		private System.Nullable<int> _FK_Konkurs;
		
		private string _Name;
		
		private System.Nullable<int> _Page;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Konkursy> _Konkursy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_DocChanging(int value);
    partial void OnID_DocChanged();
    partial void OnFK_KonkursChanging(System.Nullable<int> value);
    partial void OnFK_KonkursChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPageChanging(System.Nullable<int> value);
    partial void OnPageChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public AutoFilling()
		{
			this._Konkursy = default(EntityRef<Konkursy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Doc", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Doc
		{
			get
			{
				return this._ID_Doc;
			}
			set
			{
				if ((this._ID_Doc != value))
				{
					this.OnID_DocChanging(value);
					this.SendPropertyChanging();
					this._ID_Doc = value;
					this.SendPropertyChanged("ID_Doc");
					this.OnID_DocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int")]
		public System.Nullable<int> FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Page", DbType="Int")]
		public System.Nullable<int> Page
		{
			get
			{
				return this._Page;
			}
			set
			{
				if ((this._Page != value))
				{
					this.OnPageChanging(value);
					this.SendPropertyChanging();
					this._Page = value;
					this.SendPropertyChanged("Page");
					this.OnPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_AutoFilling", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.AutoFilling.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.AutoFilling.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bids")]
	public partial class Bids : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Bid;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Expert;
		
		private string _BidName;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _FK_Konkurs;
		
		private string _Status;
		
		private string _Coment;
		
		private EntitySet<Activity> _Activity;
		
		private EntitySet<Answers> _Answers;
		
		private EntitySet<CalendarPlan> _CalendarPlan;
		
		private EntitySet<Indicators> _Indicators;
		
		private EntitySet<Partners> _Partners;
		
		private EntitySet<PurchasePlan> _PurchasePlan;
		
		private EntitySet<Reports> _Reports;
		
		private EntitySet<Result> _Result;
		
		private EntitySet<Risks> _Risks;
		
		private EntitySet<SmetaValue> _SmetaValue;
		
		private EntitySet<TargetIndicatorValue> _TargetIndicatorValue;
		
		private EntitySet<TaskResult> _TaskResult;
		
		private EntitySet<TitleInfo> _TitleInfo;
		
		private EntitySet<User_BidMapingTable> _User_BidMapingTable;
		
		private EntityRef<Konkursy> _Konkursy;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_BidChanging(int value);
    partial void OnID_BidChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ExpertChanging(System.Nullable<int> value);
    partial void OnFK_ExpertChanged();
    partial void OnBidNameChanging(string value);
    partial void OnBidNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnFK_KonkursChanging(System.Nullable<int> value);
    partial void OnFK_KonkursChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnComentChanging(string value);
    partial void OnComentChanged();
    #endregion
		
		public Bids()
		{
			this._Activity = new EntitySet<Activity>(new Action<Activity>(this.attach_Activity), new Action<Activity>(this.detach_Activity));
			this._Answers = new EntitySet<Answers>(new Action<Answers>(this.attach_Answers), new Action<Answers>(this.detach_Answers));
			this._CalendarPlan = new EntitySet<CalendarPlan>(new Action<CalendarPlan>(this.attach_CalendarPlan), new Action<CalendarPlan>(this.detach_CalendarPlan));
			this._Indicators = new EntitySet<Indicators>(new Action<Indicators>(this.attach_Indicators), new Action<Indicators>(this.detach_Indicators));
			this._Partners = new EntitySet<Partners>(new Action<Partners>(this.attach_Partners), new Action<Partners>(this.detach_Partners));
			this._PurchasePlan = new EntitySet<PurchasePlan>(new Action<PurchasePlan>(this.attach_PurchasePlan), new Action<PurchasePlan>(this.detach_PurchasePlan));
			this._Reports = new EntitySet<Reports>(new Action<Reports>(this.attach_Reports), new Action<Reports>(this.detach_Reports));
			this._Result = new EntitySet<Result>(new Action<Result>(this.attach_Result), new Action<Result>(this.detach_Result));
			this._Risks = new EntitySet<Risks>(new Action<Risks>(this.attach_Risks), new Action<Risks>(this.detach_Risks));
			this._SmetaValue = new EntitySet<SmetaValue>(new Action<SmetaValue>(this.attach_SmetaValue), new Action<SmetaValue>(this.detach_SmetaValue));
			this._TargetIndicatorValue = new EntitySet<TargetIndicatorValue>(new Action<TargetIndicatorValue>(this.attach_TargetIndicatorValue), new Action<TargetIndicatorValue>(this.detach_TargetIndicatorValue));
			this._TaskResult = new EntitySet<TaskResult>(new Action<TaskResult>(this.attach_TaskResult), new Action<TaskResult>(this.detach_TaskResult));
			this._TitleInfo = new EntitySet<TitleInfo>(new Action<TitleInfo>(this.attach_TitleInfo), new Action<TitleInfo>(this.detach_TitleInfo));
			this._User_BidMapingTable = new EntitySet<User_BidMapingTable>(new Action<User_BidMapingTable>(this.attach_User_BidMapingTable), new Action<User_BidMapingTable>(this.detach_User_BidMapingTable));
			this._Konkursy = default(EntityRef<Konkursy>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Bid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Bid
		{
			get
			{
				return this._ID_Bid;
			}
			set
			{
				if ((this._ID_Bid != value))
				{
					this.OnID_BidChanging(value);
					this.SendPropertyChanging();
					this._ID_Bid = value;
					this.SendPropertyChanged("ID_Bid");
					this.OnID_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Expert", DbType="Int")]
		public System.Nullable<int> FK_Expert
		{
			get
			{
				return this._FK_Expert;
			}
			set
			{
				if ((this._FK_Expert != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ExpertChanging(value);
					this.SendPropertyChanging();
					this._FK_Expert = value;
					this.SendPropertyChanged("FK_Expert");
					this.OnFK_ExpertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidName", DbType="VarChar(MAX)")]
		public string BidName
		{
			get
			{
				return this._BidName;
			}
			set
			{
				if ((this._BidName != value))
				{
					this.OnBidNameChanging(value);
					this.SendPropertyChanging();
					this._BidName = value;
					this.SendPropertyChanged("BidName");
					this.OnBidNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int")]
		public System.Nullable<int> FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(MAX)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coment", DbType="VarChar(MAX)")]
		public string Coment
		{
			get
			{
				return this._Coment;
			}
			set
			{
				if ((this._Coment != value))
				{
					this.OnComentChanging(value);
					this.SendPropertyChanging();
					this._Coment = value;
					this.SendPropertyChanged("Coment");
					this.OnComentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Activity", Storage="_Activity", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Activity> Activity
		{
			get
			{
				return this._Activity;
			}
			set
			{
				this._Activity.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Answers", Storage="_Answers", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Answers> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_CalendarPlan", Storage="_CalendarPlan", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<CalendarPlan> CalendarPlan
		{
			get
			{
				return this._CalendarPlan;
			}
			set
			{
				this._CalendarPlan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Indicators", Storage="_Indicators", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Indicators> Indicators
		{
			get
			{
				return this._Indicators;
			}
			set
			{
				this._Indicators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Partners", Storage="_Partners", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Partners> Partners
		{
			get
			{
				return this._Partners;
			}
			set
			{
				this._Partners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_PurchasePlan", Storage="_PurchasePlan", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<PurchasePlan> PurchasePlan
		{
			get
			{
				return this._PurchasePlan;
			}
			set
			{
				this._PurchasePlan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Reports", Storage="_Reports", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Reports> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Result", Storage="_Result", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Result> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				this._Result.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Risks", Storage="_Risks", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Risks> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_SmetaValue", Storage="_SmetaValue", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<SmetaValue> SmetaValue
		{
			get
			{
				return this._SmetaValue;
			}
			set
			{
				this._SmetaValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_TargetIndicatorValue", Storage="_TargetIndicatorValue", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<TargetIndicatorValue> TargetIndicatorValue
		{
			get
			{
				return this._TargetIndicatorValue;
			}
			set
			{
				this._TargetIndicatorValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_TaskResult", Storage="_TaskResult", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<TaskResult> TaskResult
		{
			get
			{
				return this._TaskResult;
			}
			set
			{
				this._TaskResult.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_TitleInfo", Storage="_TitleInfo", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<TitleInfo> TitleInfo
		{
			get
			{
				return this._TitleInfo;
			}
			set
			{
				this._TitleInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_User_BidMapingTable", Storage="_User_BidMapingTable", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<User_BidMapingTable> User_BidMapingTable
		{
			get
			{
				return this._User_BidMapingTable;
			}
			set
			{
				this._User_BidMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Bids", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bids", Storage="_Users", ThisKey="FK_Expert", OtherKey="ID_User", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._FK_Expert = value.ID_User;
					}
					else
					{
						this._FK_Expert = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activity(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Activity(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_Answers(Answers entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Answers(Answers entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_CalendarPlan(CalendarPlan entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_CalendarPlan(CalendarPlan entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_Indicators(Indicators entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Indicators(Indicators entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_Partners(Partners entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Partners(Partners entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_PurchasePlan(PurchasePlan entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_PurchasePlan(PurchasePlan entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_Reports(Reports entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Reports(Reports entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_Result(Result entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Result(Result entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_Risks(Risks entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Risks(Risks entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_TargetIndicatorValue(TargetIndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_TargetIndicatorValue(TargetIndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_TaskResult(TaskResult entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_TaskResult(TaskResult entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_TitleInfo(TitleInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_TitleInfo(TitleInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CalendarPlan")]
	public partial class CalendarPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Event;
		
		private string _Event;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<int> _Period;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<double> _Cost1000;
		
		private string _SourceNull;
		
		private string _TimeNull;
		
		private EntitySet<PurchasePlan> _PurchasePlan;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_EventChanging(int value);
    partial void OnID_EventChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnPeriodChanging(System.Nullable<int> value);
    partial void OnPeriodChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCost1000Changing(System.Nullable<double> value);
    partial void OnCost1000Changed();
    partial void OnSourceNullChanging(string value);
    partial void OnSourceNullChanged();
    partial void OnTimeNullChanging(string value);
    partial void OnTimeNullChanged();
    #endregion
		
		public CalendarPlan()
		{
			this._PurchasePlan = new EntitySet<PurchasePlan>(new Action<PurchasePlan>(this.attach_PurchasePlan), new Action<PurchasePlan>(this.detach_PurchasePlan));
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Event", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Event
		{
			get
			{
				return this._ID_Event;
			}
			set
			{
				if ((this._ID_Event != value))
				{
					this.OnID_EventChanging(value);
					this.SendPropertyChanging();
					this._ID_Event = value;
					this.SendPropertyChanged("ID_Event");
					this.OnID_EventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="VarChar(MAX)")]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="Int")]
		public System.Nullable<int> Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost1000", DbType="Float")]
		public System.Nullable<double> Cost1000
		{
			get
			{
				return this._Cost1000;
			}
			set
			{
				if ((this._Cost1000 != value))
				{
					this.OnCost1000Changing(value);
					this.SendPropertyChanging();
					this._Cost1000 = value;
					this.SendPropertyChanged("Cost1000");
					this.OnCost1000Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceNull", DbType="VarChar(50)")]
		public string SourceNull
		{
			get
			{
				return this._SourceNull;
			}
			set
			{
				if ((this._SourceNull != value))
				{
					this.OnSourceNullChanging(value);
					this.SendPropertyChanging();
					this._SourceNull = value;
					this.SendPropertyChanged("SourceNull");
					this.OnSourceNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeNull", DbType="VarChar(50)")]
		public string TimeNull
		{
			get
			{
				return this._TimeNull;
			}
			set
			{
				if ((this._TimeNull != value))
				{
					this.OnTimeNullChanging(value);
					this.SendPropertyChanging();
					this._TimeNull = value;
					this.SendPropertyChanged("TimeNull");
					this.OnTimeNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalendarPlan_PurchasePlan", Storage="_PurchasePlan", ThisKey="ID_Event", OtherKey="FK_Event")]
		public EntitySet<PurchasePlan> PurchasePlan
		{
			get
			{
				return this._PurchasePlan;
			}
			set
			{
				this._PurchasePlan.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_CalendarPlan", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.CalendarPlan.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.CalendarPlan.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchasePlan(PurchasePlan entity)
		{
			this.SendPropertyChanging();
			entity.CalendarPlan = this;
		}
		
		private void detach_PurchasePlan(PurchasePlan entity)
		{
			this.SendPropertyChanging();
			entity.CalendarPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Indicators")]
	public partial class Indicators : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Indicator;
		
		private System.Nullable<int> _FK_Bid;
		
		private string _Indicator;
		
		private System.Nullable<System.DateTime> _PlanDate;
		
		private string _Unit;
		
		private System.Nullable<double> _Value;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_IndicatorChanging(int value);
    partial void OnID_IndicatorChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnIndicatorChanging(string value);
    partial void OnIndicatorChanged();
    partial void OnPlanDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlanDateChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Indicators()
		{
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Indicator", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Indicator
		{
			get
			{
				return this._ID_Indicator;
			}
			set
			{
				if ((this._ID_Indicator != value))
				{
					this.OnID_IndicatorChanging(value);
					this.SendPropertyChanging();
					this._ID_Indicator = value;
					this.SendPropertyChanged("ID_Indicator");
					this.OnID_IndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Indicator", DbType="VarChar(MAX)")]
		public string Indicator
		{
			get
			{
				return this._Indicator;
			}
			set
			{
				if ((this._Indicator != value))
				{
					this.OnIndicatorChanging(value);
					this.SendPropertyChanging();
					this._Indicator = value;
					this.SendPropertyChanged("Indicator");
					this.OnIndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanDate", DbType="Date")]
		public System.Nullable<System.DateTime> PlanDate
		{
			get
			{
				return this._PlanDate;
			}
			set
			{
				if ((this._PlanDate != value))
				{
					this.OnPlanDateChanging(value);
					this.SendPropertyChanging();
					this._PlanDate = value;
					this.SendPropertyChanged("PlanDate");
					this.OnPlanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Indicators", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Indicators.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Indicators.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Konkurs-QuestionMapingTable]")]
	public partial class Konkurs_QuestionMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_KonkursQuestion;
		
		private System.Nullable<int> _FK_Konkurs;
		
		private System.Nullable<int> _FK_Question;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Konkursy> _Konkursy;
		
		private EntityRef<Questions> _Questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_KonkursQuestionChanging(int value);
    partial void OnID_KonkursQuestionChanged();
    partial void OnFK_KonkursChanging(System.Nullable<int> value);
    partial void OnFK_KonkursChanged();
    partial void OnFK_QuestionChanging(System.Nullable<int> value);
    partial void OnFK_QuestionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Konkurs_QuestionMapingTable()
		{
			this._Konkursy = default(EntityRef<Konkursy>);
			this._Questions = default(EntityRef<Questions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_KonkursQuestion", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_KonkursQuestion
		{
			get
			{
				return this._ID_KonkursQuestion;
			}
			set
			{
				if ((this._ID_KonkursQuestion != value))
				{
					this.OnID_KonkursQuestionChanging(value);
					this.SendPropertyChanging();
					this._ID_KonkursQuestion = value;
					this.SendPropertyChanged("ID_KonkursQuestion");
					this.OnID_KonkursQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int")]
		public System.Nullable<int> FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Question", DbType="Int")]
		public System.Nullable<int> FK_Question
		{
			get
			{
				return this._FK_Question;
			}
			set
			{
				if ((this._FK_Question != value))
				{
					if (this._Questions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuestionChanging(value);
					this.SendPropertyChanging();
					this._FK_Question = value;
					this.SendPropertyChanged("FK_Question");
					this.OnFK_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Konkurs_QuestionMapingTable", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.Konkurs_QuestionMapingTable.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.Konkurs_QuestionMapingTable.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Konkurs_QuestionMapingTable", Storage="_Questions", ThisKey="FK_Question", OtherKey="ID_Question", IsForeignKey=true)]
		public Questions Questions
		{
			get
			{
				return this._Questions.Entity;
			}
			set
			{
				Questions previousValue = this._Questions.Entity;
				if (((previousValue != value) 
							|| (this._Questions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questions.Entity = null;
						previousValue.Konkurs_QuestionMapingTable.Remove(this);
					}
					this._Questions.Entity = value;
					if ((value != null))
					{
						value.Konkurs_QuestionMapingTable.Add(this);
						this._FK_Question = value.ID_Question;
					}
					else
					{
						this._FK_Question = default(Nullable<int>);
					}
					this.SendPropertyChanged("Questions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Konkurs-TargetMapingTable]")]
	public partial class Konkurs_TargetMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_KonkursTarget;
		
		private System.Nullable<int> _FK_Konkurs;
		
		private System.Nullable<int> _FK_Target;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Konkursy> _Konkursy;
		
		private EntityRef<TargetIndicators> _TargetIndicators;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_KonkursTargetChanging(int value);
    partial void OnID_KonkursTargetChanged();
    partial void OnFK_KonkursChanging(System.Nullable<int> value);
    partial void OnFK_KonkursChanged();
    partial void OnFK_TargetChanging(System.Nullable<int> value);
    partial void OnFK_TargetChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Konkurs_TargetMapingTable()
		{
			this._Konkursy = default(EntityRef<Konkursy>);
			this._TargetIndicators = default(EntityRef<TargetIndicators>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_KonkursTarget", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_KonkursTarget
		{
			get
			{
				return this._ID_KonkursTarget;
			}
			set
			{
				if ((this._ID_KonkursTarget != value))
				{
					this.OnID_KonkursTargetChanging(value);
					this.SendPropertyChanging();
					this._ID_KonkursTarget = value;
					this.SendPropertyChanged("ID_KonkursTarget");
					this.OnID_KonkursTargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int")]
		public System.Nullable<int> FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Target", DbType="Int")]
		public System.Nullable<int> FK_Target
		{
			get
			{
				return this._FK_Target;
			}
			set
			{
				if ((this._FK_Target != value))
				{
					if (this._TargetIndicators.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_TargetChanging(value);
					this.SendPropertyChanging();
					this._FK_Target = value;
					this.SendPropertyChanged("FK_Target");
					this.OnFK_TargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Konkurs_TargetMapingTable", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.Konkurs_TargetMapingTable.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.Konkurs_TargetMapingTable.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TargetIndicators_Konkurs_TargetMapingTable", Storage="_TargetIndicators", ThisKey="FK_Target", OtherKey="ID_TargetIndicator", IsForeignKey=true)]
		public TargetIndicators TargetIndicators
		{
			get
			{
				return this._TargetIndicators.Entity;
			}
			set
			{
				TargetIndicators previousValue = this._TargetIndicators.Entity;
				if (((previousValue != value) 
							|| (this._TargetIndicators.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetIndicators.Entity = null;
						previousValue.Konkurs_TargetMapingTable.Remove(this);
					}
					this._TargetIndicators.Entity = value;
					if ((value != null))
					{
						value.Konkurs_TargetMapingTable.Add(this);
						this._FK_Target = value.ID_TargetIndicator;
					}
					else
					{
						this._FK_Target = default(Nullable<int>);
					}
					this.SendPropertyChanged("TargetIndicators");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Konkursy")]
	public partial class Konkursy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Konkurs;
		
		private string _Number;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _FK_Curator;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<AutoFilling> _AutoFilling;
		
		private EntitySet<Bids> _Bids;
		
		private EntitySet<Konkurs_QuestionMapingTable> _Konkurs_QuestionMapingTable;
		
		private EntitySet<Konkurs_TargetMapingTable> _Konkurs_TargetMapingTable;
		
		private EntitySet<Smeta> _Smeta;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_KonkursChanging(int value);
    partial void OnID_KonkursChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnFK_CuratorChanging(System.Nullable<int> value);
    partial void OnFK_CuratorChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Konkursy()
		{
			this._AutoFilling = new EntitySet<AutoFilling>(new Action<AutoFilling>(this.attach_AutoFilling), new Action<AutoFilling>(this.detach_AutoFilling));
			this._Bids = new EntitySet<Bids>(new Action<Bids>(this.attach_Bids), new Action<Bids>(this.detach_Bids));
			this._Konkurs_QuestionMapingTable = new EntitySet<Konkurs_QuestionMapingTable>(new Action<Konkurs_QuestionMapingTable>(this.attach_Konkurs_QuestionMapingTable), new Action<Konkurs_QuestionMapingTable>(this.detach_Konkurs_QuestionMapingTable));
			this._Konkurs_TargetMapingTable = new EntitySet<Konkurs_TargetMapingTable>(new Action<Konkurs_TargetMapingTable>(this.attach_Konkurs_TargetMapingTable), new Action<Konkurs_TargetMapingTable>(this.detach_Konkurs_TargetMapingTable));
			this._Smeta = new EntitySet<Smeta>(new Action<Smeta>(this.attach_Smeta), new Action<Smeta>(this.detach_Smeta));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Konkurs", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Konkurs
		{
			get
			{
				return this._ID_Konkurs;
			}
			set
			{
				if ((this._ID_Konkurs != value))
				{
					this.OnID_KonkursChanging(value);
					this.SendPropertyChanging();
					this._ID_Konkurs = value;
					this.SendPropertyChanged("ID_Konkurs");
					this.OnID_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="VarChar(MAX)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Curator", DbType="Int")]
		public System.Nullable<int> FK_Curator
		{
			get
			{
				return this._FK_Curator;
			}
			set
			{
				if ((this._FK_Curator != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CuratorChanging(value);
					this.SendPropertyChanging();
					this._FK_Curator = value;
					this.SendPropertyChanged("FK_Curator");
					this.OnFK_CuratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_AutoFilling", Storage="_AutoFilling", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<AutoFilling> AutoFilling
		{
			get
			{
				return this._AutoFilling;
			}
			set
			{
				this._AutoFilling.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Bids", Storage="_Bids", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<Bids> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Konkurs_QuestionMapingTable", Storage="_Konkurs_QuestionMapingTable", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<Konkurs_QuestionMapingTable> Konkurs_QuestionMapingTable
		{
			get
			{
				return this._Konkurs_QuestionMapingTable;
			}
			set
			{
				this._Konkurs_QuestionMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Konkurs_TargetMapingTable", Storage="_Konkurs_TargetMapingTable", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<Konkurs_TargetMapingTable> Konkurs_TargetMapingTable
		{
			get
			{
				return this._Konkurs_TargetMapingTable;
			}
			set
			{
				this._Konkurs_TargetMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Smeta", Storage="_Smeta", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<Smeta> Smeta
		{
			get
			{
				return this._Smeta;
			}
			set
			{
				this._Smeta.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Konkursy", Storage="_Users", ThisKey="FK_Curator", OtherKey="ID_User", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Konkursy.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Konkursy.Add(this);
						this._FK_Curator = value.ID_User;
					}
					else
					{
						this._FK_Curator = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AutoFilling(AutoFilling entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_AutoFilling(AutoFilling entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
		
		private void attach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
		
		private void attach_Konkurs_QuestionMapingTable(Konkurs_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_Konkurs_QuestionMapingTable(Konkurs_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
		
		private void attach_Konkurs_TargetMapingTable(Konkurs_TargetMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_Konkurs_TargetMapingTable(Konkurs_TargetMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
		
		private void attach_Smeta(Smeta entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_Smeta(Smeta entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Partners")]
	public partial class Partners : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Partner;
		
		private string _PartnerName;
		
		private System.Nullable<int> _FK_Bid;
		
		private string _Functions;
		
		private System.Nullable<int> _PayPerHour;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PartnerChanging(int value);
    partial void OnID_PartnerChanged();
    partial void OnPartnerNameChanging(string value);
    partial void OnPartnerNameChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnFunctionsChanging(string value);
    partial void OnFunctionsChanged();
    partial void OnPayPerHourChanging(System.Nullable<int> value);
    partial void OnPayPerHourChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Partners()
		{
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Partner", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Partner
		{
			get
			{
				return this._ID_Partner;
			}
			set
			{
				if ((this._ID_Partner != value))
				{
					this.OnID_PartnerChanging(value);
					this.SendPropertyChanging();
					this._ID_Partner = value;
					this.SendPropertyChanged("ID_Partner");
					this.OnID_PartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerName", DbType="NVarChar(MAX)")]
		public string PartnerName
		{
			get
			{
				return this._PartnerName;
			}
			set
			{
				if ((this._PartnerName != value))
				{
					this.OnPartnerNameChanging(value);
					this.SendPropertyChanging();
					this._PartnerName = value;
					this.SendPropertyChanged("PartnerName");
					this.OnPartnerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Functions", DbType="NVarChar(MAX)")]
		public string Functions
		{
			get
			{
				return this._Functions;
			}
			set
			{
				if ((this._Functions != value))
				{
					this.OnFunctionsChanging(value);
					this.SendPropertyChanging();
					this._Functions = value;
					this.SendPropertyChanged("Functions");
					this.OnFunctionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPerHour", DbType="Int")]
		public System.Nullable<int> PayPerHour
		{
			get
			{
				return this._PayPerHour;
			}
			set
			{
				if ((this._PayPerHour != value))
				{
					this.OnPayPerHourChanging(value);
					this.SendPropertyChanging();
					this._PayPerHour = value;
					this.SendPropertyChanged("PayPerHour");
					this.OnPayPerHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Partners", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Partners.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Partners.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchasePlan")]
	public partial class PurchasePlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Purchase;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<int> _FK_Event;
		
		private string _Purchase;
		
		private string _Unit;
		
		private System.Nullable<int> _Amount;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<double> _Sum;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<SpecialPart> _SpecialPart;
		
		private EntitySet<TargetIndicatorValue> _TargetIndicatorValue;
		
		private EntityRef<Bids> _Bids;
		
		private EntityRef<CalendarPlan> _CalendarPlan;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PurchaseChanging(int value);
    partial void OnID_PurchaseChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnFK_EventChanging(System.Nullable<int> value);
    partial void OnFK_EventChanged();
    partial void OnPurchaseChanging(string value);
    partial void OnPurchaseChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnSumChanging(System.Nullable<double> value);
    partial void OnSumChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public PurchasePlan()
		{
			this._SpecialPart = new EntitySet<SpecialPart>(new Action<SpecialPart>(this.attach_SpecialPart), new Action<SpecialPart>(this.detach_SpecialPart));
			this._TargetIndicatorValue = new EntitySet<TargetIndicatorValue>(new Action<TargetIndicatorValue>(this.attach_TargetIndicatorValue), new Action<TargetIndicatorValue>(this.detach_TargetIndicatorValue));
			this._Bids = default(EntityRef<Bids>);
			this._CalendarPlan = default(EntityRef<CalendarPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Purchase", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Purchase
		{
			get
			{
				return this._ID_Purchase;
			}
			set
			{
				if ((this._ID_Purchase != value))
				{
					this.OnID_PurchaseChanging(value);
					this.SendPropertyChanging();
					this._ID_Purchase = value;
					this.SendPropertyChanged("ID_Purchase");
					this.OnID_PurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Event", DbType="Int")]
		public System.Nullable<int> FK_Event
		{
			get
			{
				return this._FK_Event;
			}
			set
			{
				if ((this._FK_Event != value))
				{
					if (this._CalendarPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_EventChanging(value);
					this.SendPropertyChanging();
					this._FK_Event = value;
					this.SendPropertyChanged("FK_Event");
					this.OnFK_EventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchase", DbType="VarChar(MAX)")]
		public string Purchase
		{
			get
			{
				return this._Purchase;
			}
			set
			{
				if ((this._Purchase != value))
				{
					this.OnPurchaseChanging(value);
					this.SendPropertyChanging();
					this._Purchase = value;
					this.SendPropertyChanged("Purchase");
					this.OnPurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Float")]
		public System.Nullable<double> Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchasePlan_SpecialPart", Storage="_SpecialPart", ThisKey="ID_Purchase", OtherKey="FK_Purchase")]
		public EntitySet<SpecialPart> SpecialPart
		{
			get
			{
				return this._SpecialPart;
			}
			set
			{
				this._SpecialPart.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchasePlan_TargetIndicatorValue", Storage="_TargetIndicatorValue", ThisKey="ID_Purchase", OtherKey="FK_Purchase")]
		public EntitySet<TargetIndicatorValue> TargetIndicatorValue
		{
			get
			{
				return this._TargetIndicatorValue;
			}
			set
			{
				this._TargetIndicatorValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_PurchasePlan", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.PurchasePlan.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.PurchasePlan.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalendarPlan_PurchasePlan", Storage="_CalendarPlan", ThisKey="FK_Event", OtherKey="ID_Event", IsForeignKey=true)]
		public CalendarPlan CalendarPlan
		{
			get
			{
				return this._CalendarPlan.Entity;
			}
			set
			{
				CalendarPlan previousValue = this._CalendarPlan.Entity;
				if (((previousValue != value) 
							|| (this._CalendarPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalendarPlan.Entity = null;
						previousValue.PurchasePlan.Remove(this);
					}
					this._CalendarPlan.Entity = value;
					if ((value != null))
					{
						value.PurchasePlan.Add(this);
						this._FK_Event = value.ID_Event;
					}
					else
					{
						this._FK_Event = default(Nullable<int>);
					}
					this.SendPropertyChanged("CalendarPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpecialPart(SpecialPart entity)
		{
			this.SendPropertyChanging();
			entity.PurchasePlan = this;
		}
		
		private void detach_SpecialPart(SpecialPart entity)
		{
			this.SendPropertyChanging();
			entity.PurchasePlan = null;
		}
		
		private void attach_TargetIndicatorValue(TargetIndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.PurchasePlan = this;
		}
		
		private void detach_TargetIndicatorValue(TargetIndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.PurchasePlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Question-AnswerMapingTable]")]
	public partial class Question_AnswerMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_QuestionAnswer;
		
		private System.Nullable<int> _FK_Question;
		
		private System.Nullable<int> _FK_Answer;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Answers> _Answers;
		
		private EntityRef<Questions> _Questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_QuestionAnswerChanging(int value);
    partial void OnID_QuestionAnswerChanged();
    partial void OnFK_QuestionChanging(System.Nullable<int> value);
    partial void OnFK_QuestionChanged();
    partial void OnFK_AnswerChanging(System.Nullable<int> value);
    partial void OnFK_AnswerChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Question_AnswerMapingTable()
		{
			this._Answers = default(EntityRef<Answers>);
			this._Questions = default(EntityRef<Questions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_QuestionAnswer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_QuestionAnswer
		{
			get
			{
				return this._ID_QuestionAnswer;
			}
			set
			{
				if ((this._ID_QuestionAnswer != value))
				{
					this.OnID_QuestionAnswerChanging(value);
					this.SendPropertyChanging();
					this._ID_QuestionAnswer = value;
					this.SendPropertyChanged("ID_QuestionAnswer");
					this.OnID_QuestionAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Question", DbType="Int")]
		public System.Nullable<int> FK_Question
		{
			get
			{
				return this._FK_Question;
			}
			set
			{
				if ((this._FK_Question != value))
				{
					if (this._Questions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuestionChanging(value);
					this.SendPropertyChanging();
					this._FK_Question = value;
					this.SendPropertyChanged("FK_Question");
					this.OnFK_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Answer", DbType="Int")]
		public System.Nullable<int> FK_Answer
		{
			get
			{
				return this._FK_Answer;
			}
			set
			{
				if ((this._FK_Answer != value))
				{
					if (this._Answers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_AnswerChanging(value);
					this.SendPropertyChanging();
					this._FK_Answer = value;
					this.SendPropertyChanged("FK_Answer");
					this.OnFK_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answers_Question_AnswerMapingTable", Storage="_Answers", ThisKey="FK_Answer", OtherKey="ID_Answer", IsForeignKey=true)]
		public Answers Answers
		{
			get
			{
				return this._Answers.Entity;
			}
			set
			{
				Answers previousValue = this._Answers.Entity;
				if (((previousValue != value) 
							|| (this._Answers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answers.Entity = null;
						previousValue.Question_AnswerMapingTable.Remove(this);
					}
					this._Answers.Entity = value;
					if ((value != null))
					{
						value.Question_AnswerMapingTable.Add(this);
						this._FK_Answer = value.ID_Answer;
					}
					else
					{
						this._FK_Answer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Answers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Question_AnswerMapingTable", Storage="_Questions", ThisKey="FK_Question", OtherKey="ID_Question", IsForeignKey=true)]
		public Questions Questions
		{
			get
			{
				return this._Questions.Entity;
			}
			set
			{
				Questions previousValue = this._Questions.Entity;
				if (((previousValue != value) 
							|| (this._Questions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questions.Entity = null;
						previousValue.Question_AnswerMapingTable.Remove(this);
					}
					this._Questions.Entity = value;
					if ((value != null))
					{
						value.Question_AnswerMapingTable.Add(this);
						this._FK_Question = value.ID_Question;
					}
					else
					{
						this._FK_Question = default(Nullable<int>);
					}
					this.SendPropertyChanged("Questions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Questions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Question;
		
		private string _Question;
		
		private System.Nullable<bool> _Active;
		
		private string _Uniqvalue;
		
		private EntitySet<Konkurs_QuestionMapingTable> _Konkurs_QuestionMapingTable;
		
		private EntitySet<Question_AnswerMapingTable> _Question_AnswerMapingTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_QuestionChanging(int value);
    partial void OnID_QuestionChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnUniqvalueChanging(string value);
    partial void OnUniqvalueChanged();
    #endregion
		
		public Questions()
		{
			this._Konkurs_QuestionMapingTable = new EntitySet<Konkurs_QuestionMapingTable>(new Action<Konkurs_QuestionMapingTable>(this.attach_Konkurs_QuestionMapingTable), new Action<Konkurs_QuestionMapingTable>(this.detach_Konkurs_QuestionMapingTable));
			this._Question_AnswerMapingTable = new EntitySet<Question_AnswerMapingTable>(new Action<Question_AnswerMapingTable>(this.attach_Question_AnswerMapingTable), new Action<Question_AnswerMapingTable>(this.detach_Question_AnswerMapingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Question", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Question
		{
			get
			{
				return this._ID_Question;
			}
			set
			{
				if ((this._ID_Question != value))
				{
					this.OnID_QuestionChanging(value);
					this.SendPropertyChanging();
					this._ID_Question = value;
					this.SendPropertyChanged("ID_Question");
					this.OnID_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(MAX)")]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uniqvalue", DbType="NVarChar(50)")]
		public string Uniqvalue
		{
			get
			{
				return this._Uniqvalue;
			}
			set
			{
				if ((this._Uniqvalue != value))
				{
					this.OnUniqvalueChanging(value);
					this.SendPropertyChanging();
					this._Uniqvalue = value;
					this.SendPropertyChanged("Uniqvalue");
					this.OnUniqvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Konkurs_QuestionMapingTable", Storage="_Konkurs_QuestionMapingTable", ThisKey="ID_Question", OtherKey="FK_Question")]
		public EntitySet<Konkurs_QuestionMapingTable> Konkurs_QuestionMapingTable
		{
			get
			{
				return this._Konkurs_QuestionMapingTable;
			}
			set
			{
				this._Konkurs_QuestionMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Question_AnswerMapingTable", Storage="_Question_AnswerMapingTable", ThisKey="ID_Question", OtherKey="FK_Question")]
		public EntitySet<Question_AnswerMapingTable> Question_AnswerMapingTable
		{
			get
			{
				return this._Question_AnswerMapingTable;
			}
			set
			{
				this._Question_AnswerMapingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Konkurs_QuestionMapingTable(Konkurs_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = this;
		}
		
		private void detach_Konkurs_QuestionMapingTable(Konkurs_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = null;
		}
		
		private void attach_Question_AnswerMapingTable(Question_AnswerMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = this;
		}
		
		private void detach_Question_AnswerMapingTable(Question_AnswerMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Reports : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Report;
		
		private string _Report;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Bid;
		
		private string _DateOSPRNull;
		
		private System.Nullable<System.DateTime> _StartDateNull;
		
		private System.Nullable<System.DateTime> _EndDateNull;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ReportChanging(int value);
    partial void OnID_ReportChanged();
    partial void OnReportChanging(string value);
    partial void OnReportChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnDateOSPRNullChanging(string value);
    partial void OnDateOSPRNullChanged();
    partial void OnStartDateNullChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateNullChanged();
    partial void OnEndDateNullChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateNullChanged();
    #endregion
		
		public Reports()
		{
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Report", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Report
		{
			get
			{
				return this._ID_Report;
			}
			set
			{
				if ((this._ID_Report != value))
				{
					this.OnID_ReportChanging(value);
					this.SendPropertyChanging();
					this._ID_Report = value;
					this.SendPropertyChanged("ID_Report");
					this.OnID_ReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report", DbType="VarChar(MAX)")]
		public string Report
		{
			get
			{
				return this._Report;
			}
			set
			{
				if ((this._Report != value))
				{
					this.OnReportChanging(value);
					this.SendPropertyChanging();
					this._Report = value;
					this.SendPropertyChanged("Report");
					this.OnReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOSPRNull", DbType="VarChar(50)")]
		public string DateOSPRNull
		{
			get
			{
				return this._DateOSPRNull;
			}
			set
			{
				if ((this._DateOSPRNull != value))
				{
					this.OnDateOSPRNullChanging(value);
					this.SendPropertyChanging();
					this._DateOSPRNull = value;
					this.SendPropertyChanged("DateOSPRNull");
					this.OnDateOSPRNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateNull", DbType="Date")]
		public System.Nullable<System.DateTime> StartDateNull
		{
			get
			{
				return this._StartDateNull;
			}
			set
			{
				if ((this._StartDateNull != value))
				{
					this.OnStartDateNullChanging(value);
					this.SendPropertyChanging();
					this._StartDateNull = value;
					this.SendPropertyChanged("StartDateNull");
					this.OnStartDateNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateNull", DbType="Date")]
		public System.Nullable<System.DateTime> EndDateNull
		{
			get
			{
				return this._EndDateNull;
			}
			set
			{
				if ((this._EndDateNull != value))
				{
					this.OnEndDateNullChanging(value);
					this.SendPropertyChanging();
					this._EndDateNull = value;
					this.SendPropertyChanged("EndDateNull");
					this.OnEndDateNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Reports", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Result;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<int> _FK_Task;
		
		private string _ResultName;
		
		private string _ResultType;
		
		private string _Claim;
		
		private string _Criteria;
		
		private string _Method;
		
		private string _Responsible;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
		private EntityRef<TaskResult> _TaskResult;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ResultChanging(int value);
    partial void OnID_ResultChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnFK_TaskChanging(System.Nullable<int> value);
    partial void OnFK_TaskChanged();
    partial void OnResultNameChanging(string value);
    partial void OnResultNameChanged();
    partial void OnResultTypeChanging(string value);
    partial void OnResultTypeChanged();
    partial void OnClaimChanging(string value);
    partial void OnClaimChanged();
    partial void OnCriteriaChanging(string value);
    partial void OnCriteriaChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnResponsibleChanging(string value);
    partial void OnResponsibleChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Result()
		{
			this._Bids = default(EntityRef<Bids>);
			this._TaskResult = default(EntityRef<TaskResult>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Result", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Result
		{
			get
			{
				return this._ID_Result;
			}
			set
			{
				if ((this._ID_Result != value))
				{
					this.OnID_ResultChanging(value);
					this.SendPropertyChanging();
					this._ID_Result = value;
					this.SendPropertyChanged("ID_Result");
					this.OnID_ResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Task", DbType="Int")]
		public System.Nullable<int> FK_Task
		{
			get
			{
				return this._FK_Task;
			}
			set
			{
				if ((this._FK_Task != value))
				{
					if (this._TaskResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_TaskChanging(value);
					this.SendPropertyChanging();
					this._FK_Task = value;
					this.SendPropertyChanged("FK_Task");
					this.OnFK_TaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultName", DbType="VarChar(MAX)")]
		public string ResultName
		{
			get
			{
				return this._ResultName;
			}
			set
			{
				if ((this._ResultName != value))
				{
					this.OnResultNameChanging(value);
					this.SendPropertyChanging();
					this._ResultName = value;
					this.SendPropertyChanged("ResultName");
					this.OnResultNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultType", DbType="VarChar(MAX)")]
		public string ResultType
		{
			get
			{
				return this._ResultType;
			}
			set
			{
				if ((this._ResultType != value))
				{
					this.OnResultTypeChanging(value);
					this.SendPropertyChanging();
					this._ResultType = value;
					this.SendPropertyChanged("ResultType");
					this.OnResultTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Claim", DbType="VarChar(MAX)")]
		public string Claim
		{
			get
			{
				return this._Claim;
			}
			set
			{
				if ((this._Claim != value))
				{
					this.OnClaimChanging(value);
					this.SendPropertyChanging();
					this._Claim = value;
					this.SendPropertyChanged("Claim");
					this.OnClaimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Criteria", DbType="VarChar(MAX)")]
		public string Criteria
		{
			get
			{
				return this._Criteria;
			}
			set
			{
				if ((this._Criteria != value))
				{
					this.OnCriteriaChanging(value);
					this.SendPropertyChanging();
					this._Criteria = value;
					this.SendPropertyChanged("Criteria");
					this.OnCriteriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="VarChar(MAX)")]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Responsible", DbType="VarChar(MAX)")]
		public string Responsible
		{
			get
			{
				return this._Responsible;
			}
			set
			{
				if ((this._Responsible != value))
				{
					this.OnResponsibleChanging(value);
					this.SendPropertyChanging();
					this._Responsible = value;
					this.SendPropertyChanged("Responsible");
					this.OnResponsibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Result", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Result.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Result.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskResult_Result", Storage="_TaskResult", ThisKey="FK_Task", OtherKey="ID_Task", IsForeignKey=true)]
		public TaskResult TaskResult
		{
			get
			{
				return this._TaskResult.Entity;
			}
			set
			{
				TaskResult previousValue = this._TaskResult.Entity;
				if (((previousValue != value) 
							|| (this._TaskResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskResult.Entity = null;
						previousValue.Result1.Remove(this);
					}
					this._TaskResult.Entity = value;
					if ((value != null))
					{
						value.Result1.Add(this);
						this._FK_Task = value.ID_Task;
					}
					else
					{
						this._FK_Task = default(Nullable<int>);
					}
					this.SendPropertyChanged("TaskResult");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResultComent")]
	public partial class ResultComent
	{
		
		private System.Nullable<int> _ID_Coment;
		
		private System.Nullable<int> _FK_Result;
		
		private System.Nullable<bool> _Active;
		
		private string _ComentText;
		
		public ResultComent()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Coment", DbType="Int")]
		public System.Nullable<int> ID_Coment
		{
			get
			{
				return this._ID_Coment;
			}
			set
			{
				if ((this._ID_Coment != value))
				{
					this._ID_Coment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Result", DbType="Int")]
		public System.Nullable<int> FK_Result
		{
			get
			{
				return this._FK_Result;
			}
			set
			{
				if ((this._FK_Result != value))
				{
					this._FK_Result = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComentText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ComentText
		{
			get
			{
				return this._ComentText;
			}
			set
			{
				if ((this._ComentText != value))
				{
					this._ComentText = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Risks")]
	public partial class Risks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Risk;
		
		private System.Nullable<int> _FK_Bid;
		
		private string _RiskName;
		
		private string _Effect;
		
		private string _Method;
		
		private string _Reaction;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_RiskChanging(int value);
    partial void OnID_RiskChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnRiskNameChanging(string value);
    partial void OnRiskNameChanged();
    partial void OnEffectChanging(string value);
    partial void OnEffectChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnReactionChanging(string value);
    partial void OnReactionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Risks()
		{
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Risk", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Risk
		{
			get
			{
				return this._ID_Risk;
			}
			set
			{
				if ((this._ID_Risk != value))
				{
					this.OnID_RiskChanging(value);
					this.SendPropertyChanging();
					this._ID_Risk = value;
					this.SendPropertyChanged("ID_Risk");
					this.OnID_RiskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskName", DbType="VarChar(MAX)")]
		public string RiskName
		{
			get
			{
				return this._RiskName;
			}
			set
			{
				if ((this._RiskName != value))
				{
					this.OnRiskNameChanging(value);
					this.SendPropertyChanging();
					this._RiskName = value;
					this.SendPropertyChanged("RiskName");
					this.OnRiskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect", DbType="VarChar(MAX)")]
		public string Effect
		{
			get
			{
				return this._Effect;
			}
			set
			{
				if ((this._Effect != value))
				{
					this.OnEffectChanging(value);
					this.SendPropertyChanging();
					this._Effect = value;
					this.SendPropertyChanged("Effect");
					this.OnEffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="VarChar(MAX)")]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reaction", DbType="VarChar(MAX)")]
		public string Reaction
		{
			get
			{
				return this._Reaction;
			}
			set
			{
				if ((this._Reaction != value))
				{
					this.OnReactionChanging(value);
					this.SendPropertyChanging();
					this._Reaction = value;
					this.SendPropertyChanged("Reaction");
					this.OnReactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Risks", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Smeta")]
	public partial class Smeta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_State;
		
		private string _Name_state;
		
		private System.Nullable<bool> _Type_state;
		
		private string _Uniqvalue;
		
		private int _FK_Konkurs;
		
		private bool _Active;
		
		private EntitySet<SmetaValue> _SmetaValue;
		
		private EntityRef<Konkursy> _Konkursy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_StateChanging(int value);
    partial void OnID_StateChanged();
    partial void OnName_stateChanging(string value);
    partial void OnName_stateChanged();
    partial void OnType_stateChanging(System.Nullable<bool> value);
    partial void OnType_stateChanged();
    partial void OnUniqvalueChanging(string value);
    partial void OnUniqvalueChanged();
    partial void OnFK_KonkursChanging(int value);
    partial void OnFK_KonkursChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Smeta()
		{
			this._SmetaValue = new EntitySet<SmetaValue>(new Action<SmetaValue>(this.attach_SmetaValue), new Action<SmetaValue>(this.detach_SmetaValue));
			this._Konkursy = default(EntityRef<Konkursy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_State", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_State
		{
			get
			{
				return this._ID_State;
			}
			set
			{
				if ((this._ID_State != value))
				{
					this.OnID_StateChanging(value);
					this.SendPropertyChanging();
					this._ID_State = value;
					this.SendPropertyChanged("ID_State");
					this.OnID_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_state", DbType="VarChar(MAX)")]
		public string Name_state
		{
			get
			{
				return this._Name_state;
			}
			set
			{
				if ((this._Name_state != value))
				{
					this.OnName_stateChanging(value);
					this.SendPropertyChanging();
					this._Name_state = value;
					this.SendPropertyChanged("Name_state");
					this.OnName_stateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_state", DbType="Bit")]
		public System.Nullable<bool> Type_state
		{
			get
			{
				return this._Type_state;
			}
			set
			{
				if ((this._Type_state != value))
				{
					this.OnType_stateChanging(value);
					this.SendPropertyChanging();
					this._Type_state = value;
					this.SendPropertyChanged("Type_state");
					this.OnType_stateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uniqvalue", DbType="VarChar(MAX)")]
		public string Uniqvalue
		{
			get
			{
				return this._Uniqvalue;
			}
			set
			{
				if ((this._Uniqvalue != value))
				{
					this.OnUniqvalueChanging(value);
					this.SendPropertyChanging();
					this._Uniqvalue = value;
					this.SendPropertyChanged("Uniqvalue");
					this.OnUniqvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int NOT NULL")]
		public int FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Smeta_SmetaValue", Storage="_SmetaValue", ThisKey="ID_State", OtherKey="FK_State")]
		public EntitySet<SmetaValue> SmetaValue
		{
			get
			{
				return this._SmetaValue;
			}
			set
			{
				this._SmetaValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Smeta", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.Smeta.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.Smeta.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(int);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Smeta = this;
		}
		
		private void detach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Smeta = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SmetaValue")]
	public partial class SmetaValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Value;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<int> _FK_State;
		
		private System.Nullable<double> _Value;
		
		private EntityRef<Bids> _Bids;
		
		private EntityRef<Smeta> _Smeta;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ValueChanging(int value);
    partial void OnID_ValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnFK_StateChanging(System.Nullable<int> value);
    partial void OnFK_StateChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    #endregion
		
		public SmetaValue()
		{
			this._Bids = default(EntityRef<Bids>);
			this._Smeta = default(EntityRef<Smeta>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Value", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Value
		{
			get
			{
				return this._ID_Value;
			}
			set
			{
				if ((this._ID_Value != value))
				{
					this.OnID_ValueChanging(value);
					this.SendPropertyChanging();
					this._ID_Value = value;
					this.SendPropertyChanged("ID_Value");
					this.OnID_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_State", DbType="Int")]
		public System.Nullable<int> FK_State
		{
			get
			{
				return this._FK_State;
			}
			set
			{
				if ((this._FK_State != value))
				{
					if (this._Smeta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StateChanging(value);
					this.SendPropertyChanging();
					this._FK_State = value;
					this.SendPropertyChanged("FK_State");
					this.OnFK_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_SmetaValue", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.SmetaValue.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.SmetaValue.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Smeta_SmetaValue", Storage="_Smeta", ThisKey="FK_State", OtherKey="ID_State", IsForeignKey=true)]
		public Smeta Smeta
		{
			get
			{
				return this._Smeta.Entity;
			}
			set
			{
				Smeta previousValue = this._Smeta.Entity;
				if (((previousValue != value) 
							|| (this._Smeta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Smeta.Entity = null;
						previousValue.SmetaValue.Remove(this);
					}
					this._Smeta.Entity = value;
					if ((value != null))
					{
						value.SmetaValue.Add(this);
						this._FK_State = value.ID_State;
					}
					else
					{
						this._FK_State = default(Nullable<int>);
					}
					this.SendPropertyChanged("Smeta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialPart")]
	public partial class SpecialPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Equipment;
		
		private System.Nullable<int> _FK_Purchase;
		
		private string _Equipment;
		
		private System.Nullable<int> _PercentInProject;
		
		private System.Nullable<int> _PercentNotInProject;
		
		private System.Nullable<double> _Cost;
		
		private System.Nullable<double> _Total;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<PurchasePlan> _PurchasePlan;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_EquipmentChanging(int value);
    partial void OnID_EquipmentChanged();
    partial void OnFK_PurchaseChanging(System.Nullable<int> value);
    partial void OnFK_PurchaseChanged();
    partial void OnEquipmentChanging(string value);
    partial void OnEquipmentChanged();
    partial void OnPercentInProjectChanging(System.Nullable<int> value);
    partial void OnPercentInProjectChanged();
    partial void OnPercentNotInProjectChanging(System.Nullable<int> value);
    partial void OnPercentNotInProjectChanged();
    partial void OnCostChanging(System.Nullable<double> value);
    partial void OnCostChanged();
    partial void OnTotalChanging(System.Nullable<double> value);
    partial void OnTotalChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public SpecialPart()
		{
			this._PurchasePlan = default(EntityRef<PurchasePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Equipment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Equipment
		{
			get
			{
				return this._ID_Equipment;
			}
			set
			{
				if ((this._ID_Equipment != value))
				{
					this.OnID_EquipmentChanging(value);
					this.SendPropertyChanging();
					this._ID_Equipment = value;
					this.SendPropertyChanged("ID_Equipment");
					this.OnID_EquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Purchase", DbType="Int")]
		public System.Nullable<int> FK_Purchase
		{
			get
			{
				return this._FK_Purchase;
			}
			set
			{
				if ((this._FK_Purchase != value))
				{
					if (this._PurchasePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_PurchaseChanging(value);
					this.SendPropertyChanging();
					this._FK_Purchase = value;
					this.SendPropertyChanged("FK_Purchase");
					this.OnFK_PurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipment", DbType="VarChar(MAX)")]
		public string Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				if ((this._Equipment != value))
				{
					this.OnEquipmentChanging(value);
					this.SendPropertyChanging();
					this._Equipment = value;
					this.SendPropertyChanged("Equipment");
					this.OnEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentInProject", DbType="Int")]
		public System.Nullable<int> PercentInProject
		{
			get
			{
				return this._PercentInProject;
			}
			set
			{
				if ((this._PercentInProject != value))
				{
					this.OnPercentInProjectChanging(value);
					this.SendPropertyChanging();
					this._PercentInProject = value;
					this.SendPropertyChanged("PercentInProject");
					this.OnPercentInProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentNotInProject", DbType="Int")]
		public System.Nullable<int> PercentNotInProject
		{
			get
			{
				return this._PercentNotInProject;
			}
			set
			{
				if ((this._PercentNotInProject != value))
				{
					this.OnPercentNotInProjectChanging(value);
					this.SendPropertyChanging();
					this._PercentNotInProject = value;
					this.SendPropertyChanged("PercentNotInProject");
					this.OnPercentNotInProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Float")]
		public System.Nullable<double> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Float")]
		public System.Nullable<double> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchasePlan_SpecialPart", Storage="_PurchasePlan", ThisKey="FK_Purchase", OtherKey="ID_Purchase", IsForeignKey=true)]
		public PurchasePlan PurchasePlan
		{
			get
			{
				return this._PurchasePlan.Entity;
			}
			set
			{
				PurchasePlan previousValue = this._PurchasePlan.Entity;
				if (((previousValue != value) 
							|| (this._PurchasePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchasePlan.Entity = null;
						previousValue.SpecialPart.Remove(this);
					}
					this._PurchasePlan.Entity = value;
					if ((value != null))
					{
						value.SpecialPart.Add(this);
						this._FK_Purchase = value.ID_Purchase;
					}
					else
					{
						this._FK_Purchase = default(Nullable<int>);
					}
					this.SendPropertyChanged("PurchasePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TargetIndicators")]
	public partial class TargetIndicators : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_TargetIndicator;
		
		private string _TargetIndicator;
		
		private System.Nullable<bool> _Active;
		
		private string _Abb;
		
		private string _Uniqvalue;
		
		private EntitySet<Konkurs_TargetMapingTable> _Konkurs_TargetMapingTable;
		
		private EntitySet<TargetIndicatorValue> _TargetIndicatorValue;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TargetIndicatorChanging(int value);
    partial void OnID_TargetIndicatorChanged();
    partial void OnTargetIndicatorChanging(string value);
    partial void OnTargetIndicatorChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnAbbChanging(string value);
    partial void OnAbbChanged();
    partial void OnUniqvalueChanging(string value);
    partial void OnUniqvalueChanged();
    #endregion
		
		public TargetIndicators()
		{
			this._Konkurs_TargetMapingTable = new EntitySet<Konkurs_TargetMapingTable>(new Action<Konkurs_TargetMapingTable>(this.attach_Konkurs_TargetMapingTable), new Action<Konkurs_TargetMapingTable>(this.detach_Konkurs_TargetMapingTable));
			this._TargetIndicatorValue = new EntitySet<TargetIndicatorValue>(new Action<TargetIndicatorValue>(this.attach_TargetIndicatorValue), new Action<TargetIndicatorValue>(this.detach_TargetIndicatorValue));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TargetIndicator", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_TargetIndicator
		{
			get
			{
				return this._ID_TargetIndicator;
			}
			set
			{
				if ((this._ID_TargetIndicator != value))
				{
					this.OnID_TargetIndicatorChanging(value);
					this.SendPropertyChanging();
					this._ID_TargetIndicator = value;
					this.SendPropertyChanged("ID_TargetIndicator");
					this.OnID_TargetIndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetIndicator", DbType="VarChar(MAX)")]
		public string TargetIndicator
		{
			get
			{
				return this._TargetIndicator;
			}
			set
			{
				if ((this._TargetIndicator != value))
				{
					this.OnTargetIndicatorChanging(value);
					this.SendPropertyChanging();
					this._TargetIndicator = value;
					this.SendPropertyChanged("TargetIndicator");
					this.OnTargetIndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abb", DbType="VarChar(50)")]
		public string Abb
		{
			get
			{
				return this._Abb;
			}
			set
			{
				if ((this._Abb != value))
				{
					this.OnAbbChanging(value);
					this.SendPropertyChanging();
					this._Abb = value;
					this.SendPropertyChanged("Abb");
					this.OnAbbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uniqvalue", DbType="NVarChar(50)")]
		public string Uniqvalue
		{
			get
			{
				return this._Uniqvalue;
			}
			set
			{
				if ((this._Uniqvalue != value))
				{
					this.OnUniqvalueChanging(value);
					this.SendPropertyChanging();
					this._Uniqvalue = value;
					this.SendPropertyChanged("Uniqvalue");
					this.OnUniqvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TargetIndicators_Konkurs_TargetMapingTable", Storage="_Konkurs_TargetMapingTable", ThisKey="ID_TargetIndicator", OtherKey="FK_Target")]
		public EntitySet<Konkurs_TargetMapingTable> Konkurs_TargetMapingTable
		{
			get
			{
				return this._Konkurs_TargetMapingTable;
			}
			set
			{
				this._Konkurs_TargetMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TargetIndicators_TargetIndicatorValue", Storage="_TargetIndicatorValue", ThisKey="ID_TargetIndicator", OtherKey="FK_TargetIndicator")]
		public EntitySet<TargetIndicatorValue> TargetIndicatorValue
		{
			get
			{
				return this._TargetIndicatorValue;
			}
			set
			{
				this._TargetIndicatorValue.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Konkurs_TargetMapingTable(Konkurs_TargetMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.TargetIndicators = this;
		}
		
		private void detach_Konkurs_TargetMapingTable(Konkurs_TargetMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.TargetIndicators = null;
		}
		
		private void attach_TargetIndicatorValue(TargetIndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.TargetIndicators = this;
		}
		
		private void detach_TargetIndicatorValue(TargetIndicatorValue entity)
		{
			this.SendPropertyChanging();
			entity.TargetIndicators = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TargetIndicatorValue")]
	public partial class TargetIndicatorValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_TargetIndicatorValue;
		
		private System.Nullable<int> _FK_TargetIndicator;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<double> _PurchaseValue;
		
		private System.Nullable<int> _FK_Purchase;
		
		private System.Nullable<double> _StartValue2015;
		
		private System.Nullable<double> _EndValue2015;
		
		private string _Value2020;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
		private EntityRef<PurchasePlan> _PurchasePlan;
		
		private EntityRef<TargetIndicators> _TargetIndicators;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TargetIndicatorValueChanging(int value);
    partial void OnID_TargetIndicatorValueChanged();
    partial void OnFK_TargetIndicatorChanging(System.Nullable<int> value);
    partial void OnFK_TargetIndicatorChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnPurchaseValueChanging(System.Nullable<double> value);
    partial void OnPurchaseValueChanged();
    partial void OnFK_PurchaseChanging(System.Nullable<int> value);
    partial void OnFK_PurchaseChanged();
    partial void OnStartValue2015Changing(System.Nullable<double> value);
    partial void OnStartValue2015Changed();
    partial void OnEndValue2015Changing(System.Nullable<double> value);
    partial void OnEndValue2015Changed();
    partial void OnValue2020Changing(string value);
    partial void OnValue2020Changed();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public TargetIndicatorValue()
		{
			this._Bids = default(EntityRef<Bids>);
			this._PurchasePlan = default(EntityRef<PurchasePlan>);
			this._TargetIndicators = default(EntityRef<TargetIndicators>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TargetIndicatorValue", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_TargetIndicatorValue
		{
			get
			{
				return this._ID_TargetIndicatorValue;
			}
			set
			{
				if ((this._ID_TargetIndicatorValue != value))
				{
					this.OnID_TargetIndicatorValueChanging(value);
					this.SendPropertyChanging();
					this._ID_TargetIndicatorValue = value;
					this.SendPropertyChanged("ID_TargetIndicatorValue");
					this.OnID_TargetIndicatorValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_TargetIndicator", DbType="Int")]
		public System.Nullable<int> FK_TargetIndicator
		{
			get
			{
				return this._FK_TargetIndicator;
			}
			set
			{
				if ((this._FK_TargetIndicator != value))
				{
					if (this._TargetIndicators.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_TargetIndicatorChanging(value);
					this.SendPropertyChanging();
					this._FK_TargetIndicator = value;
					this.SendPropertyChanged("FK_TargetIndicator");
					this.OnFK_TargetIndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseValue", DbType="Float")]
		public System.Nullable<double> PurchaseValue
		{
			get
			{
				return this._PurchaseValue;
			}
			set
			{
				if ((this._PurchaseValue != value))
				{
					this.OnPurchaseValueChanging(value);
					this.SendPropertyChanging();
					this._PurchaseValue = value;
					this.SendPropertyChanged("PurchaseValue");
					this.OnPurchaseValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Purchase", DbType="Int")]
		public System.Nullable<int> FK_Purchase
		{
			get
			{
				return this._FK_Purchase;
			}
			set
			{
				if ((this._FK_Purchase != value))
				{
					if (this._PurchasePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_PurchaseChanging(value);
					this.SendPropertyChanging();
					this._FK_Purchase = value;
					this.SendPropertyChanged("FK_Purchase");
					this.OnFK_PurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartValue2015", DbType="Float")]
		public System.Nullable<double> StartValue2015
		{
			get
			{
				return this._StartValue2015;
			}
			set
			{
				if ((this._StartValue2015 != value))
				{
					this.OnStartValue2015Changing(value);
					this.SendPropertyChanging();
					this._StartValue2015 = value;
					this.SendPropertyChanged("StartValue2015");
					this.OnStartValue2015Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndValue2015", DbType="Float")]
		public System.Nullable<double> EndValue2015
		{
			get
			{
				return this._EndValue2015;
			}
			set
			{
				if ((this._EndValue2015 != value))
				{
					this.OnEndValue2015Changing(value);
					this.SendPropertyChanging();
					this._EndValue2015 = value;
					this.SendPropertyChanged("EndValue2015");
					this.OnEndValue2015Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value2020", DbType="VarChar(MAX)")]
		public string Value2020
		{
			get
			{
				return this._Value2020;
			}
			set
			{
				if ((this._Value2020 != value))
				{
					this.OnValue2020Changing(value);
					this.SendPropertyChanging();
					this._Value2020 = value;
					this.SendPropertyChanged("Value2020");
					this.OnValue2020Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_TargetIndicatorValue", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.TargetIndicatorValue.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.TargetIndicatorValue.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchasePlan_TargetIndicatorValue", Storage="_PurchasePlan", ThisKey="FK_Purchase", OtherKey="ID_Purchase", IsForeignKey=true)]
		public PurchasePlan PurchasePlan
		{
			get
			{
				return this._PurchasePlan.Entity;
			}
			set
			{
				PurchasePlan previousValue = this._PurchasePlan.Entity;
				if (((previousValue != value) 
							|| (this._PurchasePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchasePlan.Entity = null;
						previousValue.TargetIndicatorValue.Remove(this);
					}
					this._PurchasePlan.Entity = value;
					if ((value != null))
					{
						value.TargetIndicatorValue.Add(this);
						this._FK_Purchase = value.ID_Purchase;
					}
					else
					{
						this._FK_Purchase = default(Nullable<int>);
					}
					this.SendPropertyChanged("PurchasePlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TargetIndicators_TargetIndicatorValue", Storage="_TargetIndicators", ThisKey="FK_TargetIndicator", OtherKey="ID_TargetIndicator", IsForeignKey=true)]
		public TargetIndicators TargetIndicators
		{
			get
			{
				return this._TargetIndicators.Entity;
			}
			set
			{
				TargetIndicators previousValue = this._TargetIndicators.Entity;
				if (((previousValue != value) 
							|| (this._TargetIndicators.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetIndicators.Entity = null;
						previousValue.TargetIndicatorValue.Remove(this);
					}
					this._TargetIndicators.Entity = value;
					if ((value != null))
					{
						value.TargetIndicatorValue.Add(this);
						this._FK_TargetIndicator = value.ID_TargetIndicator;
					}
					else
					{
						this._FK_TargetIndicator = default(Nullable<int>);
					}
					this.SendPropertyChanged("TargetIndicators");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskResult")]
	public partial class TaskResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Task;
		
		private string _Task;
		
		private string _Result;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Result> _Result1;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TaskChanging(int value);
    partial void OnID_TaskChanged();
    partial void OnTaskChanging(string value);
    partial void OnTaskChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public TaskResult()
		{
			this._Result1 = new EntitySet<Result>(new Action<Result>(this.attach_Result1), new Action<Result>(this.detach_Result1));
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Task", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Task
		{
			get
			{
				return this._ID_Task;
			}
			set
			{
				if ((this._ID_Task != value))
				{
					this.OnID_TaskChanging(value);
					this.SendPropertyChanging();
					this._ID_Task = value;
					this.SendPropertyChanged("ID_Task");
					this.OnID_TaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Task", DbType="VarChar(MAX)")]
		public string Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				if ((this._Task != value))
				{
					this.OnTaskChanging(value);
					this.SendPropertyChanging();
					this._Task = value;
					this.SendPropertyChanged("Task");
					this.OnTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(MAX)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskResult_Result", Storage="_Result1", ThisKey="ID_Task", OtherKey="FK_Task")]
		public EntitySet<Result> Result1
		{
			get
			{
				return this._Result1;
			}
			set
			{
				this._Result1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_TaskResult", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.TaskResult.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.TaskResult.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Result1(Result entity)
		{
			this.SendPropertyChanging();
			entity.TaskResult = this;
		}
		
		private void detach_Result1(Result entity)
		{
			this.SendPropertyChanging();
			entity.TaskResult = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TitleInfo")]
	public partial class TitleInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Information;
		
		private System.Nullable<int> _FK_Bid;
		
		private string _ProjectName;
		
		private System.Nullable<System.DateTime> _PlanStartDate;
		
		private System.Nullable<System.DateTime> _PlanEndDate;
		
		private System.Nullable<double> _TotalBudget;
		
		private System.Nullable<double> _GrantBudget;
		
		private string _Curator;
		
		private string _IndividualCommand;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_InformationChanging(int value);
    partial void OnID_InformationChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnPlanStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlanStartDateChanged();
    partial void OnPlanEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlanEndDateChanged();
    partial void OnTotalBudgetChanging(System.Nullable<double> value);
    partial void OnTotalBudgetChanged();
    partial void OnGrantBudgetChanging(System.Nullable<double> value);
    partial void OnGrantBudgetChanged();
    partial void OnCuratorChanging(string value);
    partial void OnCuratorChanged();
    partial void OnIndividualCommandChanging(string value);
    partial void OnIndividualCommandChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public TitleInfo()
		{
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Information", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Information
		{
			get
			{
				return this._ID_Information;
			}
			set
			{
				if ((this._ID_Information != value))
				{
					this.OnID_InformationChanging(value);
					this.SendPropertyChanging();
					this._ID_Information = value;
					this.SendPropertyChanged("ID_Information");
					this.OnID_InformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(MAX)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> PlanStartDate
		{
			get
			{
				return this._PlanStartDate;
			}
			set
			{
				if ((this._PlanStartDate != value))
				{
					this.OnPlanStartDateChanging(value);
					this.SendPropertyChanging();
					this._PlanStartDate = value;
					this.SendPropertyChanged("PlanStartDate");
					this.OnPlanStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> PlanEndDate
		{
			get
			{
				return this._PlanEndDate;
			}
			set
			{
				if ((this._PlanEndDate != value))
				{
					this.OnPlanEndDateChanging(value);
					this.SendPropertyChanging();
					this._PlanEndDate = value;
					this.SendPropertyChanged("PlanEndDate");
					this.OnPlanEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalBudget", DbType="Float")]
		public System.Nullable<double> TotalBudget
		{
			get
			{
				return this._TotalBudget;
			}
			set
			{
				if ((this._TotalBudget != value))
				{
					this.OnTotalBudgetChanging(value);
					this.SendPropertyChanging();
					this._TotalBudget = value;
					this.SendPropertyChanged("TotalBudget");
					this.OnTotalBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrantBudget", DbType="Float")]
		public System.Nullable<double> GrantBudget
		{
			get
			{
				return this._GrantBudget;
			}
			set
			{
				if ((this._GrantBudget != value))
				{
					this.OnGrantBudgetChanging(value);
					this.SendPropertyChanging();
					this._GrantBudget = value;
					this.SendPropertyChanged("GrantBudget");
					this.OnGrantBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Curator", DbType="VarChar(MAX)")]
		public string Curator
		{
			get
			{
				return this._Curator;
			}
			set
			{
				if ((this._Curator != value))
				{
					this.OnCuratorChanging(value);
					this.SendPropertyChanging();
					this._Curator = value;
					this.SendPropertyChanged("Curator");
					this.OnCuratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndividualCommand", DbType="VarChar(MAX)")]
		public string IndividualCommand
		{
			get
			{
				return this._IndividualCommand;
			}
			set
			{
				if ((this._IndividualCommand != value))
				{
					this.OnIndividualCommandChanging(value);
					this.SendPropertyChanging();
					this._IndividualCommand = value;
					this.SendPropertyChanged("IndividualCommand");
					this.OnIndividualCommandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_TitleInfo", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.TitleInfo.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.TitleInfo.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User-BidMapingTable]")]
	public partial class User_BidMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_UserBid;
		
		private System.Nullable<int> _FK_User;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<int> _Access;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserBidChanging(int value);
    partial void OnID_UserBidChanged();
    partial void OnFK_UserChanging(System.Nullable<int> value);
    partial void OnFK_UserChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnAccessChanging(System.Nullable<int> value);
    partial void OnAccessChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public User_BidMapingTable()
		{
			this._Bids = default(EntityRef<Bids>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_UserBid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_UserBid
		{
			get
			{
				return this._ID_UserBid;
			}
			set
			{
				if ((this._ID_UserBid != value))
				{
					this.OnID_UserBidChanging(value);
					this.SendPropertyChanging();
					this._ID_UserBid = value;
					this.SendPropertyChanged("ID_UserBid");
					this.OnID_UserBidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_User", DbType="Int")]
		public System.Nullable<int> FK_User
		{
			get
			{
				return this._FK_User;
			}
			set
			{
				if ((this._FK_User != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserChanging(value);
					this.SendPropertyChanging();
					this._FK_User = value;
					this.SendPropertyChanged("FK_User");
					this.OnFK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Access", DbType="Int")]
		public System.Nullable<int> Access
		{
			get
			{
				return this._Access;
			}
			set
			{
				if ((this._Access != value))
				{
					this.OnAccessChanging(value);
					this.SendPropertyChanging();
					this._Access = value;
					this.SendPropertyChanged("Access");
					this.OnAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_User_BidMapingTable", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.User_BidMapingTable.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.User_BidMapingTable.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_User_BidMapingTable", Storage="_Users", ThisKey="FK_User", OtherKey="ID_User", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.User_BidMapingTable.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.User_BidMapingTable.Add(this);
						this._FK_User = value.ID_User;
					}
					else
					{
						this._FK_User = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_User;
		
		private string _Name;
		
		private System.Nullable<int> _Role;
		
		private string _Post;
		
		private string _E_mail;
		
		private string _Pass;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Bids> _Bids;
		
		private EntitySet<Konkursy> _Konkursy;
		
		private EntitySet<User_BidMapingTable> _User_BidMapingTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRoleChanging(System.Nullable<int> value);
    partial void OnRoleChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Users()
		{
			this._Bids = new EntitySet<Bids>(new Action<Bids>(this.attach_Bids), new Action<Bids>(this.detach_Bids));
			this._Konkursy = new EntitySet<Konkursy>(new Action<Konkursy>(this.attach_Konkursy), new Action<Konkursy>(this.detach_Konkursy));
			this._User_BidMapingTable = new EntitySet<User_BidMapingTable>(new Action<User_BidMapingTable>(this.attach_User_BidMapingTable), new Action<User_BidMapingTable>(this.detach_User_BidMapingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int")]
		public System.Nullable<int> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Post", DbType="VarChar(MAX)")]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E-mail]", Storage="_E_mail", DbType="VarChar(MAX)")]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(MAX)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bids", Storage="_Bids", ThisKey="ID_User", OtherKey="FK_Expert")]
		public EntitySet<Bids> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Konkursy", Storage="_Konkursy", ThisKey="ID_User", OtherKey="FK_Curator")]
		public EntitySet<Konkursy> Konkursy
		{
			get
			{
				return this._Konkursy;
			}
			set
			{
				this._Konkursy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_User_BidMapingTable", Storage="_User_BidMapingTable", ThisKey="ID_User", OtherKey="FK_User")]
		public EntitySet<User_BidMapingTable> User_BidMapingTable
		{
			get
			{
				return this._User_BidMapingTable;
			}
			set
			{
				this._User_BidMapingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Konkursy(Konkursy entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Konkursy(Konkursy entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
