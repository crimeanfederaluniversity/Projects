#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Competition
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Competitions")]
	public partial class CompetitionDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAnswers(Answers instance);
    partial void UpdateAnswers(Answers instance);
    partial void DeleteAnswers(Answers instance);
    partial void InsertBids(Bids instance);
    partial void UpdateBids(Bids instance);
    partial void DeleteBids(Bids instance);
    partial void InsertCompetitions(Competitions instance);
    partial void UpdateCompetitions(Competitions instance);
    partial void DeleteCompetitions(Competitions instance);
    partial void InsertFields(Fields instance);
    partial void UpdateFields(Fields instance);
    partial void DeleteFields(Fields instance);
    partial void InsertField_ValueMapingTable(Field_ValueMapingTable instance);
    partial void UpdateField_ValueMapingTable(Field_ValueMapingTable instance);
    partial void DeleteField_ValueMapingTable(Field_ValueMapingTable instance);
    partial void InsertForm_CompetitionMapingTable(Form_CompetitionMapingTable instance);
    partial void UpdateForm_CompetitionMapingTable(Form_CompetitionMapingTable instance);
    partial void DeleteForm_CompetitionMapingTable(Form_CompetitionMapingTable instance);
    partial void InsertForm_QuestionMapingTable(Form_QuestionMapingTable instance);
    partial void UpdateForm_QuestionMapingTable(Form_QuestionMapingTable instance);
    partial void DeleteForm_QuestionMapingTable(Form_QuestionMapingTable instance);
    partial void InsertForms(Forms instance);
    partial void UpdateForms(Forms instance);
    partial void DeleteForms(Forms instance);
    partial void InsertQuestion_AnswerMapinngTable(Question_AnswerMapinngTable instance);
    partial void UpdateQuestion_AnswerMapinngTable(Question_AnswerMapinngTable instance);
    partial void DeleteQuestion_AnswerMapinngTable(Question_AnswerMapinngTable instance);
    partial void InsertQuestions(Questions instance);
    partial void UpdateQuestions(Questions instance);
    partial void DeleteQuestions(Questions instance);
    partial void InsertTables(Tables instance);
    partial void UpdateTables(Tables instance);
    partial void DeleteTables(Tables instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertValues(Values instance);
    partial void UpdateValues(Values instance);
    partial void DeleteValues(Values instance);
    #endregion
		
		public CompetitionDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CompetitionsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answers> Answers
		{
			get
			{
				return this.GetTable<Answers>();
			}
		}
		
		public System.Data.Linq.Table<Bids> Bids
		{
			get
			{
				return this.GetTable<Bids>();
			}
		}
		
		public System.Data.Linq.Table<Competitions> Competitions
		{
			get
			{
				return this.GetTable<Competitions>();
			}
		}
		
		public System.Data.Linq.Table<Fields> Fields
		{
			get
			{
				return this.GetTable<Fields>();
			}
		}
		
		public System.Data.Linq.Table<Field_ValueMapingTable> Field_ValueMapingTable
		{
			get
			{
				return this.GetTable<Field_ValueMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Form_CompetitionMapingTable> Form_CompetitionMapingTable
		{
			get
			{
				return this.GetTable<Form_CompetitionMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Form_QuestionMapingTable> Form_QuestionMapingTable
		{
			get
			{
				return this.GetTable<Form_QuestionMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Forms> Forms
		{
			get
			{
				return this.GetTable<Forms>();
			}
		}
		
		public System.Data.Linq.Table<Question_AnswerMapinngTable> Question_AnswerMapinngTable
		{
			get
			{
				return this.GetTable<Question_AnswerMapinngTable>();
			}
		}
		
		public System.Data.Linq.Table<Questions> Questions
		{
			get
			{
				return this.GetTable<Questions>();
			}
		}
		
		public System.Data.Linq.Table<Tables> Tables
		{
			get
			{
				return this.GetTable<Tables>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Values> Values
		{
			get
			{
				return this.GetTable<Values>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answers")]
	public partial class Answers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Answer;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Bid;
		
		private string _Text;
		
		private EntitySet<Question_AnswerMapinngTable> _Question_AnswerMapinngTable;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AnswerChanging(int value);
    partial void OnID_AnswerChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Answers()
		{
			this._Question_AnswerMapinngTable = new EntitySet<Question_AnswerMapinngTable>(new Action<Question_AnswerMapinngTable>(this.attach_Question_AnswerMapinngTable), new Action<Question_AnswerMapinngTable>(this.detach_Question_AnswerMapinngTable));
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Answer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Answer
		{
			get
			{
				return this._ID_Answer;
			}
			set
			{
				if ((this._ID_Answer != value))
				{
					this.OnID_AnswerChanging(value);
					this.SendPropertyChanging();
					this._ID_Answer = value;
					this.SendPropertyChanged("ID_Answer");
					this.OnID_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answers_Question_AnswerMapinngTable", Storage="_Question_AnswerMapinngTable", ThisKey="ID_Answer", OtherKey="FK_Answer")]
		public EntitySet<Question_AnswerMapinngTable> Question_AnswerMapinngTable
		{
			get
			{
				return this._Question_AnswerMapinngTable;
			}
			set
			{
				this._Question_AnswerMapinngTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Answers", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Question_AnswerMapinngTable(Question_AnswerMapinngTable entity)
		{
			this.SendPropertyChanging();
			entity.Answers = this;
		}
		
		private void detach_Question_AnswerMapinngTable(Question_AnswerMapinngTable entity)
		{
			this.SendPropertyChanging();
			entity.Answers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bids")]
	public partial class Bids : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Bid;
		
		private System.Nullable<int> _FK_User;
		
		private System.Nullable<int> _FK_Competition;
		
		private System.Nullable<int> _FK_Expert;
		
		private System.Nullable<bool> _Active;
		
		private string _Status;
		
		private string _Comment;
		
		private EntitySet<Answers> _Answers;
		
		private EntitySet<Values> _Values;
		
		private EntityRef<Competitions> _Competitions;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Users> _Users1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_BidChanging(int value);
    partial void OnID_BidChanged();
    partial void OnFK_UserChanging(System.Nullable<int> value);
    partial void OnFK_UserChanged();
    partial void OnFK_CompetitionChanging(System.Nullable<int> value);
    partial void OnFK_CompetitionChanged();
    partial void OnFK_ExpertChanging(System.Nullable<int> value);
    partial void OnFK_ExpertChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Bids()
		{
			this._Answers = new EntitySet<Answers>(new Action<Answers>(this.attach_Answers), new Action<Answers>(this.detach_Answers));
			this._Values = new EntitySet<Values>(new Action<Values>(this.attach_Values), new Action<Values>(this.detach_Values));
			this._Competitions = default(EntityRef<Competitions>);
			this._Users = default(EntityRef<Users>);
			this._Users1 = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Bid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Bid
		{
			get
			{
				return this._ID_Bid;
			}
			set
			{
				if ((this._ID_Bid != value))
				{
					this.OnID_BidChanging(value);
					this.SendPropertyChanging();
					this._ID_Bid = value;
					this.SendPropertyChanged("ID_Bid");
					this.OnID_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_User", DbType="Int")]
		public System.Nullable<int> FK_User
		{
			get
			{
				return this._FK_User;
			}
			set
			{
				if ((this._FK_User != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserChanging(value);
					this.SendPropertyChanging();
					this._FK_User = value;
					this.SendPropertyChanged("FK_User");
					this.OnFK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Competition", DbType="Int")]
		public System.Nullable<int> FK_Competition
		{
			get
			{
				return this._FK_Competition;
			}
			set
			{
				if ((this._FK_Competition != value))
				{
					if (this._Competitions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionChanging(value);
					this.SendPropertyChanging();
					this._FK_Competition = value;
					this.SendPropertyChanged("FK_Competition");
					this.OnFK_CompetitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Expert", DbType="Int")]
		public System.Nullable<int> FK_Expert
		{
			get
			{
				return this._FK_Expert;
			}
			set
			{
				if ((this._FK_Expert != value))
				{
					if (this._Users1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ExpertChanging(value);
					this.SendPropertyChanging();
					this._FK_Expert = value;
					this.SendPropertyChanged("FK_Expert");
					this.OnFK_ExpertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(MAX)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Answers", Storage="_Answers", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Answers> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Values", Storage="_Values", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<Values> Values
		{
			get
			{
				return this._Values;
			}
			set
			{
				this._Values.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Bids", Storage="_Competitions", ThisKey="FK_Competition", OtherKey="ID_Competition", IsForeignKey=true)]
		public Competitions Competitions
		{
			get
			{
				return this._Competitions.Entity;
			}
			set
			{
				Competitions previousValue = this._Competitions.Entity;
				if (((previousValue != value) 
							|| (this._Competitions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competitions.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Competitions.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._FK_Competition = value.ID_Competition;
					}
					else
					{
						this._FK_Competition = default(Nullable<int>);
					}
					this.SendPropertyChanged("Competitions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bids", Storage="_Users", ThisKey="FK_User", OtherKey="ID_User", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._FK_User = value.ID_User;
					}
					else
					{
						this._FK_User = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bids1", Storage="_Users1", ThisKey="FK_Expert", OtherKey="ID_User", IsForeignKey=true)]
		public Users Users1
		{
			get
			{
				return this._Users1.Entity;
			}
			set
			{
				Users previousValue = this._Users1.Entity;
				if (((previousValue != value) 
							|| (this._Users1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users1.Entity = null;
						previousValue.Bids1.Remove(this);
					}
					this._Users1.Entity = value;
					if ((value != null))
					{
						value.Bids1.Add(this);
						this._FK_Expert = value.ID_User;
					}
					else
					{
						this._FK_Expert = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answers entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Answers(Answers entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_Values(Values entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_Values(Values entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Competitions")]
	public partial class Competitions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Competition;
		
		private string _Number;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Curator;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Bids> _Bids;
		
		private EntitySet<Fields> _Fields;
		
		private EntitySet<Form_CompetitionMapingTable> _Form_CompetitionMapingTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CompetitionChanging(int value);
    partial void OnID_CompetitionChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnCuratorChanging(string value);
    partial void OnCuratorChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Competitions()
		{
			this._Bids = new EntitySet<Bids>(new Action<Bids>(this.attach_Bids), new Action<Bids>(this.detach_Bids));
			this._Fields = new EntitySet<Fields>(new Action<Fields>(this.attach_Fields), new Action<Fields>(this.detach_Fields));
			this._Form_CompetitionMapingTable = new EntitySet<Form_CompetitionMapingTable>(new Action<Form_CompetitionMapingTable>(this.attach_Form_CompetitionMapingTable), new Action<Form_CompetitionMapingTable>(this.detach_Form_CompetitionMapingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Competition", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Competition
		{
			get
			{
				return this._ID_Competition;
			}
			set
			{
				if ((this._ID_Competition != value))
				{
					this.OnID_CompetitionChanging(value);
					this.SendPropertyChanging();
					this._ID_Competition = value;
					this.SendPropertyChanged("ID_Competition");
					this.OnID_CompetitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="VarChar(MAX)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Curator", DbType="VarChar(MAX)")]
		public string Curator
		{
			get
			{
				return this._Curator;
			}
			set
			{
				if ((this._Curator != value))
				{
					this.OnCuratorChanging(value);
					this.SendPropertyChanging();
					this._Curator = value;
					this.SendPropertyChanged("Curator");
					this.OnCuratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Bids", Storage="_Bids", ThisKey="ID_Competition", OtherKey="FK_Competition")]
		public EntitySet<Bids> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Fields", Storage="_Fields", ThisKey="ID_Competition", OtherKey="FK_Competition")]
		public EntitySet<Fields> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Form_CompetitionMapingTable", Storage="_Form_CompetitionMapingTable", ThisKey="ID_Competition", OtherKey="FK_Competition")]
		public EntitySet<Form_CompetitionMapingTable> Form_CompetitionMapingTable
		{
			get
			{
				return this._Form_CompetitionMapingTable;
			}
			set
			{
				this._Form_CompetitionMapingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = this;
		}
		
		private void detach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = null;
		}
		
		private void attach_Fields(Fields entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = this;
		}
		
		private void detach_Fields(Fields entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = null;
		}
		
		private void attach_Form_CompetitionMapingTable(Form_CompetitionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = this;
		}
		
		private void detach_Form_CompetitionMapingTable(Form_CompetitionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Competitions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fields")]
	public partial class Fields : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Field;
		
		private System.Nullable<int> _FK_Competition;
		
		private System.Nullable<int> _FK_Table;
		
		private string _Text;
		
		private string _Uniqvalue;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Field_ValueMapingTable> _Field_ValueMapingTable;
		
		private EntityRef<Competitions> _Competitions;
		
		private EntityRef<Tables> _Tables;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FieldChanging(int value);
    partial void OnID_FieldChanged();
    partial void OnFK_CompetitionChanging(System.Nullable<int> value);
    partial void OnFK_CompetitionChanged();
    partial void OnFK_TableChanging(System.Nullable<int> value);
    partial void OnFK_TableChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnUniqvalueChanging(string value);
    partial void OnUniqvalueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Fields()
		{
			this._Field_ValueMapingTable = new EntitySet<Field_ValueMapingTable>(new Action<Field_ValueMapingTable>(this.attach_Field_ValueMapingTable), new Action<Field_ValueMapingTable>(this.detach_Field_ValueMapingTable));
			this._Competitions = default(EntityRef<Competitions>);
			this._Tables = default(EntityRef<Tables>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Field", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Field
		{
			get
			{
				return this._ID_Field;
			}
			set
			{
				if ((this._ID_Field != value))
				{
					this.OnID_FieldChanging(value);
					this.SendPropertyChanging();
					this._ID_Field = value;
					this.SendPropertyChanged("ID_Field");
					this.OnID_FieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Competition", DbType="Int")]
		public System.Nullable<int> FK_Competition
		{
			get
			{
				return this._FK_Competition;
			}
			set
			{
				if ((this._FK_Competition != value))
				{
					if (this._Competitions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionChanging(value);
					this.SendPropertyChanging();
					this._FK_Competition = value;
					this.SendPropertyChanged("FK_Competition");
					this.OnFK_CompetitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Table", DbType="Int")]
		public System.Nullable<int> FK_Table
		{
			get
			{
				return this._FK_Table;
			}
			set
			{
				if ((this._FK_Table != value))
				{
					if (this._Tables.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_TableChanging(value);
					this.SendPropertyChanging();
					this._FK_Table = value;
					this.SendPropertyChanged("FK_Table");
					this.OnFK_TableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uniqvalue", DbType="VarChar(MAX)")]
		public string Uniqvalue
		{
			get
			{
				return this._Uniqvalue;
			}
			set
			{
				if ((this._Uniqvalue != value))
				{
					this.OnUniqvalueChanging(value);
					this.SendPropertyChanging();
					this._Uniqvalue = value;
					this.SendPropertyChanged("Uniqvalue");
					this.OnUniqvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fields_Field_ValueMapingTable", Storage="_Field_ValueMapingTable", ThisKey="ID_Field", OtherKey="FK_Field")]
		public EntitySet<Field_ValueMapingTable> Field_ValueMapingTable
		{
			get
			{
				return this._Field_ValueMapingTable;
			}
			set
			{
				this._Field_ValueMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Fields", Storage="_Competitions", ThisKey="FK_Competition", OtherKey="ID_Competition", IsForeignKey=true)]
		public Competitions Competitions
		{
			get
			{
				return this._Competitions.Entity;
			}
			set
			{
				Competitions previousValue = this._Competitions.Entity;
				if (((previousValue != value) 
							|| (this._Competitions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competitions.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._Competitions.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._FK_Competition = value.ID_Competition;
					}
					else
					{
						this._FK_Competition = default(Nullable<int>);
					}
					this.SendPropertyChanged("Competitions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tables_Fields", Storage="_Tables", ThisKey="FK_Table", OtherKey="ID_Table", IsForeignKey=true)]
		public Tables Tables
		{
			get
			{
				return this._Tables.Entity;
			}
			set
			{
				Tables previousValue = this._Tables.Entity;
				if (((previousValue != value) 
							|| (this._Tables.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tables.Entity = null;
						previousValue.Fields.Remove(this);
					}
					this._Tables.Entity = value;
					if ((value != null))
					{
						value.Fields.Add(this);
						this._FK_Table = value.ID_Table;
					}
					else
					{
						this._FK_Table = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tables");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Field_ValueMapingTable(Field_ValueMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Fields = this;
		}
		
		private void detach_Field_ValueMapingTable(Field_ValueMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Fields = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Field-ValueMapingTable]")]
	public partial class Field_ValueMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Field_Value;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Field;
		
		private System.Nullable<int> _FK_Value;
		
		private EntityRef<Fields> _Fields;
		
		private EntityRef<Values> _Values;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_Field_ValueChanging(int value);
    partial void OnID_Field_ValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_FieldChanging(System.Nullable<int> value);
    partial void OnFK_FieldChanged();
    partial void OnFK_ValueChanging(System.Nullable<int> value);
    partial void OnFK_ValueChanged();
    #endregion
		
		public Field_ValueMapingTable()
		{
			this._Fields = default(EntityRef<Fields>);
			this._Values = default(EntityRef<Values>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID_Field-Value]", Storage="_ID_Field_Value", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Field_Value
		{
			get
			{
				return this._ID_Field_Value;
			}
			set
			{
				if ((this._ID_Field_Value != value))
				{
					this.OnID_Field_ValueChanging(value);
					this.SendPropertyChanging();
					this._ID_Field_Value = value;
					this.SendPropertyChanged("ID_Field_Value");
					this.OnID_Field_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Field", DbType="Int")]
		public System.Nullable<int> FK_Field
		{
			get
			{
				return this._FK_Field;
			}
			set
			{
				if ((this._FK_Field != value))
				{
					if (this._Fields.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FieldChanging(value);
					this.SendPropertyChanging();
					this._FK_Field = value;
					this.SendPropertyChanged("FK_Field");
					this.OnFK_FieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Value", DbType="Int")]
		public System.Nullable<int> FK_Value
		{
			get
			{
				return this._FK_Value;
			}
			set
			{
				if ((this._FK_Value != value))
				{
					if (this._Values.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ValueChanging(value);
					this.SendPropertyChanging();
					this._FK_Value = value;
					this.SendPropertyChanged("FK_Value");
					this.OnFK_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fields_Field_ValueMapingTable", Storage="_Fields", ThisKey="FK_Field", OtherKey="ID_Field", IsForeignKey=true)]
		public Fields Fields
		{
			get
			{
				return this._Fields.Entity;
			}
			set
			{
				Fields previousValue = this._Fields.Entity;
				if (((previousValue != value) 
							|| (this._Fields.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fields.Entity = null;
						previousValue.Field_ValueMapingTable.Remove(this);
					}
					this._Fields.Entity = value;
					if ((value != null))
					{
						value.Field_ValueMapingTable.Add(this);
						this._FK_Field = value.ID_Field;
					}
					else
					{
						this._FK_Field = default(Nullable<int>);
					}
					this.SendPropertyChanged("Fields");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Values_Field_ValueMapingTable", Storage="_Values", ThisKey="FK_Value", OtherKey="ID_Value", IsForeignKey=true)]
		public Values Values
		{
			get
			{
				return this._Values.Entity;
			}
			set
			{
				Values previousValue = this._Values.Entity;
				if (((previousValue != value) 
							|| (this._Values.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Values.Entity = null;
						previousValue.Field_ValueMapingTable.Remove(this);
					}
					this._Values.Entity = value;
					if ((value != null))
					{
						value.Field_ValueMapingTable.Add(this);
						this._FK_Value = value.ID_Value;
					}
					else
					{
						this._FK_Value = default(Nullable<int>);
					}
					this.SendPropertyChanged("Values");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Form-CompetitionMapingTable]")]
	public partial class Form_CompetitionMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Table_Field;
		
		private System.Nullable<int> _FK_Form;
		
		private System.Nullable<int> _FK_Competition;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Competitions> _Competitions;
		
		private EntityRef<Forms> _Forms;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_Table_FieldChanging(int value);
    partial void OnID_Table_FieldChanged();
    partial void OnFK_FormChanging(System.Nullable<int> value);
    partial void OnFK_FormChanged();
    partial void OnFK_CompetitionChanging(System.Nullable<int> value);
    partial void OnFK_CompetitionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Form_CompetitionMapingTable()
		{
			this._Competitions = default(EntityRef<Competitions>);
			this._Forms = default(EntityRef<Forms>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID_Table-Field]", Storage="_ID_Table_Field", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Table_Field
		{
			get
			{
				return this._ID_Table_Field;
			}
			set
			{
				if ((this._ID_Table_Field != value))
				{
					this.OnID_Table_FieldChanging(value);
					this.SendPropertyChanging();
					this._ID_Table_Field = value;
					this.SendPropertyChanged("ID_Table_Field");
					this.OnID_Table_FieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Form", DbType="Int")]
		public System.Nullable<int> FK_Form
		{
			get
			{
				return this._FK_Form;
			}
			set
			{
				if ((this._FK_Form != value))
				{
					if (this._Forms.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FormChanging(value);
					this.SendPropertyChanging();
					this._FK_Form = value;
					this.SendPropertyChanged("FK_Form");
					this.OnFK_FormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Competition", DbType="Int")]
		public System.Nullable<int> FK_Competition
		{
			get
			{
				return this._FK_Competition;
			}
			set
			{
				if ((this._FK_Competition != value))
				{
					if (this._Competitions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionChanging(value);
					this.SendPropertyChanging();
					this._FK_Competition = value;
					this.SendPropertyChanged("FK_Competition");
					this.OnFK_CompetitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Competitions_Form_CompetitionMapingTable", Storage="_Competitions", ThisKey="FK_Competition", OtherKey="ID_Competition", IsForeignKey=true)]
		public Competitions Competitions
		{
			get
			{
				return this._Competitions.Entity;
			}
			set
			{
				Competitions previousValue = this._Competitions.Entity;
				if (((previousValue != value) 
							|| (this._Competitions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Competitions.Entity = null;
						previousValue.Form_CompetitionMapingTable.Remove(this);
					}
					this._Competitions.Entity = value;
					if ((value != null))
					{
						value.Form_CompetitionMapingTable.Add(this);
						this._FK_Competition = value.ID_Competition;
					}
					else
					{
						this._FK_Competition = default(Nullable<int>);
					}
					this.SendPropertyChanged("Competitions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_Form_CompetitionMapingTable", Storage="_Forms", ThisKey="FK_Form", OtherKey="ID_Form", IsForeignKey=true)]
		public Forms Forms
		{
			get
			{
				return this._Forms.Entity;
			}
			set
			{
				Forms previousValue = this._Forms.Entity;
				if (((previousValue != value) 
							|| (this._Forms.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forms.Entity = null;
						previousValue.Form_CompetitionMapingTable.Remove(this);
					}
					this._Forms.Entity = value;
					if ((value != null))
					{
						value.Form_CompetitionMapingTable.Add(this);
						this._FK_Form = value.ID_Form;
					}
					else
					{
						this._FK_Form = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forms");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Form-QuestionMapingTable]")]
	public partial class Form_QuestionMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Form_Question;
		
		private System.Nullable<int> _FK_Form;
		
		private System.Nullable<int> _FK_Question;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Forms> _Forms;
		
		private EntityRef<Questions> _Questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_Form_QuestionChanging(int value);
    partial void OnID_Form_QuestionChanged();
    partial void OnFK_FormChanging(System.Nullable<int> value);
    partial void OnFK_FormChanged();
    partial void OnFK_QuestionChanging(System.Nullable<int> value);
    partial void OnFK_QuestionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Form_QuestionMapingTable()
		{
			this._Forms = default(EntityRef<Forms>);
			this._Questions = default(EntityRef<Questions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID_Form-Question]", Storage="_ID_Form_Question", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Form_Question
		{
			get
			{
				return this._ID_Form_Question;
			}
			set
			{
				if ((this._ID_Form_Question != value))
				{
					this.OnID_Form_QuestionChanging(value);
					this.SendPropertyChanging();
					this._ID_Form_Question = value;
					this.SendPropertyChanged("ID_Form_Question");
					this.OnID_Form_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Form", DbType="Int")]
		public System.Nullable<int> FK_Form
		{
			get
			{
				return this._FK_Form;
			}
			set
			{
				if ((this._FK_Form != value))
				{
					if (this._Forms.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FormChanging(value);
					this.SendPropertyChanging();
					this._FK_Form = value;
					this.SendPropertyChanged("FK_Form");
					this.OnFK_FormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Question", DbType="Int")]
		public System.Nullable<int> FK_Question
		{
			get
			{
				return this._FK_Question;
			}
			set
			{
				if ((this._FK_Question != value))
				{
					if (this._Questions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuestionChanging(value);
					this.SendPropertyChanging();
					this._FK_Question = value;
					this.SendPropertyChanged("FK_Question");
					this.OnFK_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_Form_QuestionMapingTable", Storage="_Forms", ThisKey="FK_Form", OtherKey="ID_Form", IsForeignKey=true)]
		public Forms Forms
		{
			get
			{
				return this._Forms.Entity;
			}
			set
			{
				Forms previousValue = this._Forms.Entity;
				if (((previousValue != value) 
							|| (this._Forms.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forms.Entity = null;
						previousValue.Form_QuestionMapingTable.Remove(this);
					}
					this._Forms.Entity = value;
					if ((value != null))
					{
						value.Form_QuestionMapingTable.Add(this);
						this._FK_Form = value.ID_Form;
					}
					else
					{
						this._FK_Form = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forms");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Form_QuestionMapingTable", Storage="_Questions", ThisKey="FK_Question", OtherKey="ID_Question", IsForeignKey=true)]
		public Questions Questions
		{
			get
			{
				return this._Questions.Entity;
			}
			set
			{
				Questions previousValue = this._Questions.Entity;
				if (((previousValue != value) 
							|| (this._Questions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questions.Entity = null;
						previousValue.Form_QuestionMapingTable.Remove(this);
					}
					this._Questions.Entity = value;
					if ((value != null))
					{
						value.Form_QuestionMapingTable.Add(this);
						this._FK_Question = value.ID_Question;
					}
					else
					{
						this._FK_Question = default(Nullable<int>);
					}
					this.SendPropertyChanged("Questions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forms")]
	public partial class Forms : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Form;
		
		private string _Name;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Form_CompetitionMapingTable> _Form_CompetitionMapingTable;
		
		private EntitySet<Form_QuestionMapingTable> _Form_QuestionMapingTable;
		
		private EntitySet<Tables> _Tables;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FormChanging(int value);
    partial void OnID_FormChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Forms()
		{
			this._Form_CompetitionMapingTable = new EntitySet<Form_CompetitionMapingTable>(new Action<Form_CompetitionMapingTable>(this.attach_Form_CompetitionMapingTable), new Action<Form_CompetitionMapingTable>(this.detach_Form_CompetitionMapingTable));
			this._Form_QuestionMapingTable = new EntitySet<Form_QuestionMapingTable>(new Action<Form_QuestionMapingTable>(this.attach_Form_QuestionMapingTable), new Action<Form_QuestionMapingTable>(this.detach_Form_QuestionMapingTable));
			this._Tables = new EntitySet<Tables>(new Action<Tables>(this.attach_Tables), new Action<Tables>(this.detach_Tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Form", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Form
		{
			get
			{
				return this._ID_Form;
			}
			set
			{
				if ((this._ID_Form != value))
				{
					this.OnID_FormChanging(value);
					this.SendPropertyChanging();
					this._ID_Form = value;
					this.SendPropertyChanged("ID_Form");
					this.OnID_FormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_Form_CompetitionMapingTable", Storage="_Form_CompetitionMapingTable", ThisKey="ID_Form", OtherKey="FK_Form")]
		public EntitySet<Form_CompetitionMapingTable> Form_CompetitionMapingTable
		{
			get
			{
				return this._Form_CompetitionMapingTable;
			}
			set
			{
				this._Form_CompetitionMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_Form_QuestionMapingTable", Storage="_Form_QuestionMapingTable", ThisKey="ID_Form", OtherKey="FK_Form")]
		public EntitySet<Form_QuestionMapingTable> Form_QuestionMapingTable
		{
			get
			{
				return this._Form_QuestionMapingTable;
			}
			set
			{
				this._Form_QuestionMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_Tables", Storage="_Tables", ThisKey="ID_Form", OtherKey="FK_Form")]
		public EntitySet<Tables> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Form_CompetitionMapingTable(Form_CompetitionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Forms = this;
		}
		
		private void detach_Form_CompetitionMapingTable(Form_CompetitionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Forms = null;
		}
		
		private void attach_Form_QuestionMapingTable(Form_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Forms = this;
		}
		
		private void detach_Form_QuestionMapingTable(Form_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Forms = null;
		}
		
		private void attach_Tables(Tables entity)
		{
			this.SendPropertyChanging();
			entity.Forms = this;
		}
		
		private void detach_Tables(Tables entity)
		{
			this.SendPropertyChanging();
			entity.Forms = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Question-AnswerMapinngTable]")]
	public partial class Question_AnswerMapinngTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Question_Answer;
		
		private System.Nullable<int> _FK_Answer;
		
		private System.Nullable<int> _FK_Question;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Answers> _Answers;
		
		private EntityRef<Questions> _Questions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_Question_AnswerChanging(int value);
    partial void OnID_Question_AnswerChanged();
    partial void OnFK_AnswerChanging(System.Nullable<int> value);
    partial void OnFK_AnswerChanged();
    partial void OnFK_QuestionChanging(System.Nullable<int> value);
    partial void OnFK_QuestionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Question_AnswerMapinngTable()
		{
			this._Answers = default(EntityRef<Answers>);
			this._Questions = default(EntityRef<Questions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID_Question-Answer]", Storage="_ID_Question_Answer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Question_Answer
		{
			get
			{
				return this._ID_Question_Answer;
			}
			set
			{
				if ((this._ID_Question_Answer != value))
				{
					this.OnID_Question_AnswerChanging(value);
					this.SendPropertyChanging();
					this._ID_Question_Answer = value;
					this.SendPropertyChanged("ID_Question_Answer");
					this.OnID_Question_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Answer", DbType="Int")]
		public System.Nullable<int> FK_Answer
		{
			get
			{
				return this._FK_Answer;
			}
			set
			{
				if ((this._FK_Answer != value))
				{
					if (this._Answers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_AnswerChanging(value);
					this.SendPropertyChanging();
					this._FK_Answer = value;
					this.SendPropertyChanged("FK_Answer");
					this.OnFK_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Question", DbType="Int")]
		public System.Nullable<int> FK_Question
		{
			get
			{
				return this._FK_Question;
			}
			set
			{
				if ((this._FK_Question != value))
				{
					if (this._Questions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuestionChanging(value);
					this.SendPropertyChanging();
					this._FK_Question = value;
					this.SendPropertyChanged("FK_Question");
					this.OnFK_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answers_Question_AnswerMapinngTable", Storage="_Answers", ThisKey="FK_Answer", OtherKey="ID_Answer", IsForeignKey=true)]
		public Answers Answers
		{
			get
			{
				return this._Answers.Entity;
			}
			set
			{
				Answers previousValue = this._Answers.Entity;
				if (((previousValue != value) 
							|| (this._Answers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answers.Entity = null;
						previousValue.Question_AnswerMapinngTable.Remove(this);
					}
					this._Answers.Entity = value;
					if ((value != null))
					{
						value.Question_AnswerMapinngTable.Add(this);
						this._FK_Answer = value.ID_Answer;
					}
					else
					{
						this._FK_Answer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Answers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Question_AnswerMapinngTable", Storage="_Questions", ThisKey="FK_Question", OtherKey="ID_Question", IsForeignKey=true)]
		public Questions Questions
		{
			get
			{
				return this._Questions.Entity;
			}
			set
			{
				Questions previousValue = this._Questions.Entity;
				if (((previousValue != value) 
							|| (this._Questions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Questions.Entity = null;
						previousValue.Question_AnswerMapinngTable.Remove(this);
					}
					this._Questions.Entity = value;
					if ((value != null))
					{
						value.Question_AnswerMapinngTable.Add(this);
						this._FK_Question = value.ID_Question;
					}
					else
					{
						this._FK_Question = default(Nullable<int>);
					}
					this.SendPropertyChanged("Questions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Questions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Question;
		
		private System.Nullable<int> _FK_Form;
		
		private string _Text;
		
		private string _Uniqvalue;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Form_QuestionMapingTable> _Form_QuestionMapingTable;
		
		private EntitySet<Question_AnswerMapinngTable> _Question_AnswerMapinngTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_QuestionChanging(int value);
    partial void OnID_QuestionChanged();
    partial void OnFK_FormChanging(System.Nullable<int> value);
    partial void OnFK_FormChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnUniqvalueChanging(string value);
    partial void OnUniqvalueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Questions()
		{
			this._Form_QuestionMapingTable = new EntitySet<Form_QuestionMapingTable>(new Action<Form_QuestionMapingTable>(this.attach_Form_QuestionMapingTable), new Action<Form_QuestionMapingTable>(this.detach_Form_QuestionMapingTable));
			this._Question_AnswerMapinngTable = new EntitySet<Question_AnswerMapinngTable>(new Action<Question_AnswerMapinngTable>(this.attach_Question_AnswerMapinngTable), new Action<Question_AnswerMapinngTable>(this.detach_Question_AnswerMapinngTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Question", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Question
		{
			get
			{
				return this._ID_Question;
			}
			set
			{
				if ((this._ID_Question != value))
				{
					this.OnID_QuestionChanging(value);
					this.SendPropertyChanging();
					this._ID_Question = value;
					this.SendPropertyChanged("ID_Question");
					this.OnID_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Form", DbType="Int")]
		public System.Nullable<int> FK_Form
		{
			get
			{
				return this._FK_Form;
			}
			set
			{
				if ((this._FK_Form != value))
				{
					this.OnFK_FormChanging(value);
					this.SendPropertyChanging();
					this._FK_Form = value;
					this.SendPropertyChanged("FK_Form");
					this.OnFK_FormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uniqvalue", DbType="VarChar(MAX)")]
		public string Uniqvalue
		{
			get
			{
				return this._Uniqvalue;
			}
			set
			{
				if ((this._Uniqvalue != value))
				{
					this.OnUniqvalueChanging(value);
					this.SendPropertyChanging();
					this._Uniqvalue = value;
					this.SendPropertyChanged("Uniqvalue");
					this.OnUniqvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Form_QuestionMapingTable", Storage="_Form_QuestionMapingTable", ThisKey="ID_Question", OtherKey="FK_Question")]
		public EntitySet<Form_QuestionMapingTable> Form_QuestionMapingTable
		{
			get
			{
				return this._Form_QuestionMapingTable;
			}
			set
			{
				this._Form_QuestionMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Questions_Question_AnswerMapinngTable", Storage="_Question_AnswerMapinngTable", ThisKey="ID_Question", OtherKey="FK_Question")]
		public EntitySet<Question_AnswerMapinngTable> Question_AnswerMapinngTable
		{
			get
			{
				return this._Question_AnswerMapinngTable;
			}
			set
			{
				this._Question_AnswerMapinngTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Form_QuestionMapingTable(Form_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = this;
		}
		
		private void detach_Form_QuestionMapingTable(Form_QuestionMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = null;
		}
		
		private void attach_Question_AnswerMapinngTable(Question_AnswerMapinngTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = this;
		}
		
		private void detach_Question_AnswerMapinngTable(Question_AnswerMapinngTable entity)
		{
			this.SendPropertyChanging();
			entity.Questions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tables")]
	public partial class Tables : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Table;
		
		private System.Nullable<int> _FK_Form;
		
		private string _Name;
		
		private string _Column1Name;
		
		private string _Column2Name;
		
		private string _Column3Name;
		
		private string _Column4Name;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Fields> _Fields;
		
		private EntityRef<Forms> _Forms;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TableChanging(int value);
    partial void OnID_TableChanged();
    partial void OnFK_FormChanging(System.Nullable<int> value);
    partial void OnFK_FormChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnColumn1NameChanging(string value);
    partial void OnColumn1NameChanged();
    partial void OnColumn2NameChanging(string value);
    partial void OnColumn2NameChanged();
    partial void OnColumn3NameChanging(string value);
    partial void OnColumn3NameChanged();
    partial void OnColumn4NameChanging(string value);
    partial void OnColumn4NameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Tables()
		{
			this._Fields = new EntitySet<Fields>(new Action<Fields>(this.attach_Fields), new Action<Fields>(this.detach_Fields));
			this._Forms = default(EntityRef<Forms>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Table", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Table
		{
			get
			{
				return this._ID_Table;
			}
			set
			{
				if ((this._ID_Table != value))
				{
					this.OnID_TableChanging(value);
					this.SendPropertyChanging();
					this._ID_Table = value;
					this.SendPropertyChanged("ID_Table");
					this.OnID_TableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Form", DbType="Int")]
		public System.Nullable<int> FK_Form
		{
			get
			{
				return this._FK_Form;
			}
			set
			{
				if ((this._FK_Form != value))
				{
					if (this._Forms.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FormChanging(value);
					this.SendPropertyChanging();
					this._FK_Form = value;
					this.SendPropertyChanged("FK_Form");
					this.OnFK_FormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Column1Name", DbType="VarChar(MAX)")]
		public string Column1Name
		{
			get
			{
				return this._Column1Name;
			}
			set
			{
				if ((this._Column1Name != value))
				{
					this.OnColumn1NameChanging(value);
					this.SendPropertyChanging();
					this._Column1Name = value;
					this.SendPropertyChanged("Column1Name");
					this.OnColumn1NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Column2Name", DbType="VarChar(MAX)")]
		public string Column2Name
		{
			get
			{
				return this._Column2Name;
			}
			set
			{
				if ((this._Column2Name != value))
				{
					this.OnColumn2NameChanging(value);
					this.SendPropertyChanging();
					this._Column2Name = value;
					this.SendPropertyChanged("Column2Name");
					this.OnColumn2NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Column3Name", DbType="VarChar(MAX)")]
		public string Column3Name
		{
			get
			{
				return this._Column3Name;
			}
			set
			{
				if ((this._Column3Name != value))
				{
					this.OnColumn3NameChanging(value);
					this.SendPropertyChanging();
					this._Column3Name = value;
					this.SendPropertyChanged("Column3Name");
					this.OnColumn3NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Column4Name", DbType="VarChar(MAX)")]
		public string Column4Name
		{
			get
			{
				return this._Column4Name;
			}
			set
			{
				if ((this._Column4Name != value))
				{
					this.OnColumn4NameChanging(value);
					this.SendPropertyChanging();
					this._Column4Name = value;
					this.SendPropertyChanged("Column4Name");
					this.OnColumn4NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tables_Fields", Storage="_Fields", ThisKey="ID_Table", OtherKey="FK_Table")]
		public EntitySet<Fields> Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				this._Fields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_Tables", Storage="_Forms", ThisKey="FK_Form", OtherKey="ID_Form", IsForeignKey=true)]
		public Forms Forms
		{
			get
			{
				return this._Forms.Entity;
			}
			set
			{
				Forms previousValue = this._Forms.Entity;
				if (((previousValue != value) 
							|| (this._Forms.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forms.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._Forms.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._FK_Form = value.ID_Form;
					}
					else
					{
						this._FK_Form = default(Nullable<int>);
					}
					this.SendPropertyChanged("Forms");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fields(Fields entity)
		{
			this.SendPropertyChanging();
			entity.Tables = this;
		}
		
		private void detach_Fields(Fields entity)
		{
			this.SendPropertyChanging();
			entity.Tables = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_User;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private string _E_mail;
		
		private string _Pass;
		
		private string _Role;
		
		private EntitySet<Bids> _Bids;
		
		private EntitySet<Bids> _Bids1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public Users()
		{
			this._Bids = new EntitySet<Bids>(new Action<Bids>(this.attach_Bids), new Action<Bids>(this.detach_Bids));
			this._Bids1 = new EntitySet<Bids>(new Action<Bids>(this.attach_Bids1), new Action<Bids>(this.detach_Bids1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E-mail]", Storage="_E_mail", DbType="VarChar(MAX)")]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(MAX)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(MAX)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bids", Storage="_Bids", ThisKey="ID_User", OtherKey="FK_User")]
		public EntitySet<Bids> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Bids1", Storage="_Bids1", ThisKey="ID_User", OtherKey="FK_Expert")]
		public EntitySet<Bids> Bids1
		{
			get
			{
				return this._Bids1;
			}
			set
			{
				this._Bids1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Bids1(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = this;
		}
		
		private void detach_Bids1(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Users1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Values]")]
	public partial class Values : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Value;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<bool> _Active;
		
		private string _Value;
		
		private EntitySet<Field_ValueMapingTable> _Field_ValueMapingTable;
		
		private EntityRef<Bids> _Bids;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ValueChanging(int value);
    partial void OnID_ValueChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Values()
		{
			this._Field_ValueMapingTable = new EntitySet<Field_ValueMapingTable>(new Action<Field_ValueMapingTable>(this.attach_Field_ValueMapingTable), new Action<Field_ValueMapingTable>(this.detach_Field_ValueMapingTable));
			this._Bids = default(EntityRef<Bids>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Value", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Value
		{
			get
			{
				return this._ID_Value;
			}
			set
			{
				if ((this._ID_Value != value))
				{
					this.OnID_ValueChanging(value);
					this.SendPropertyChanging();
					this._ID_Value = value;
					this.SendPropertyChanged("ID_Value");
					this.OnID_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Values_Field_ValueMapingTable", Storage="_Field_ValueMapingTable", ThisKey="ID_Value", OtherKey="FK_Value")]
		public EntitySet<Field_ValueMapingTable> Field_ValueMapingTable
		{
			get
			{
				return this._Field_ValueMapingTable;
			}
			set
			{
				this._Field_ValueMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_Values", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.Values.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.Values.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Field_ValueMapingTable(Field_ValueMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Values = this;
		}
		
		private void detach_Field_ValueMapingTable(Field_ValueMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Values = null;
		}
	}
}
#pragma warning restore 1591
