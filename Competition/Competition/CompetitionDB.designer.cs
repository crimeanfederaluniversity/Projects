#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Competition
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Konkursy")]
	public partial class CompetitionDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAutoFilling(AutoFilling instance);
    partial void UpdateAutoFilling(AutoFilling instance);
    partial void DeleteAutoFilling(AutoFilling instance);
    partial void InsertBids(Bids instance);
    partial void UpdateBids(Bids instance);
    partial void DeleteBids(Bids instance);
    partial void InsertKonkursy(Konkursy instance);
    partial void UpdateKonkursy(Konkursy instance);
    partial void DeleteKonkursy(Konkursy instance);
    partial void InsertSmeta(Smeta instance);
    partial void UpdateSmeta(Smeta instance);
    partial void DeleteSmeta(Smeta instance);
    partial void InsertSmetaValue(SmetaValue instance);
    partial void UpdateSmetaValue(SmetaValue instance);
    partial void DeleteSmetaValue(SmetaValue instance);
    partial void InsertUser_BidMapingTable(User_BidMapingTable instance);
    partial void UpdateUser_BidMapingTable(User_BidMapingTable instance);
    partial void DeleteUser_BidMapingTable(User_BidMapingTable instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public CompetitionDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["KonkursyConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompetitionDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AutoFilling> AutoFilling
		{
			get
			{
				return this.GetTable<AutoFilling>();
			}
		}
		
		public System.Data.Linq.Table<Bids> Bids
		{
			get
			{
				return this.GetTable<Bids>();
			}
		}
		
		public System.Data.Linq.Table<Konkursy> Konkursy
		{
			get
			{
				return this.GetTable<Konkursy>();
			}
		}
		
		public System.Data.Linq.Table<Smeta> Smeta
		{
			get
			{
				return this.GetTable<Smeta>();
			}
		}
		
		public System.Data.Linq.Table<SmetaValue> SmetaValue
		{
			get
			{
				return this.GetTable<SmetaValue>();
			}
		}
		
		public System.Data.Linq.Table<User_BidMapingTable> User_BidMapingTable
		{
			get
			{
				return this.GetTable<User_BidMapingTable>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AutoFilling")]
	public partial class AutoFilling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Doc;
		
		private System.Nullable<int> _FK_Konkurs;
		
		private string _Name;
		
		private System.Nullable<int> _Page;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Konkursy> _Konkursy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_DocChanging(int value);
    partial void OnID_DocChanged();
    partial void OnFK_KonkursChanging(System.Nullable<int> value);
    partial void OnFK_KonkursChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPageChanging(System.Nullable<int> value);
    partial void OnPageChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public AutoFilling()
		{
			this._Konkursy = default(EntityRef<Konkursy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Doc", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Doc
		{
			get
			{
				return this._ID_Doc;
			}
			set
			{
				if ((this._ID_Doc != value))
				{
					this.OnID_DocChanging(value);
					this.SendPropertyChanging();
					this._ID_Doc = value;
					this.SendPropertyChanged("ID_Doc");
					this.OnID_DocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int")]
		public System.Nullable<int> FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Page", DbType="Int")]
		public System.Nullable<int> Page
		{
			get
			{
				return this._Page;
			}
			set
			{
				if ((this._Page != value))
				{
					this.OnPageChanging(value);
					this.SendPropertyChanging();
					this._Page = value;
					this.SendPropertyChanged("Page");
					this.OnPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_AutoFilling", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.AutoFilling.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.AutoFilling.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bids")]
	public partial class Bids : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Bid;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Konkurs;
		
		private string _Status;
		
		private string _Coment;
		
		private EntitySet<SmetaValue> _SmetaValue;
		
		private EntitySet<User_BidMapingTable> _User_BidMapingTable;
		
		private EntityRef<Konkursy> _Konkursy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_BidChanging(int value);
    partial void OnID_BidChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_KonkursChanging(System.Nullable<int> value);
    partial void OnFK_KonkursChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnComentChanging(string value);
    partial void OnComentChanged();
    #endregion
		
		public Bids()
		{
			this._SmetaValue = new EntitySet<SmetaValue>(new Action<SmetaValue>(this.attach_SmetaValue), new Action<SmetaValue>(this.detach_SmetaValue));
			this._User_BidMapingTable = new EntitySet<User_BidMapingTable>(new Action<User_BidMapingTable>(this.attach_User_BidMapingTable), new Action<User_BidMapingTable>(this.detach_User_BidMapingTable));
			this._Konkursy = default(EntityRef<Konkursy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Bid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Bid
		{
			get
			{
				return this._ID_Bid;
			}
			set
			{
				if ((this._ID_Bid != value))
				{
					this.OnID_BidChanging(value);
					this.SendPropertyChanging();
					this._ID_Bid = value;
					this.SendPropertyChanged("ID_Bid");
					this.OnID_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int")]
		public System.Nullable<int> FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(MAX)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coment", DbType="VarChar(MAX)")]
		public string Coment
		{
			get
			{
				return this._Coment;
			}
			set
			{
				if ((this._Coment != value))
				{
					this.OnComentChanging(value);
					this.SendPropertyChanging();
					this._Coment = value;
					this.SendPropertyChanged("Coment");
					this.OnComentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_SmetaValue", Storage="_SmetaValue", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<SmetaValue> SmetaValue
		{
			get
			{
				return this._SmetaValue;
			}
			set
			{
				this._SmetaValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_User_BidMapingTable", Storage="_User_BidMapingTable", ThisKey="ID_Bid", OtherKey="FK_Bid")]
		public EntitySet<User_BidMapingTable> User_BidMapingTable
		{
			get
			{
				return this._User_BidMapingTable;
			}
			set
			{
				this._User_BidMapingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Bids", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
		
		private void attach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Bids = this;
		}
		
		private void detach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Bids = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Konkursy")]
	public partial class Konkursy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Konkurs;
		
		private string _Number;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _FK_Curator;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<AutoFilling> _AutoFilling;
		
		private EntitySet<Bids> _Bids;
		
		private EntitySet<Smeta> _Smeta;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_KonkursChanging(int value);
    partial void OnID_KonkursChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnFK_CuratorChanging(System.Nullable<int> value);
    partial void OnFK_CuratorChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Konkursy()
		{
			this._AutoFilling = new EntitySet<AutoFilling>(new Action<AutoFilling>(this.attach_AutoFilling), new Action<AutoFilling>(this.detach_AutoFilling));
			this._Bids = new EntitySet<Bids>(new Action<Bids>(this.attach_Bids), new Action<Bids>(this.detach_Bids));
			this._Smeta = new EntitySet<Smeta>(new Action<Smeta>(this.attach_Smeta), new Action<Smeta>(this.detach_Smeta));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Konkurs", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Konkurs
		{
			get
			{
				return this._ID_Konkurs;
			}
			set
			{
				if ((this._ID_Konkurs != value))
				{
					this.OnID_KonkursChanging(value);
					this.SendPropertyChanging();
					this._ID_Konkurs = value;
					this.SendPropertyChanged("ID_Konkurs");
					this.OnID_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="VarChar(MAX)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Curator", DbType="Int")]
		public System.Nullable<int> FK_Curator
		{
			get
			{
				return this._FK_Curator;
			}
			set
			{
				if ((this._FK_Curator != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CuratorChanging(value);
					this.SendPropertyChanging();
					this._FK_Curator = value;
					this.SendPropertyChanged("FK_Curator");
					this.OnFK_CuratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_AutoFilling", Storage="_AutoFilling", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<AutoFilling> AutoFilling
		{
			get
			{
				return this._AutoFilling;
			}
			set
			{
				this._AutoFilling.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Bids", Storage="_Bids", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<Bids> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Smeta", Storage="_Smeta", ThisKey="ID_Konkurs", OtherKey="FK_Konkurs")]
		public EntitySet<Smeta> Smeta
		{
			get
			{
				return this._Smeta;
			}
			set
			{
				this._Smeta.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Konkursy", Storage="_Users", ThisKey="FK_Curator", OtherKey="ID_User", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Konkursy.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Konkursy.Add(this);
						this._FK_Curator = value.ID_User;
					}
					else
					{
						this._FK_Curator = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AutoFilling(AutoFilling entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_AutoFilling(AutoFilling entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
		
		private void attach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_Bids(Bids entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
		
		private void attach_Smeta(Smeta entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = this;
		}
		
		private void detach_Smeta(Smeta entity)
		{
			this.SendPropertyChanging();
			entity.Konkursy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Smeta")]
	public partial class Smeta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_State;
		
		private string _Name_state;
		
		private System.Nullable<bool> _Type_state;
		
		private string _Uniqvalue;
		
		private int _FK_Konkurs;
		
		private bool _Active;
		
		private EntitySet<SmetaValue> _SmetaValue;
		
		private EntityRef<Konkursy> _Konkursy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_StateChanging(int value);
    partial void OnID_StateChanged();
    partial void OnName_stateChanging(string value);
    partial void OnName_stateChanged();
    partial void OnType_stateChanging(System.Nullable<bool> value);
    partial void OnType_stateChanged();
    partial void OnUniqvalueChanging(string value);
    partial void OnUniqvalueChanged();
    partial void OnFK_KonkursChanging(int value);
    partial void OnFK_KonkursChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Smeta()
		{
			this._SmetaValue = new EntitySet<SmetaValue>(new Action<SmetaValue>(this.attach_SmetaValue), new Action<SmetaValue>(this.detach_SmetaValue));
			this._Konkursy = default(EntityRef<Konkursy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_State", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_State
		{
			get
			{
				return this._ID_State;
			}
			set
			{
				if ((this._ID_State != value))
				{
					this.OnID_StateChanging(value);
					this.SendPropertyChanging();
					this._ID_State = value;
					this.SendPropertyChanged("ID_State");
					this.OnID_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name_state", DbType="VarChar(MAX)")]
		public string Name_state
		{
			get
			{
				return this._Name_state;
			}
			set
			{
				if ((this._Name_state != value))
				{
					this.OnName_stateChanging(value);
					this.SendPropertyChanging();
					this._Name_state = value;
					this.SendPropertyChanged("Name_state");
					this.OnName_stateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_state", DbType="Bit")]
		public System.Nullable<bool> Type_state
		{
			get
			{
				return this._Type_state;
			}
			set
			{
				if ((this._Type_state != value))
				{
					this.OnType_stateChanging(value);
					this.SendPropertyChanging();
					this._Type_state = value;
					this.SendPropertyChanged("Type_state");
					this.OnType_stateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uniqvalue", DbType="VarChar(MAX)")]
		public string Uniqvalue
		{
			get
			{
				return this._Uniqvalue;
			}
			set
			{
				if ((this._Uniqvalue != value))
				{
					this.OnUniqvalueChanging(value);
					this.SendPropertyChanging();
					this._Uniqvalue = value;
					this.SendPropertyChanged("Uniqvalue");
					this.OnUniqvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Konkurs", DbType="Int NOT NULL")]
		public int FK_Konkurs
		{
			get
			{
				return this._FK_Konkurs;
			}
			set
			{
				if ((this._FK_Konkurs != value))
				{
					if (this._Konkursy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_KonkursChanging(value);
					this.SendPropertyChanging();
					this._FK_Konkurs = value;
					this.SendPropertyChanged("FK_Konkurs");
					this.OnFK_KonkursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Smeta_SmetaValue", Storage="_SmetaValue", ThisKey="ID_State", OtherKey="FK_State")]
		public EntitySet<SmetaValue> SmetaValue
		{
			get
			{
				return this._SmetaValue;
			}
			set
			{
				this._SmetaValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Konkursy_Smeta", Storage="_Konkursy", ThisKey="FK_Konkurs", OtherKey="ID_Konkurs", IsForeignKey=true)]
		public Konkursy Konkursy
		{
			get
			{
				return this._Konkursy.Entity;
			}
			set
			{
				Konkursy previousValue = this._Konkursy.Entity;
				if (((previousValue != value) 
							|| (this._Konkursy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Konkursy.Entity = null;
						previousValue.Smeta.Remove(this);
					}
					this._Konkursy.Entity = value;
					if ((value != null))
					{
						value.Smeta.Add(this);
						this._FK_Konkurs = value.ID_Konkurs;
					}
					else
					{
						this._FK_Konkurs = default(int);
					}
					this.SendPropertyChanged("Konkursy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Smeta = this;
		}
		
		private void detach_SmetaValue(SmetaValue entity)
		{
			this.SendPropertyChanging();
			entity.Smeta = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SmetaValue")]
	public partial class SmetaValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Value;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<int> _FK_State;
		
		private System.Nullable<double> _Value;
		
		private EntityRef<Bids> _Bids;
		
		private EntityRef<Smeta> _Smeta;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ValueChanging(int value);
    partial void OnID_ValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnFK_StateChanging(System.Nullable<int> value);
    partial void OnFK_StateChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    #endregion
		
		public SmetaValue()
		{
			this._Bids = default(EntityRef<Bids>);
			this._Smeta = default(EntityRef<Smeta>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Value", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Value
		{
			get
			{
				return this._ID_Value;
			}
			set
			{
				if ((this._ID_Value != value))
				{
					this.OnID_ValueChanging(value);
					this.SendPropertyChanging();
					this._ID_Value = value;
					this.SendPropertyChanged("ID_Value");
					this.OnID_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_State", DbType="Int")]
		public System.Nullable<int> FK_State
		{
			get
			{
				return this._FK_State;
			}
			set
			{
				if ((this._FK_State != value))
				{
					if (this._Smeta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StateChanging(value);
					this.SendPropertyChanging();
					this._FK_State = value;
					this.SendPropertyChanged("FK_State");
					this.OnFK_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_SmetaValue", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.SmetaValue.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.SmetaValue.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Smeta_SmetaValue", Storage="_Smeta", ThisKey="FK_State", OtherKey="ID_State", IsForeignKey=true)]
		public Smeta Smeta
		{
			get
			{
				return this._Smeta.Entity;
			}
			set
			{
				Smeta previousValue = this._Smeta.Entity;
				if (((previousValue != value) 
							|| (this._Smeta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Smeta.Entity = null;
						previousValue.SmetaValue.Remove(this);
					}
					this._Smeta.Entity = value;
					if ((value != null))
					{
						value.SmetaValue.Add(this);
						this._FK_State = value.ID_State;
					}
					else
					{
						this._FK_State = default(Nullable<int>);
					}
					this.SendPropertyChanged("Smeta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User-BidMapingTable]")]
	public partial class User_BidMapingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_User_Bid;
		
		private System.Nullable<int> _FK_User;
		
		private System.Nullable<int> _FK_Bid;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Bids> _Bids;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_User_BidChanging(int value);
    partial void OnID_User_BidChanged();
    partial void OnFK_UserChanging(System.Nullable<int> value);
    partial void OnFK_UserChanged();
    partial void OnFK_BidChanging(System.Nullable<int> value);
    partial void OnFK_BidChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public User_BidMapingTable()
		{
			this._Bids = default(EntityRef<Bids>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID_User-Bid]", Storage="_ID_User_Bid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_User_Bid
		{
			get
			{
				return this._ID_User_Bid;
			}
			set
			{
				if ((this._ID_User_Bid != value))
				{
					this.OnID_User_BidChanging(value);
					this.SendPropertyChanging();
					this._ID_User_Bid = value;
					this.SendPropertyChanged("ID_User_Bid");
					this.OnID_User_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_User", DbType="Int")]
		public System.Nullable<int> FK_User
		{
			get
			{
				return this._FK_User;
			}
			set
			{
				if ((this._FK_User != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserChanging(value);
					this.SendPropertyChanging();
					this._FK_User = value;
					this.SendPropertyChanged("FK_User");
					this.OnFK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Bid", DbType="Int")]
		public System.Nullable<int> FK_Bid
		{
			get
			{
				return this._FK_Bid;
			}
			set
			{
				if ((this._FK_Bid != value))
				{
					if (this._Bids.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BidChanging(value);
					this.SendPropertyChanging();
					this._FK_Bid = value;
					this.SendPropertyChanged("FK_Bid");
					this.OnFK_BidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bids_User_BidMapingTable", Storage="_Bids", ThisKey="FK_Bid", OtherKey="ID_Bid", IsForeignKey=true)]
		public Bids Bids
		{
			get
			{
				return this._Bids.Entity;
			}
			set
			{
				Bids previousValue = this._Bids.Entity;
				if (((previousValue != value) 
							|| (this._Bids.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bids.Entity = null;
						previousValue.User_BidMapingTable.Remove(this);
					}
					this._Bids.Entity = value;
					if ((value != null))
					{
						value.User_BidMapingTable.Add(this);
						this._FK_Bid = value.ID_Bid;
					}
					else
					{
						this._FK_Bid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bids");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_User_BidMapingTable", Storage="_Users", ThisKey="FK_User", OtherKey="ID_User", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.User_BidMapingTable.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.User_BidMapingTable.Add(this);
						this._FK_User = value.ID_User;
					}
					else
					{
						this._FK_User = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_User;
		
		private string _Name;
		
		private System.Nullable<int> _Role;
		
		private string _Post;
		
		private string _PlaceofWork;
		
		private string _E_mail;
		
		private string _Pass;
		
		private string _Function;
		
		private string _PayPerHour;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Konkursy> _Konkursy;
		
		private EntitySet<User_BidMapingTable> _User_BidMapingTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRoleChanging(System.Nullable<int> value);
    partial void OnRoleChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnPlaceofWorkChanging(string value);
    partial void OnPlaceofWorkChanged();
    partial void OnE_mailChanging(string value);
    partial void OnE_mailChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnFunctionChanging(string value);
    partial void OnFunctionChanged();
    partial void OnPayPerHourChanging(string value);
    partial void OnPayPerHourChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Users()
		{
			this._Konkursy = new EntitySet<Konkursy>(new Action<Konkursy>(this.attach_Konkursy), new Action<Konkursy>(this.detach_Konkursy));
			this._User_BidMapingTable = new EntitySet<User_BidMapingTable>(new Action<User_BidMapingTable>(this.attach_User_BidMapingTable), new Action<User_BidMapingTable>(this.detach_User_BidMapingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int")]
		public System.Nullable<int> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Post", DbType="VarChar(MAX)")]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceofWork", DbType="VarChar(MAX)")]
		public string PlaceofWork
		{
			get
			{
				return this._PlaceofWork;
			}
			set
			{
				if ((this._PlaceofWork != value))
				{
					this.OnPlaceofWorkChanging(value);
					this.SendPropertyChanging();
					this._PlaceofWork = value;
					this.SendPropertyChanged("PlaceofWork");
					this.OnPlaceofWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[E-mail]", Storage="_E_mail", DbType="VarChar(MAX)")]
		public string E_mail
		{
			get
			{
				return this._E_mail;
			}
			set
			{
				if ((this._E_mail != value))
				{
					this.OnE_mailChanging(value);
					this.SendPropertyChanging();
					this._E_mail = value;
					this.SendPropertyChanged("E_mail");
					this.OnE_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(MAX)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Function]", Storage="_Function", DbType="VarChar(MAX)")]
		public string Function
		{
			get
			{
				return this._Function;
			}
			set
			{
				if ((this._Function != value))
				{
					this.OnFunctionChanging(value);
					this.SendPropertyChanging();
					this._Function = value;
					this.SendPropertyChanged("Function");
					this.OnFunctionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPerHour", DbType="VarChar(MAX)")]
		public string PayPerHour
		{
			get
			{
				return this._PayPerHour;
			}
			set
			{
				if ((this._PayPerHour != value))
				{
					this.OnPayPerHourChanging(value);
					this.SendPropertyChanging();
					this._PayPerHour = value;
					this.SendPropertyChanged("PayPerHour");
					this.OnPayPerHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Konkursy", Storage="_Konkursy", ThisKey="ID_User", OtherKey="FK_Curator")]
		public EntitySet<Konkursy> Konkursy
		{
			get
			{
				return this._Konkursy;
			}
			set
			{
				this._Konkursy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_User_BidMapingTable", Storage="_User_BidMapingTable", ThisKey="ID_User", OtherKey="FK_User")]
		public EntitySet<User_BidMapingTable> User_BidMapingTable
		{
			get
			{
				return this._User_BidMapingTable;
			}
			set
			{
				this._User_BidMapingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Konkursy(Konkursy entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Konkursy(Konkursy entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_User_BidMapingTable(User_BidMapingTable entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
