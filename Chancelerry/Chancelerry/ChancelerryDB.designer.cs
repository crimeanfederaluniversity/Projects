#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chancelerry
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ChancelerryDB_Release")]
	public partial class ChancelerryDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCollectedFieldsValue(CollectedFieldsValue instance);
    partial void UpdateCollectedFieldsValue(CollectedFieldsValue instance);
    partial void DeleteCollectedFieldsValue(CollectedFieldsValue instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertRegister(Register instance);
    partial void UpdateRegister(Register instance);
    partial void DeleteRegister(Register instance);
    partial void InsertRegisters_Field(Registers_Field instance);
    partial void UpdateRegisters_Field(Registers_Field instance);
    partial void DeleteRegisters_Field(Registers_Field instance);
    partial void InsertRegisterViewForm(RegisterViewForm instance);
    partial void UpdateRegisterViewForm(RegisterViewForm instance);
    partial void DeleteRegisterViewForm(RegisterViewForm instance);
    #endregion
		
		public ChancelerryDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ChancelerryDB_ReleaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ChancelerryDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChancelerryDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChancelerryDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChancelerryDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CollectedFieldsValue> CollectedFieldsValues
		{
			get
			{
				return this.GetTable<CollectedFieldsValue>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Field> Fields
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<Register> Registers
		{
			get
			{
				return this.GetTable<Register>();
			}
		}
		
		public System.Data.Linq.Table<Registers_Field> Registers_Fields
		{
			get
			{
				return this.GetTable<Registers_Field>();
			}
		}
		
		public System.Data.Linq.Table<RegisterViewForm> RegisterViewForms
		{
			get
			{
				return this.GetTable<RegisterViewForm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedFieldsValues")]
	public partial class CollectedFieldsValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private bool _active;
		
		private int _fk_user;
		
		private int _fk_register;
		
		private int _fk_field;
		
		private int _number;
		
		private int _instance;
		
		private System.DateTime _creationDate;
		
		private string _value;
		
		private EntityRef<User> _User;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<Register> _Register;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_userChanging(int value);
    partial void Onfk_userChanged();
    partial void Onfk_registerChanging(int value);
    partial void Onfk_registerChanged();
    partial void Onfk_fieldChanging(int value);
    partial void Onfk_fieldChanged();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    partial void OninstanceChanging(int value);
    partial void OninstanceChanged();
    partial void OncreationDateChanging(System.DateTime value);
    partial void OncreationDateChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public CollectedFieldsValue()
		{
			this._User = default(EntityRef<User>);
			this._Field = default(EntityRef<Field>);
			this._Register = default(EntityRef<Register>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_user", DbType="Int NOT NULL")]
		public int fk_user
		{
			get
			{
				return this._fk_user;
			}
			set
			{
				if ((this._fk_user != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_userChanging(value);
					this.SendPropertyChanging();
					this._fk_user = value;
					this.SendPropertyChanged("fk_user");
					this.Onfk_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_register", DbType="Int NOT NULL")]
		public int fk_register
		{
			get
			{
				return this._fk_register;
			}
			set
			{
				if ((this._fk_register != value))
				{
					if (this._Register.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_registerChanging(value);
					this.SendPropertyChanging();
					this._fk_register = value;
					this.SendPropertyChanged("fk_register");
					this.Onfk_registerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_field", DbType="Int NOT NULL")]
		public int fk_field
		{
			get
			{
				return this._fk_field;
			}
			set
			{
				if ((this._fk_field != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_fieldChanging(value);
					this.SendPropertyChanging();
					this._fk_field = value;
					this.SendPropertyChanged("fk_field");
					this.Onfk_fieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL")]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instance", DbType="Int NOT NULL")]
		public int instance
		{
			get
			{
				return this._instance;
			}
			set
			{
				if ((this._instance != value))
				{
					this.OninstanceChanging(value);
					this.SendPropertyChanging();
					this._instance = value;
					this.SendPropertyChanged("instance");
					this.OninstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creationDate", DbType="Date NOT NULL")]
		public System.DateTime creationDate
		{
			get
			{
				return this._creationDate;
			}
			set
			{
				if ((this._creationDate != value))
				{
					this.OncreationDateChanging(value);
					this.SendPropertyChanging();
					this._creationDate = value;
					this.SendPropertyChanged("creationDate");
					this.OncreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(50)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CollectedFieldsValue", Storage="_User", ThisKey="fk_user", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CollectedFieldsValues.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CollectedFieldsValues.Add(this);
						this._fk_user = value.userID;
					}
					else
					{
						this._fk_user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_CollectedFieldsValue", Storage="_Field", ThisKey="fk_field", OtherKey="fieldID", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.CollectedFieldsValues.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.CollectedFieldsValues.Add(this);
						this._fk_field = value.fieldID;
					}
					else
					{
						this._fk_field = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_CollectedFieldsValue", Storage="_Register", ThisKey="fk_register", OtherKey="registerID", IsForeignKey=true)]
		public Register Register
		{
			get
			{
				return this._Register.Entity;
			}
			set
			{
				Register previousValue = this._Register.Entity;
				if (((previousValue != value) 
							|| (this._Register.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Register.Entity = null;
						previousValue.CollectedFieldsValues.Remove(this);
					}
					this._Register.Entity = value;
					if ((value != null))
					{
						value.CollectedFieldsValues.Add(this);
						this._fk_register = value.registerID;
					}
					else
					{
						this._fk_register = default(int);
					}
					this.SendPropertyChanged("Register");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private bool _active;
		
		private string _name;
		
		private string _login;
		
		private string _password;
		
		private string _email;
		
		private System.Nullable<int> _group;
		
		private EntitySet<CollectedFieldsValue> _CollectedFieldsValues;
		
		private EntitySet<RegisterViewForm> _RegisterViewForms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OngroupChanging(System.Nullable<int> value);
    partial void OngroupChanged();
    #endregion
		
		public User()
		{
			this._CollectedFieldsValues = new EntitySet<CollectedFieldsValue>(new Action<CollectedFieldsValue>(this.attach_CollectedFieldsValues), new Action<CollectedFieldsValue>(this.detach_CollectedFieldsValues));
			this._RegisterViewForms = new EntitySet<RegisterViewForm>(new Action<RegisterViewForm>(this.attach_RegisterViewForms), new Action<RegisterViewForm>(this.detach_RegisterViewForms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[group]", Storage="_group", DbType="Int")]
		public System.Nullable<int> group
		{
			get
			{
				return this._group;
			}
			set
			{
				if ((this._group != value))
				{
					this.OngroupChanging(value);
					this.SendPropertyChanging();
					this._group = value;
					this.SendPropertyChanged("group");
					this.OngroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CollectedFieldsValue", Storage="_CollectedFieldsValues", ThisKey="userID", OtherKey="fk_user")]
		public EntitySet<CollectedFieldsValue> CollectedFieldsValues
		{
			get
			{
				return this._CollectedFieldsValues;
			}
			set
			{
				this._CollectedFieldsValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RegisterViewForm", Storage="_RegisterViewForms", ThisKey="userID", OtherKey="fk_user")]
		public EntitySet<RegisterViewForm> RegisterViewForms
		{
			get
			{
				return this._RegisterViewForms;
			}
			set
			{
				this._RegisterViewForms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedFieldsValues(CollectedFieldsValue entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CollectedFieldsValues(CollectedFieldsValue entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RegisterViewForms(RegisterViewForm entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RegisterViewForms(RegisterViewForm entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fields")]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fieldID;
		
		private bool _active;
		
		private string _name;
		
		private string _description;
		
		private int _type;
		
		private EntitySet<CollectedFieldsValue> _CollectedFieldsValues;
		
		private EntitySet<Registers_Field> _Registers_Fields;
		
		private EntitySet<RegisterViewForm> _RegisterViewForms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfieldIDChanging(int value);
    partial void OnfieldIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    #endregion
		
		public Field()
		{
			this._CollectedFieldsValues = new EntitySet<CollectedFieldsValue>(new Action<CollectedFieldsValue>(this.attach_CollectedFieldsValues), new Action<CollectedFieldsValue>(this.detach_CollectedFieldsValues));
			this._Registers_Fields = new EntitySet<Registers_Field>(new Action<Registers_Field>(this.attach_Registers_Fields), new Action<Registers_Field>(this.detach_Registers_Fields));
			this._RegisterViewForms = new EntitySet<RegisterViewForm>(new Action<RegisterViewForm>(this.attach_RegisterViewForms), new Action<RegisterViewForm>(this.detach_RegisterViewForms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fieldID
		{
			get
			{
				return this._fieldID;
			}
			set
			{
				if ((this._fieldID != value))
				{
					this.OnfieldIDChanging(value);
					this.SendPropertyChanging();
					this._fieldID = value;
					this.SendPropertyChanged("fieldID");
					this.OnfieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_CollectedFieldsValue", Storage="_CollectedFieldsValues", ThisKey="fieldID", OtherKey="fk_field")]
		public EntitySet<CollectedFieldsValue> CollectedFieldsValues
		{
			get
			{
				return this._CollectedFieldsValues;
			}
			set
			{
				this._CollectedFieldsValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Registers_Field", Storage="_Registers_Fields", ThisKey="fieldID", OtherKey="fk_field")]
		public EntitySet<Registers_Field> Registers_Fields
		{
			get
			{
				return this._Registers_Fields;
			}
			set
			{
				this._Registers_Fields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_RegisterViewForm", Storage="_RegisterViewForms", ThisKey="fieldID", OtherKey="fk_field")]
		public EntitySet<RegisterViewForm> RegisterViewForms
		{
			get
			{
				return this._RegisterViewForms;
			}
			set
			{
				this._RegisterViewForms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedFieldsValues(CollectedFieldsValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_CollectedFieldsValues(CollectedFieldsValue entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_Registers_Fields(Registers_Field entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_Registers_Fields(Registers_Field entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_RegisterViewForms(RegisterViewForm entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_RegisterViewForms(RegisterViewForm entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registers")]
	public partial class Register : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _registerID;
		
		private bool _active;
		
		private string _name;
		
		private EntitySet<CollectedFieldsValue> _CollectedFieldsValues;
		
		private EntitySet<Registers_Field> _Registers_Fields;
		
		private EntitySet<RegisterViewForm> _RegisterViewForms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnregisterIDChanging(int value);
    partial void OnregisterIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Register()
		{
			this._CollectedFieldsValues = new EntitySet<CollectedFieldsValue>(new Action<CollectedFieldsValue>(this.attach_CollectedFieldsValues), new Action<CollectedFieldsValue>(this.detach_CollectedFieldsValues));
			this._Registers_Fields = new EntitySet<Registers_Field>(new Action<Registers_Field>(this.attach_Registers_Fields), new Action<Registers_Field>(this.detach_Registers_Fields));
			this._RegisterViewForms = new EntitySet<RegisterViewForm>(new Action<RegisterViewForm>(this.attach_RegisterViewForms), new Action<RegisterViewForm>(this.detach_RegisterViewForms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int registerID
		{
			get
			{
				return this._registerID;
			}
			set
			{
				if ((this._registerID != value))
				{
					this.OnregisterIDChanging(value);
					this.SendPropertyChanging();
					this._registerID = value;
					this.SendPropertyChanged("registerID");
					this.OnregisterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_CollectedFieldsValue", Storage="_CollectedFieldsValues", ThisKey="registerID", OtherKey="fk_register")]
		public EntitySet<CollectedFieldsValue> CollectedFieldsValues
		{
			get
			{
				return this._CollectedFieldsValues;
			}
			set
			{
				this._CollectedFieldsValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_Registers_Field", Storage="_Registers_Fields", ThisKey="registerID", OtherKey="fk_register")]
		public EntitySet<Registers_Field> Registers_Fields
		{
			get
			{
				return this._Registers_Fields;
			}
			set
			{
				this._Registers_Fields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_RegisterViewForm", Storage="_RegisterViewForms", ThisKey="registerID", OtherKey="fk_register")]
		public EntitySet<RegisterViewForm> RegisterViewForms
		{
			get
			{
				return this._RegisterViewForms;
			}
			set
			{
				this._RegisterViewForms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedFieldsValues(CollectedFieldsValue entity)
		{
			this.SendPropertyChanging();
			entity.Register = this;
		}
		
		private void detach_CollectedFieldsValues(CollectedFieldsValue entity)
		{
			this.SendPropertyChanging();
			entity.Register = null;
		}
		
		private void attach_Registers_Fields(Registers_Field entity)
		{
			this.SendPropertyChanging();
			entity.Register = this;
		}
		
		private void detach_Registers_Fields(Registers_Field entity)
		{
			this.SendPropertyChanging();
			entity.Register = null;
		}
		
		private void attach_RegisterViewForms(RegisterViewForm entity)
		{
			this.SendPropertyChanging();
			entity.Register = this;
		}
		
		private void detach_RegisterViewForms(RegisterViewForm entity)
		{
			this.SendPropertyChanging();
			entity.Register = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registers_Fields")]
	public partial class Registers_Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private bool _active;
		
		private int _fk_register;
		
		private int _fk_field;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<Register> _Register;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_registerChanging(int value);
    partial void Onfk_registerChanged();
    partial void Onfk_fieldChanging(int value);
    partial void Onfk_fieldChanged();
    #endregion
		
		public Registers_Field()
		{
			this._Field = default(EntityRef<Field>);
			this._Register = default(EntityRef<Register>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_register", DbType="Int NOT NULL")]
		public int fk_register
		{
			get
			{
				return this._fk_register;
			}
			set
			{
				if ((this._fk_register != value))
				{
					if (this._Register.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_registerChanging(value);
					this.SendPropertyChanging();
					this._fk_register = value;
					this.SendPropertyChanged("fk_register");
					this.Onfk_registerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_field", DbType="Int NOT NULL")]
		public int fk_field
		{
			get
			{
				return this._fk_field;
			}
			set
			{
				if ((this._fk_field != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_fieldChanging(value);
					this.SendPropertyChanging();
					this._fk_field = value;
					this.SendPropertyChanged("fk_field");
					this.Onfk_fieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_Registers_Field", Storage="_Field", ThisKey="fk_field", OtherKey="fieldID", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.Registers_Fields.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.Registers_Fields.Add(this);
						this._fk_field = value.fieldID;
					}
					else
					{
						this._fk_field = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_Registers_Field", Storage="_Register", ThisKey="fk_register", OtherKey="registerID", IsForeignKey=true)]
		public Register Register
		{
			get
			{
				return this._Register.Entity;
			}
			set
			{
				Register previousValue = this._Register.Entity;
				if (((previousValue != value) 
							|| (this._Register.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Register.Entity = null;
						previousValue.Registers_Fields.Remove(this);
					}
					this._Register.Entity = value;
					if ((value != null))
					{
						value.Registers_Fields.Add(this);
						this._fk_register = value.registerID;
					}
					else
					{
						this._fk_register = default(int);
					}
					this.SendPropertyChanged("Register");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegisterViewForm")]
	public partial class RegisterViewForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private bool _active;
		
		private int _fk_register;
		
		private int _fk_user;
		
		private int _fk_field;
		
		private bool _isHide;
		
		private int _height;
		
		private int _width;
		
		private bool _mandatory;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<Register> _Register;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_registerChanging(int value);
    partial void Onfk_registerChanged();
    partial void Onfk_userChanging(int value);
    partial void Onfk_userChanged();
    partial void Onfk_fieldChanging(int value);
    partial void Onfk_fieldChanged();
    partial void OnisHideChanging(bool value);
    partial void OnisHideChanged();
    partial void OnheightChanging(int value);
    partial void OnheightChanged();
    partial void OnwidthChanging(int value);
    partial void OnwidthChanged();
    partial void OnmandatoryChanging(bool value);
    partial void OnmandatoryChanged();
    #endregion
		
		public RegisterViewForm()
		{
			this._Field = default(EntityRef<Field>);
			this._Register = default(EntityRef<Register>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_register", DbType="Int NOT NULL")]
		public int fk_register
		{
			get
			{
				return this._fk_register;
			}
			set
			{
				if ((this._fk_register != value))
				{
					if (this._Register.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_registerChanging(value);
					this.SendPropertyChanging();
					this._fk_register = value;
					this.SendPropertyChanged("fk_register");
					this.Onfk_registerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_user", DbType="Int NOT NULL")]
		public int fk_user
		{
			get
			{
				return this._fk_user;
			}
			set
			{
				if ((this._fk_user != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_userChanging(value);
					this.SendPropertyChanging();
					this._fk_user = value;
					this.SendPropertyChanged("fk_user");
					this.Onfk_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_field", DbType="Int NOT NULL")]
		public int fk_field
		{
			get
			{
				return this._fk_field;
			}
			set
			{
				if ((this._fk_field != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_fieldChanging(value);
					this.SendPropertyChanging();
					this._fk_field = value;
					this.SendPropertyChanged("fk_field");
					this.Onfk_fieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHide", DbType="Bit NOT NULL")]
		public bool isHide
		{
			get
			{
				return this._isHide;
			}
			set
			{
				if ((this._isHide != value))
				{
					this.OnisHideChanging(value);
					this.SendPropertyChanging();
					this._isHide = value;
					this.SendPropertyChanged("isHide");
					this.OnisHideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Int NOT NULL")]
		public int height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Int NOT NULL")]
		public int width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mandatory", DbType="Bit NOT NULL")]
		public bool mandatory
		{
			get
			{
				return this._mandatory;
			}
			set
			{
				if ((this._mandatory != value))
				{
					this.OnmandatoryChanging(value);
					this.SendPropertyChanging();
					this._mandatory = value;
					this.SendPropertyChanged("mandatory");
					this.OnmandatoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Field_RegisterViewForm", Storage="_Field", ThisKey="fk_field", OtherKey="fieldID", IsForeignKey=true)]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.RegisterViewForms.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.RegisterViewForms.Add(this);
						this._fk_field = value.fieldID;
					}
					else
					{
						this._fk_field = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Register_RegisterViewForm", Storage="_Register", ThisKey="fk_register", OtherKey="registerID", IsForeignKey=true)]
		public Register Register
		{
			get
			{
				return this._Register.Entity;
			}
			set
			{
				Register previousValue = this._Register.Entity;
				if (((previousValue != value) 
							|| (this._Register.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Register.Entity = null;
						previousValue.RegisterViewForms.Remove(this);
					}
					this._Register.Entity = value;
					if ((value != null))
					{
						value.RegisterViewForms.Add(this);
						this._fk_register = value.registerID;
					}
					else
					{
						this._fk_register = default(int);
					}
					this.SendPropertyChanged("Register");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RegisterViewForm", Storage="_User", ThisKey="fk_user", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RegisterViewForms.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RegisterViewForms.Add(this);
						this._fk_user = value.userID;
					}
					else
					{
						this._fk_user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
