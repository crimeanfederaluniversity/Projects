#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KPIWeb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Release_")]
	public partial class KPIWebDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplictionTypes(ApplictionTypes instance);
    partial void UpdateApplictionTypes(ApplictionTypes instance);
    partial void DeleteApplictionTypes(ApplictionTypes instance);
    partial void InsertBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void UpdateBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void DeleteBasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable instance);
    partial void InsertBasicParametersTable(BasicParametersTable instance);
    partial void UpdateBasicParametersTable(BasicParametersTable instance);
    partial void DeleteBasicParametersTable(BasicParametersTable instance);
    partial void InsertBasicParametrAdditional(BasicParametrAdditional instance);
    partial void UpdateBasicParametrAdditional(BasicParametrAdditional instance);
    partial void DeleteBasicParametrAdditional(BasicParametrAdditional instance);
    partial void InsertBasicParametrsAndSubdivisionClassMappingTable(BasicParametrsAndSubdivisionClassMappingTable instance);
    partial void UpdateBasicParametrsAndSubdivisionClassMappingTable(BasicParametrsAndSubdivisionClassMappingTable instance);
    partial void DeleteBasicParametrsAndSubdivisionClassMappingTable(BasicParametrsAndSubdivisionClassMappingTable instance);
    partial void InsertBasicParametrsAndUsersMapping(BasicParametrsAndUsersMapping instance);
    partial void UpdateBasicParametrsAndUsersMapping(BasicParametrsAndUsersMapping instance);
    partial void DeleteBasicParametrsAndUsersMapping(BasicParametrsAndUsersMapping instance);
    partial void InsertCalculatedParametrs(CalculatedParametrs instance);
    partial void UpdateCalculatedParametrs(CalculatedParametrs instance);
    partial void DeleteCalculatedParametrs(CalculatedParametrs instance);
    partial void InsertCalculatedParametrsAndRolesMappingTable(CalculatedParametrsAndRolesMappingTable instance);
    partial void UpdateCalculatedParametrsAndRolesMappingTable(CalculatedParametrsAndRolesMappingTable instance);
    partial void DeleteCalculatedParametrsAndRolesMappingTable(CalculatedParametrsAndRolesMappingTable instance);
    partial void InsertCalculatedParametrsAndUsersMapping(CalculatedParametrsAndUsersMapping instance);
    partial void UpdateCalculatedParametrsAndUsersMapping(CalculatedParametrsAndUsersMapping instance);
    partial void DeleteCalculatedParametrsAndUsersMapping(CalculatedParametrsAndUsersMapping instance);
    partial void InsertCollectedBasicParametersTable(CollectedBasicParametersTable instance);
    partial void UpdateCollectedBasicParametersTable(CollectedBasicParametersTable instance);
    partial void DeleteCollectedBasicParametersTable(CollectedBasicParametersTable instance);
    partial void InsertCollectedCalculatedParametrs(CollectedCalculatedParametrs instance);
    partial void UpdateCollectedCalculatedParametrs(CollectedCalculatedParametrs instance);
    partial void DeleteCollectedCalculatedParametrs(CollectedCalculatedParametrs instance);
    partial void InsertCollectedIndicatorsForR(CollectedIndicatorsForR instance);
    partial void UpdateCollectedIndicatorsForR(CollectedIndicatorsForR instance);
    partial void DeleteCollectedIndicatorsForR(CollectedIndicatorsForR instance);
    partial void InsertCollectedIndocators(CollectedIndocators instance);
    partial void UpdateCollectedIndocators(CollectedIndocators instance);
    partial void DeleteCollectedIndocators(CollectedIndocators instance);
    partial void InsertCommetntForBasicInReport(CommetntForBasicInReport instance);
    partial void UpdateCommetntForBasicInReport(CommetntForBasicInReport instance);
    partial void DeleteCommetntForBasicInReport(CommetntForBasicInReport instance);
    partial void InsertConfirmationHistory(ConfirmationHistory instance);
    partial void UpdateConfirmationHistory(ConfirmationHistory instance);
    partial void DeleteConfirmationHistory(ConfirmationHistory instance);
    partial void InsertConnectGroup_And_Users(ConnectGroup_And_Users instance);
    partial void UpdateConnectGroup_And_Users(ConnectGroup_And_Users instance);
    partial void DeleteConnectGroup_And_Users(ConnectGroup_And_Users instance);
    partial void InsertDocumentTable(DocumentTable instance);
    partial void UpdateDocumentTable(DocumentTable instance);
    partial void DeleteDocumentTable(DocumentTable instance);
    partial void InsertDocumentTypes(DocumentTypes instance);
    partial void UpdateDocumentTypes(DocumentTypes instance);
    partial void DeleteDocumentTypes(DocumentTypes instance);
    partial void InsertEducationCostTable(EducationCostTable instance);
    partial void UpdateEducationCostTable(EducationCostTable instance);
    partial void DeleteEducationCostTable(EducationCostTable instance);
    partial void InsertEmailCopies(EmailCopies instance);
    partial void UpdateEmailCopies(EmailCopies instance);
    partial void DeleteEmailCopies(EmailCopies instance);
    partial void InsertEmailSendHistory(EmailSendHistory instance);
    partial void UpdateEmailSendHistory(EmailSendHistory instance);
    partial void DeleteEmailSendHistory(EmailSendHistory instance);
    partial void InsertEmailSendTable(EmailSendTable instance);
    partial void UpdateEmailSendTable(EmailSendTable instance);
    partial void DeleteEmailSendTable(EmailSendTable instance);
    partial void InsertEmailTemplate(EmailTemplate instance);
    partial void UpdateEmailTemplate(EmailTemplate instance);
    partial void DeleteEmailTemplate(EmailTemplate instance);
    partial void InsertFieldOfExpertise(FieldOfExpertise instance);
    partial void UpdateFieldOfExpertise(FieldOfExpertise instance);
    partial void DeleteFieldOfExpertise(FieldOfExpertise instance);
    partial void InsertFifthLevelSubdivisionTable(FifthLevelSubdivisionTable instance);
    partial void UpdateFifthLevelSubdivisionTable(FifthLevelSubdivisionTable instance);
    partial void DeleteFifthLevelSubdivisionTable(FifthLevelSubdivisionTable instance);
    partial void InsertFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void UpdateFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void DeleteFirstLevelSubdivisionTable(FirstLevelSubdivisionTable instance);
    partial void InsertFourthLevelParametrs(FourthLevelParametrs instance);
    partial void UpdateFourthLevelParametrs(FourthLevelParametrs instance);
    partial void DeleteFourthLevelParametrs(FourthLevelParametrs instance);
    partial void InsertFourthLevelSubdivisionTable(FourthLevelSubdivisionTable instance);
    partial void UpdateFourthLevelSubdivisionTable(FourthLevelSubdivisionTable instance);
    partial void DeleteFourthLevelSubdivisionTable(FourthLevelSubdivisionTable instance);
    partial void InsertIndicatorClass(IndicatorClass instance);
    partial void UpdateIndicatorClass(IndicatorClass instance);
    partial void DeleteIndicatorClass(IndicatorClass instance);
    partial void InsertIndicatorsAndRolesMappingTable(IndicatorsAndRolesMappingTable instance);
    partial void UpdateIndicatorsAndRolesMappingTable(IndicatorsAndRolesMappingTable instance);
    partial void DeleteIndicatorsAndRolesMappingTable(IndicatorsAndRolesMappingTable instance);
    partial void InsertIndicatorsAndUsersMapping(IndicatorsAndUsersMapping instance);
    partial void UpdateIndicatorsAndUsersMapping(IndicatorsAndUsersMapping instance);
    partial void DeleteIndicatorsAndUsersMapping(IndicatorsAndUsersMapping instance);
    partial void InsertIndicatorsTable(IndicatorsTable instance);
    partial void UpdateIndicatorsTable(IndicatorsTable instance);
    partial void DeleteIndicatorsTable(IndicatorsTable instance);
    partial void InsertManualTable(ManualTable instance);
    partial void UpdateManualTable(ManualTable instance);
    partial void DeleteManualTable(ManualTable instance);
    partial void InsertMultiUser(MultiUser instance);
    partial void UpdateMultiUser(MultiUser instance);
    partial void DeleteMultiUser(MultiUser instance);
    partial void InsertPlannedIndicator(PlannedIndicator instance);
    partial void UpdatePlannedIndicator(PlannedIndicator instance);
    partial void DeletePlannedIndicator(PlannedIndicator instance);
    partial void InsertProjects(Projects instance);
    partial void UpdateProjects(Projects instance);
    partial void DeleteProjects(Projects instance);
    partial void InsertProrectorIndicatorValues(ProrectorIndicatorValues instance);
    partial void UpdateProrectorIndicatorValues(ProrectorIndicatorValues instance);
    partial void DeleteProrectorIndicatorValues(ProrectorIndicatorValues instance);
    partial void InsertRank_AddArticleCreateTable(Rank_AddArticleCreateTable instance);
    partial void UpdateRank_AddArticleCreateTable(Rank_AddArticleCreateTable instance);
    partial void DeleteRank_AddArticleCreateTable(Rank_AddArticleCreateTable instance);
    partial void InsertRank_Articles(Rank_Articles instance);
    partial void UpdateRank_Articles(Rank_Articles instance);
    partial void DeleteRank_Articles(Rank_Articles instance);
    partial void InsertRank_ArticleValues(Rank_ArticleValues instance);
    partial void UpdateRank_ArticleValues(Rank_ArticleValues instance);
    partial void DeleteRank_ArticleValues(Rank_ArticleValues instance);
    partial void InsertRank_Autors(Rank_Autors instance);
    partial void UpdateRank_Autors(Rank_Autors instance);
    partial void DeleteRank_Autors(Rank_Autors instance);
    partial void InsertRank_AutorsAndArticles(Rank_AutorsAndArticles instance);
    partial void UpdateRank_AutorsAndArticles(Rank_AutorsAndArticles instance);
    partial void DeleteRank_AutorsAndArticles(Rank_AutorsAndArticles instance);
    partial void InsertRank_Collected_ParametrsValue(Rank_Collected_ParametrsValue instance);
    partial void UpdateRank_Collected_ParametrsValue(Rank_Collected_ParametrsValue instance);
    partial void DeleteRank_Collected_ParametrsValue(Rank_Collected_ParametrsValue instance);
    partial void InsertRank_Connect_ParamType_Param(Rank_Connect_ParamType_Param instance);
    partial void UpdateRank_Connect_ParamType_Param(Rank_Connect_ParamType_Param instance);
    partial void DeleteRank_Connect_ParamType_Param(Rank_Connect_ParamType_Param instance);
    partial void InsertRank_ConnectedParametrs_ArticleCreateTable(Rank_ConnectedParametrs_ArticleCreateTable instance);
    partial void UpdateRank_ConnectedParametrs_ArticleCreateTable(Rank_ConnectedParametrs_ArticleCreateTable instance);
    partial void DeleteRank_ConnectedParametrs_ArticleCreateTable(Rank_ConnectedParametrs_ArticleCreateTable instance);
    partial void InsertRank_Mark(Rank_Mark instance);
    partial void UpdateRank_Mark(Rank_Mark instance);
    partial void DeleteRank_Mark(Rank_Mark instance);
    partial void InsertRank_Param_Type(Rank_Param_Type instance);
    partial void UpdateRank_Param_Type(Rank_Param_Type instance);
    partial void DeleteRank_Param_Type(Rank_Param_Type instance);
    partial void InsertRank_Parametrs(Rank_Parametrs instance);
    partial void UpdateRank_Parametrs(Rank_Parametrs instance);
    partial void DeleteRank_Parametrs(Rank_Parametrs instance);
    partial void InsertRank_Points(Rank_Points instance);
    partial void UpdateRank_Points(Rank_Points instance);
    partial void DeleteRank_Points(Rank_Points instance);
    partial void InsertRank_Positions(Rank_Positions instance);
    partial void UpdateRank_Positions(Rank_Positions instance);
    partial void DeleteRank_Positions(Rank_Positions instance);
    partial void InsertRank_Raiting_History(Rank_Raiting_History instance);
    partial void UpdateRank_Raiting_History(Rank_Raiting_History instance);
    partial void DeleteRank_Raiting_History(Rank_Raiting_History instance);
    partial void InsertRank_StructureRaitings(Rank_StructureRaitings instance);
    partial void UpdateRank_StructureRaitings(Rank_StructureRaitings instance);
    partial void DeleteRank_StructureRaitings(Rank_StructureRaitings instance);
    partial void InsertReportArchiveAndBasicParametrsMappingTable(ReportArchiveAndBasicParametrsMappingTable instance);
    partial void UpdateReportArchiveAndBasicParametrsMappingTable(ReportArchiveAndBasicParametrsMappingTable instance);
    partial void DeleteReportArchiveAndBasicParametrsMappingTable(ReportArchiveAndBasicParametrsMappingTable instance);
    partial void InsertReportArchiveAndCalculatedParametrsMappingTable(ReportArchiveAndCalculatedParametrsMappingTable instance);
    partial void UpdateReportArchiveAndCalculatedParametrsMappingTable(ReportArchiveAndCalculatedParametrsMappingTable instance);
    partial void DeleteReportArchiveAndCalculatedParametrsMappingTable(ReportArchiveAndCalculatedParametrsMappingTable instance);
    partial void InsertReportArchiveAndIndicatorsMappingTable(ReportArchiveAndIndicatorsMappingTable instance);
    partial void UpdateReportArchiveAndIndicatorsMappingTable(ReportArchiveAndIndicatorsMappingTable instance);
    partial void DeleteReportArchiveAndIndicatorsMappingTable(ReportArchiveAndIndicatorsMappingTable instance);
    partial void InsertReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable instance);
    partial void UpdateReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable instance);
    partial void DeleteReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable instance);
    partial void InsertReportArchiveTable(ReportArchiveTable instance);
    partial void UpdateReportArchiveTable(ReportArchiveTable instance);
    partial void DeleteReportArchiveTable(ReportArchiveTable instance);
    partial void InsertRolesTable(RolesTable instance);
    partial void UpdateRolesTable(RolesTable instance);
    partial void DeleteRolesTable(RolesTable instance);
    partial void InsertSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void UpdateSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void DeleteSecondLevelSubdivisionTable(SecondLevelSubdivisionTable instance);
    partial void InsertSpecializationTable(SpecializationTable instance);
    partial void UpdateSpecializationTable(SpecializationTable instance);
    partial void DeleteSpecializationTable(SpecializationTable instance);
    partial void InsertStudentGroupsTable(StudentGroupsTable instance);
    partial void UpdateStudentGroupsTable(StudentGroupsTable instance);
    partial void DeleteStudentGroupsTable(StudentGroupsTable instance);
    partial void InsertSubdivisionClassTable(SubdivisionClassTable instance);
    partial void UpdateSubdivisionClassTable(SubdivisionClassTable instance);
    partial void DeleteSubdivisionClassTable(SubdivisionClassTable instance);
    partial void InsertSubdomainRedirectAutologinTable(SubdomainRedirectAutologinTable instance);
    partial void UpdateSubdomainRedirectAutologinTable(SubdomainRedirectAutologinTable instance);
    partial void DeleteSubdomainRedirectAutologinTable(SubdomainRedirectAutologinTable instance);
    partial void InsertThirdLevelParametrs(ThirdLevelParametrs instance);
    partial void UpdateThirdLevelParametrs(ThirdLevelParametrs instance);
    partial void DeleteThirdLevelParametrs(ThirdLevelParametrs instance);
    partial void InsertThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void UpdateThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void DeleteThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable instance);
    partial void InsertTypeOfWritingFIO(TypeOfWritingFIO instance);
    partial void UpdateTypeOfWritingFIO(TypeOfWritingFIO instance);
    partial void DeleteTypeOfWritingFIO(TypeOfWritingFIO instance);
    partial void InsertUserDataChangeHistory(UserDataChangeHistory instance);
    partial void UpdateUserDataChangeHistory(UserDataChangeHistory instance);
    partial void DeleteUserDataChangeHistory(UserDataChangeHistory instance);
    partial void InsertUserGroupTable(UserGroupTable instance);
    partial void UpdateUserGroupTable(UserGroupTable instance);
    partial void DeleteUserGroupTable(UserGroupTable instance);
    partial void InsertUsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable instance);
    partial void UpdateUsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable instance);
    partial void DeleteUsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable instance);
    partial void InsertUsersTable(UsersTable instance);
    partial void UpdateUsersTable(UsersTable instance);
    partial void DeleteUsersTable(UsersTable instance);
    partial void InsertzActionPRManualTable(zActionPRManualTable instance);
    partial void UpdatezActionPRManualTable(zActionPRManualTable instance);
    partial void DeletezActionPRManualTable(zActionPRManualTable instance);
    partial void InsertzActionsCompetitionsMappingTable(zActionsCompetitionsMappingTable instance);
    partial void UpdatezActionsCompetitionsMappingTable(zActionsCompetitionsMappingTable instance);
    partial void DeletezActionsCompetitionsMappingTable(zActionsCompetitionsMappingTable instance);
    partial void InsertzApplicationAndPartnersMappingTable(zApplicationAndPartnersMappingTable instance);
    partial void UpdatezApplicationAndPartnersMappingTable(zApplicationAndPartnersMappingTable instance);
    partial void DeletezApplicationAndPartnersMappingTable(zApplicationAndPartnersMappingTable instance);
    partial void InsertzApplicationTable(zApplicationTable instance);
    partial void UpdatezApplicationTable(zApplicationTable instance);
    partial void DeletezApplicationTable(zApplicationTable instance);
    partial void InsertzBlockTable(zBlockTable instance);
    partial void UpdatezBlockTable(zBlockTable instance);
    partial void DeletezBlockTable(zBlockTable instance);
    partial void InsertzCollectedDataTable(zCollectedDataTable instance);
    partial void UpdatezCollectedDataTable(zCollectedDataTable instance);
    partial void DeletezCollectedDataTable(zCollectedDataTable instance);
    partial void InsertzCollectedRowsTable(zCollectedRowsTable instance);
    partial void UpdatezCollectedRowsTable(zCollectedRowsTable instance);
    partial void DeletezCollectedRowsTable(zCollectedRowsTable instance);
    partial void InsertzColumnTable(zColumnTable instance);
    partial void UpdatezColumnTable(zColumnTable instance);
    partial void DeletezColumnTable(zColumnTable instance);
    partial void InsertzCompetitionsTable(zCompetitionsTable instance);
    partial void UpdatezCompetitionsTable(zCompetitionsTable instance);
    partial void DeletezCompetitionsTable(zCompetitionsTable instance);
    partial void InsertzConstantListTable(zConstantListTable instance);
    partial void UpdatezConstantListTable(zConstantListTable instance);
    partial void DeletezConstantListTable(zConstantListTable instance);
    partial void InsertzDocumentsTable(zDocumentsTable instance);
    partial void UpdatezDocumentsTable(zDocumentsTable instance);
    partial void DeletezDocumentsTable(zDocumentsTable instance);
    partial void InsertZeroLevelSubdivisionTable(ZeroLevelSubdivisionTable instance);
    partial void UpdateZeroLevelSubdivisionTable(ZeroLevelSubdivisionTable instance);
    partial void DeleteZeroLevelSubdivisionTable(ZeroLevelSubdivisionTable instance);
    partial void InsertzExpertAndExpertGroupMappingTable(zExpertAndExpertGroupMappingTable instance);
    partial void UpdatezExpertAndExpertGroupMappingTable(zExpertAndExpertGroupMappingTable instance);
    partial void DeletezExpertAndExpertGroupMappingTable(zExpertAndExpertGroupMappingTable instance);
    partial void InsertzExpertGroup(zExpertGroup instance);
    partial void UpdatezExpertGroup(zExpertGroup instance);
    partial void DeletezExpertGroup(zExpertGroup instance);
    partial void InsertzExpertPoints(zExpertPoints instance);
    partial void UpdatezExpertPoints(zExpertPoints instance);
    partial void DeletezExpertPoints(zExpertPoints instance);
    partial void InsertzExpertPointsValue(zExpertPointsValue instance);
    partial void UpdatezExpertPointsValue(zExpertPointsValue instance);
    partial void DeletezExpertPointsValue(zExpertPointsValue instance);
    partial void InsertzExpertsAndApplicationMappingTable(zExpertsAndApplicationMappingTable instance);
    partial void UpdatezExpertsAndApplicationMappingTable(zExpertsAndApplicationMappingTable instance);
    partial void DeletezExpertsAndApplicationMappingTable(zExpertsAndApplicationMappingTable instance);
    partial void InsertzExpertsAndCompetitionMappngTamplateTable(zExpertsAndCompetitionMappngTamplateTable instance);
    partial void UpdatezExpertsAndCompetitionMappngTamplateTable(zExpertsAndCompetitionMappngTamplateTable instance);
    partial void DeletezExpertsAndCompetitionMappngTamplateTable(zExpertsAndCompetitionMappngTamplateTable instance);
    partial void InsertzFormCompetitionMappingTable(zFormCompetitionMappingTable instance);
    partial void UpdatezFormCompetitionMappingTable(zFormCompetitionMappingTable instance);
    partial void DeletezFormCompetitionMappingTable(zFormCompetitionMappingTable instance);
    partial void InsertzIndicatorManualTable(zIndicatorManualTable instance);
    partial void UpdatezIndicatorManualTable(zIndicatorManualTable instance);
    partial void DeletezIndicatorManualTable(zIndicatorManualTable instance);
    partial void InsertzPartnersTable(zPartnersTable instance);
    partial void UpdatezPartnersTable(zPartnersTable instance);
    partial void DeletezPartnersTable(zPartnersTable instance);
    partial void InsertzSectionTable(zSectionTable instance);
    partial void UpdatezSectionTable(zSectionTable instance);
    partial void DeletezSectionTable(zSectionTable instance);
    partial void InsertzTaskPRManualTable(zTaskPRManualTable instance);
    partial void UpdatezTaskPRManualTable(zTaskPRManualTable instance);
    partial void DeletezTaskPRManualTable(zTaskPRManualTable instance);
    partial void InsertzTemplateFormTable(zTemplateFormTable instance);
    partial void UpdatezTemplateFormTable(zTemplateFormTable instance);
    partial void DeletezTemplateFormTable(zTemplateFormTable instance);
    partial void InsertAplication(Aplication instance);
    partial void UpdateAplication(Aplication instance);
    partial void DeleteAplication(Aplication instance);
    #endregion
		
		public KPIWebDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TestRelease_ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KPIWebDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplictionTypes> ApplictionTypes
		{
			get
			{
				return this.GetTable<ApplictionTypes>();
			}
		}
		
		public System.Data.Linq.Table<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTable
		{
			get
			{
				return this.GetTable<BasicParametersAndRolesMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<BasicParametersTable> BasicParametersTable
		{
			get
			{
				return this.GetTable<BasicParametersTable>();
			}
		}
		
		public System.Data.Linq.Table<BasicParametrAdditional> BasicParametrAdditional
		{
			get
			{
				return this.GetTable<BasicParametrAdditional>();
			}
		}
		
		public System.Data.Linq.Table<BasicParametrsAndSubdivisionClassMappingTable> BasicParametrsAndSubdivisionClassMappingTable
		{
			get
			{
				return this.GetTable<BasicParametrsAndSubdivisionClassMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<BasicParametrsAndUsersMapping> BasicParametrsAndUsersMapping
		{
			get
			{
				return this.GetTable<BasicParametrsAndUsersMapping>();
			}
		}
		
		public System.Data.Linq.Table<CalculatedParametrs> CalculatedParametrs
		{
			get
			{
				return this.GetTable<CalculatedParametrs>();
			}
		}
		
		public System.Data.Linq.Table<CalculatedParametrsAndRolesMappingTable> CalculatedParametrsAndRolesMappingTable
		{
			get
			{
				return this.GetTable<CalculatedParametrsAndRolesMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<CalculatedParametrsAndUsersMapping> CalculatedParametrsAndUsersMapping
		{
			get
			{
				return this.GetTable<CalculatedParametrsAndUsersMapping>();
			}
		}
		
		public System.Data.Linq.Table<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this.GetTable<CollectedBasicParametersTable>();
			}
		}
		
		public System.Data.Linq.Table<CollectedCalculatedParametrs> CollectedCalculatedParametrs
		{
			get
			{
				return this.GetTable<CollectedCalculatedParametrs>();
			}
		}
		
		public System.Data.Linq.Table<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this.GetTable<CollectedIndicatorsForR>();
			}
		}
		
		public System.Data.Linq.Table<CollectedIndocators> CollectedIndocators
		{
			get
			{
				return this.GetTable<CollectedIndocators>();
			}
		}
		
		public System.Data.Linq.Table<CommetntForBasicInReport> CommetntForBasicInReport
		{
			get
			{
				return this.GetTable<CommetntForBasicInReport>();
			}
		}
		
		public System.Data.Linq.Table<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this.GetTable<ConfirmationHistory>();
			}
		}
		
		public System.Data.Linq.Table<ConnectGroup_And_Users> ConnectGroup_And_Users
		{
			get
			{
				return this.GetTable<ConnectGroup_And_Users>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTable> DocumentTable
		{
			get
			{
				return this.GetTable<DocumentTable>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTypes> DocumentTypes
		{
			get
			{
				return this.GetTable<DocumentTypes>();
			}
		}
		
		public System.Data.Linq.Table<EducationCostTable> EducationCostTable
		{
			get
			{
				return this.GetTable<EducationCostTable>();
			}
		}
		
		public System.Data.Linq.Table<EmailCopies> EmailCopies
		{
			get
			{
				return this.GetTable<EmailCopies>();
			}
		}
		
		public System.Data.Linq.Table<EmailSendHistory> EmailSendHistory
		{
			get
			{
				return this.GetTable<EmailSendHistory>();
			}
		}
		
		public System.Data.Linq.Table<EmailSendTable> EmailSendTable
		{
			get
			{
				return this.GetTable<EmailSendTable>();
			}
		}
		
		public System.Data.Linq.Table<EmailTemplate> EmailTemplate
		{
			get
			{
				return this.GetTable<EmailTemplate>();
			}
		}
		
		public System.Data.Linq.Table<FieldOfExpertise> FieldOfExpertise
		{
			get
			{
				return this.GetTable<FieldOfExpertise>();
			}
		}
		
		public System.Data.Linq.Table<FifthLevelSubdivisionTable> FifthLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<FifthLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<FirstLevelSubdivisionTable> FirstLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<FirstLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<FourthLevelParametrs> FourthLevelParametrs
		{
			get
			{
				return this.GetTable<FourthLevelParametrs>();
			}
		}
		
		public System.Data.Linq.Table<FourthLevelSubdivisionTable> FourthLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<FourthLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorClass> IndicatorClass
		{
			get
			{
				return this.GetTable<IndicatorClass>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorsAndRolesMappingTable> IndicatorsAndRolesMappingTable
		{
			get
			{
				return this.GetTable<IndicatorsAndRolesMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorsAndUsersMapping> IndicatorsAndUsersMapping
		{
			get
			{
				return this.GetTable<IndicatorsAndUsersMapping>();
			}
		}
		
		public System.Data.Linq.Table<IndicatorsTable> IndicatorsTable
		{
			get
			{
				return this.GetTable<IndicatorsTable>();
			}
		}
		
		public System.Data.Linq.Table<ManualTable> ManualTable
		{
			get
			{
				return this.GetTable<ManualTable>();
			}
		}
		
		public System.Data.Linq.Table<MultiUser> MultiUser
		{
			get
			{
				return this.GetTable<MultiUser>();
			}
		}
		
		public System.Data.Linq.Table<PlannedIndicator> PlannedIndicator
		{
			get
			{
				return this.GetTable<PlannedIndicator>();
			}
		}
		
		public System.Data.Linq.Table<Projects> Projects
		{
			get
			{
				return this.GetTable<Projects>();
			}
		}
		
		public System.Data.Linq.Table<ProrectorIndicatorValues> ProrectorIndicatorValues
		{
			get
			{
				return this.GetTable<ProrectorIndicatorValues>();
			}
		}
		
		public System.Data.Linq.Table<Rank_AddArticleCreateTable> Rank_AddArticleCreateTable
		{
			get
			{
				return this.GetTable<Rank_AddArticleCreateTable>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Articles> Rank_Articles
		{
			get
			{
				return this.GetTable<Rank_Articles>();
			}
		}
		
		public System.Data.Linq.Table<Rank_ArticleValues> Rank_ArticleValues
		{
			get
			{
				return this.GetTable<Rank_ArticleValues>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Autors> Rank_Autors
		{
			get
			{
				return this.GetTable<Rank_Autors>();
			}
		}
		
		public System.Data.Linq.Table<Rank_AutorsAndArticles> Rank_AutorsAndArticles
		{
			get
			{
				return this.GetTable<Rank_AutorsAndArticles>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Collected_ParametrsValue> Rank_Collected_ParametrsValue
		{
			get
			{
				return this.GetTable<Rank_Collected_ParametrsValue>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Connect_ParamType_Param> Rank_Connect_ParamType_Param
		{
			get
			{
				return this.GetTable<Rank_Connect_ParamType_Param>();
			}
		}
		
		public System.Data.Linq.Table<Rank_ConnectedParametrs_ArticleCreateTable> Rank_ConnectedParametrs_ArticleCreateTable
		{
			get
			{
				return this.GetTable<Rank_ConnectedParametrs_ArticleCreateTable>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Mark> Rank_Mark
		{
			get
			{
				return this.GetTable<Rank_Mark>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Param_Type> Rank_Param_Type
		{
			get
			{
				return this.GetTable<Rank_Param_Type>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Parametrs> Rank_Parametrs
		{
			get
			{
				return this.GetTable<Rank_Parametrs>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Points> Rank_Points
		{
			get
			{
				return this.GetTable<Rank_Points>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Positions> Rank_Positions
		{
			get
			{
				return this.GetTable<Rank_Positions>();
			}
		}
		
		public System.Data.Linq.Table<Rank_Raiting_History> Rank_Raiting_History
		{
			get
			{
				return this.GetTable<Rank_Raiting_History>();
			}
		}
		
		public System.Data.Linq.Table<Rank_StructureRaitings> Rank_StructureRaitings
		{
			get
			{
				return this.GetTable<Rank_StructureRaitings>();
			}
		}
		
		public System.Data.Linq.Table<ReportArchiveAndBasicParametrsMappingTable> ReportArchiveAndBasicParametrsMappingTable
		{
			get
			{
				return this.GetTable<ReportArchiveAndBasicParametrsMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<ReportArchiveAndCalculatedParametrsMappingTable> ReportArchiveAndCalculatedParametrsMappingTable
		{
			get
			{
				return this.GetTable<ReportArchiveAndCalculatedParametrsMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<ReportArchiveAndIndicatorsMappingTable> ReportArchiveAndIndicatorsMappingTable
		{
			get
			{
				return this.GetTable<ReportArchiveAndIndicatorsMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<ReportArchiveAndLevelMappingTable> ReportArchiveAndLevelMappingTable
		{
			get
			{
				return this.GetTable<ReportArchiveAndLevelMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<ReportArchiveTable> ReportArchiveTable
		{
			get
			{
				return this.GetTable<ReportArchiveTable>();
			}
		}
		
		public System.Data.Linq.Table<RolesTable> RolesTable
		{
			get
			{
				return this.GetTable<RolesTable>();
			}
		}
		
		public System.Data.Linq.Table<SecondLevelSubdivisionTable> SecondLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<SecondLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<SpecializationTable> SpecializationTable
		{
			get
			{
				return this.GetTable<SpecializationTable>();
			}
		}
		
		public System.Data.Linq.Table<StudentGroupsTable> StudentGroupsTable
		{
			get
			{
				return this.GetTable<StudentGroupsTable>();
			}
		}
		
		public System.Data.Linq.Table<SubdivisionClassTable> SubdivisionClassTable
		{
			get
			{
				return this.GetTable<SubdivisionClassTable>();
			}
		}
		
		public System.Data.Linq.Table<SubdomainRedirectAutologinTable> SubdomainRedirectAutologinTable
		{
			get
			{
				return this.GetTable<SubdomainRedirectAutologinTable>();
			}
		}
		
		public System.Data.Linq.Table<ThirdLevelParametrs> ThirdLevelParametrs
		{
			get
			{
				return this.GetTable<ThirdLevelParametrs>();
			}
		}
		
		public System.Data.Linq.Table<ThirdLevelSubdivisionTable> ThirdLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<ThirdLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfWritingFIO> TypeOfWritingFIO
		{
			get
			{
				return this.GetTable<TypeOfWritingFIO>();
			}
		}
		
		public System.Data.Linq.Table<UserDataChangeHistory> UserDataChangeHistory
		{
			get
			{
				return this.GetTable<UserDataChangeHistory>();
			}
		}
		
		public System.Data.Linq.Table<UserGroupTable> UserGroupTable
		{
			get
			{
				return this.GetTable<UserGroupTable>();
			}
		}
		
		public System.Data.Linq.Table<UsersAndUserGroupMappingTable> UsersAndUserGroupMappingTable
		{
			get
			{
				return this.GetTable<UsersAndUserGroupMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<UsersTable> UsersTable
		{
			get
			{
				return this.GetTable<UsersTable>();
			}
		}
		
		public System.Data.Linq.Table<zActionPRManualTable> zActionPRManualTable
		{
			get
			{
				return this.GetTable<zActionPRManualTable>();
			}
		}
		
		public System.Data.Linq.Table<zActionsCompetitionsMappingTable> zActionsCompetitionsMappingTable
		{
			get
			{
				return this.GetTable<zActionsCompetitionsMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<zApplicationAndPartnersMappingTable> zApplicationAndPartnersMappingTable
		{
			get
			{
				return this.GetTable<zApplicationAndPartnersMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<zApplicationTable> zApplicationTable
		{
			get
			{
				return this.GetTable<zApplicationTable>();
			}
		}
		
		public System.Data.Linq.Table<zBlockTable> zBlockTable
		{
			get
			{
				return this.GetTable<zBlockTable>();
			}
		}
		
		public System.Data.Linq.Table<zCollectedDataTable> zCollectedDataTable
		{
			get
			{
				return this.GetTable<zCollectedDataTable>();
			}
		}
		
		public System.Data.Linq.Table<zCollectedRowsTable> zCollectedRowsTable
		{
			get
			{
				return this.GetTable<zCollectedRowsTable>();
			}
		}
		
		public System.Data.Linq.Table<zColumnTable> zColumnTable
		{
			get
			{
				return this.GetTable<zColumnTable>();
			}
		}
		
		public System.Data.Linq.Table<zCompetitionsTable> zCompetitionsTable
		{
			get
			{
				return this.GetTable<zCompetitionsTable>();
			}
		}
		
		public System.Data.Linq.Table<zConstantListTable> zConstantListTable
		{
			get
			{
				return this.GetTable<zConstantListTable>();
			}
		}
		
		public System.Data.Linq.Table<zDocumentsTable> zDocumentsTable
		{
			get
			{
				return this.GetTable<zDocumentsTable>();
			}
		}
		
		public System.Data.Linq.Table<ZeroLevelSubdivisionTable> ZeroLevelSubdivisionTable
		{
			get
			{
				return this.GetTable<ZeroLevelSubdivisionTable>();
			}
		}
		
		public System.Data.Linq.Table<zExpertAndExpertGroupMappingTable> zExpertAndExpertGroupMappingTable
		{
			get
			{
				return this.GetTable<zExpertAndExpertGroupMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<zExpertGroup> zExpertGroup
		{
			get
			{
				return this.GetTable<zExpertGroup>();
			}
		}
		
		public System.Data.Linq.Table<zExpertPoints> zExpertPoints
		{
			get
			{
				return this.GetTable<zExpertPoints>();
			}
		}
		
		public System.Data.Linq.Table<zExpertPointsValue> zExpertPointsValue
		{
			get
			{
				return this.GetTable<zExpertPointsValue>();
			}
		}
		
		public System.Data.Linq.Table<zExpertsAndApplicationMappingTable> zExpertsAndApplicationMappingTable
		{
			get
			{
				return this.GetTable<zExpertsAndApplicationMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<zExpertsAndCompetitionMappngTamplateTable> zExpertsAndCompetitionMappngTamplateTable
		{
			get
			{
				return this.GetTable<zExpertsAndCompetitionMappngTamplateTable>();
			}
		}
		
		public System.Data.Linq.Table<zFormCompetitionMappingTable> zFormCompetitionMappingTable
		{
			get
			{
				return this.GetTable<zFormCompetitionMappingTable>();
			}
		}
		
		public System.Data.Linq.Table<zIndicatorManualTable> zIndicatorManualTable
		{
			get
			{
				return this.GetTable<zIndicatorManualTable>();
			}
		}
		
		public System.Data.Linq.Table<zPartnersTable> zPartnersTable
		{
			get
			{
				return this.GetTable<zPartnersTable>();
			}
		}
		
		public System.Data.Linq.Table<zSectionTable> zSectionTable
		{
			get
			{
				return this.GetTable<zSectionTable>();
			}
		}
		
		public System.Data.Linq.Table<zTaskPRManualTable> zTaskPRManualTable
		{
			get
			{
				return this.GetTable<zTaskPRManualTable>();
			}
		}
		
		public System.Data.Linq.Table<zTemplateFormTable> zTemplateFormTable
		{
			get
			{
				return this.GetTable<zTemplateFormTable>();
			}
		}
		
		public System.Data.Linq.Table<Aplication> Aplications
		{
			get
			{
				return this.GetTable<Aplication>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplictionTypes")]
	public partial class ApplictionTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _ApplicationType;
		
		private System.Nullable<int> _FK_UserGroupTable;
		
		private EntitySet<Aplication> _Aplications;
		
		private EntityRef<UserGroupTable> _UserGroupTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnApplicationTypeChanging(string value);
    partial void OnApplicationTypeChanged();
    partial void OnFK_UserGroupTableChanging(System.Nullable<int> value);
    partial void OnFK_UserGroupTableChanged();
    #endregion
		
		public ApplictionTypes()
		{
			this._Aplications = new EntitySet<Aplication>(new Action<Aplication>(this.attach_Aplications), new Action<Aplication>(this.detach_Aplications));
			this._UserGroupTable = default(EntityRef<UserGroupTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationType", DbType="NVarChar(100)")]
		public string ApplicationType
		{
			get
			{
				return this._ApplicationType;
			}
			set
			{
				if ((this._ApplicationType != value))
				{
					this.OnApplicationTypeChanging(value);
					this.SendPropertyChanging();
					this._ApplicationType = value;
					this.SendPropertyChanged("ApplicationType");
					this.OnApplicationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserGroupTable", DbType="Int")]
		public System.Nullable<int> FK_UserGroupTable
		{
			get
			{
				return this._FK_UserGroupTable;
			}
			set
			{
				if ((this._FK_UserGroupTable != value))
				{
					if (this._UserGroupTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserGroupTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UserGroupTable = value;
					this.SendPropertyChanged("FK_UserGroupTable");
					this.OnFK_UserGroupTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplictionTypes_Aplication", Storage="_Aplications", ThisKey="ID", OtherKey="FK_ApplicationType")]
		public EntitySet<Aplication> Aplications
		{
			get
			{
				return this._Aplications;
			}
			set
			{
				this._Aplications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_ApplictionTypes", Storage="_UserGroupTable", ThisKey="FK_UserGroupTable", OtherKey="UserGroupID", IsForeignKey=true)]
		public UserGroupTable UserGroupTable
		{
			get
			{
				return this._UserGroupTable.Entity;
			}
			set
			{
				UserGroupTable previousValue = this._UserGroupTable.Entity;
				if (((previousValue != value) 
							|| (this._UserGroupTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroupTable.Entity = null;
						previousValue.ApplictionTypes.Remove(this);
					}
					this._UserGroupTable.Entity = value;
					if ((value != null))
					{
						value.ApplictionTypes.Add(this);
						this._FK_UserGroupTable = value.UserGroupID;
					}
					else
					{
						this._FK_UserGroupTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroupTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Aplications(Aplication entity)
		{
			this.SendPropertyChanging();
			entity.ApplictionTypes = this;
		}
		
		private void detach_Aplications(Aplication entity)
		{
			this.SendPropertyChanging();
			entity.ApplictionTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametersAndRolesMappingTable")]
	public partial class BasicParametersAndRolesMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametersAndRolesMappingTableID;
		
		private bool _Active;
		
		private int _FK_RolesTable;
		
		private int _FK_BasicParametersTable;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanConfirm;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<RolesTable> _RolesTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametersAndRolesMappingTableIDChanging(int value);
    partial void OnBasicParametersAndRolesMappingTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_RolesTableChanging(int value);
    partial void OnFK_RolesTableChanged();
    partial void OnFK_BasicParametersTableChanging(int value);
    partial void OnFK_BasicParametersTableChanged();
    partial void OnCanEditChanging(System.Nullable<bool> value);
    partial void OnCanEditChanged();
    partial void OnCanViewChanging(System.Nullable<bool> value);
    partial void OnCanViewChanged();
    partial void OnCanConfirmChanging(System.Nullable<bool> value);
    partial void OnCanConfirmChanged();
    #endregion
		
		public BasicParametersAndRolesMappingTable()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._RolesTable = default(EntityRef<RolesTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametersAndRolesMappingTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasicParametersAndRolesMappingTableID
		{
			get
			{
				return this._BasicParametersAndRolesMappingTableID;
			}
			set
			{
				if ((this._BasicParametersAndRolesMappingTableID != value))
				{
					this.OnBasicParametersAndRolesMappingTableIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametersAndRolesMappingTableID = value;
					this.SendPropertyChanged("BasicParametersAndRolesMappingTableID");
					this.OnBasicParametersAndRolesMappingTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int NOT NULL")]
		public int FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					if (this._RolesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParametersTable", DbType="Int NOT NULL")]
		public int FK_BasicParametersTable
		{
			get
			{
				return this._FK_BasicParametersTable;
			}
			set
			{
				if ((this._FK_BasicParametersTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasicParametersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParametersTable = value;
					this.SendPropertyChanged("FK_BasicParametersTable");
					this.OnFK_BasicParametersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanConfirm", DbType="Bit")]
		public System.Nullable<bool> CanConfirm
		{
			get
			{
				return this._CanConfirm;
			}
			set
			{
				if ((this._CanConfirm != value))
				{
					this.OnCanConfirmChanging(value);
					this.SendPropertyChanging();
					this._CanConfirm = value;
					this.SendPropertyChanged("CanConfirm");
					this.OnCanConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametersAndRolesMappingTable", Storage="_BasicParametersTable", ThisKey="FK_BasicParametersTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.BasicParametersAndRolesMappingTable.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametersAndRolesMappingTable.Add(this);
						this._FK_BasicParametersTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasicParametersTable = default(int);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_BasicParametersAndRolesMappingTable", Storage="_RolesTable", ThisKey="FK_RolesTable", OtherKey="RolesTableID", IsForeignKey=true)]
		public RolesTable RolesTable
		{
			get
			{
				return this._RolesTable.Entity;
			}
			set
			{
				RolesTable previousValue = this._RolesTable.Entity;
				if (((previousValue != value) 
							|| (this._RolesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesTable.Entity = null;
						previousValue.BasicParametersAndRolesMappingTable.Remove(this);
					}
					this._RolesTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametersAndRolesMappingTable.Add(this);
						this._FK_RolesTable = value.RolesTableID;
					}
					else
					{
						this._FK_RolesTable = default(int);
					}
					this.SendPropertyChanged("RolesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametersTable")]
	public partial class BasicParametersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametersTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _AbbreviationEN;
		
		private string _AbbreviationRU;
		
		private string _Measure;
		
		private EntitySet<BasicParametersAndRolesMappingTable> _BasicParametersAndRolesMappingTable;
		
		private EntityRef<BasicParametrAdditional> _BasicParametrAdditional;
		
		private EntitySet<BasicParametrsAndSubdivisionClassMappingTable> _BasicParametrsAndSubdivisionClassMappingTable;
		
		private EntitySet<BasicParametrsAndUsersMapping> _BasicParametrsAndUsersMapping;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CommetntForBasicInReport> _CommetntForBasicInReport;
		
		private EntitySet<ConfirmationHistory> _ConfirmationHistory;
		
		private EntitySet<ReportArchiveAndBasicParametrsMappingTable> _ReportArchiveAndBasicParametrsMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametersTableIDChanging(int value);
    partial void OnBasicParametersTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationENChanging(string value);
    partial void OnAbbreviationENChanged();
    partial void OnAbbreviationRUChanging(string value);
    partial void OnAbbreviationRUChanged();
    partial void OnMeasureChanging(string value);
    partial void OnMeasureChanged();
    #endregion
		
		public BasicParametersTable()
		{
			this._BasicParametersAndRolesMappingTable = new EntitySet<BasicParametersAndRolesMappingTable>(new Action<BasicParametersAndRolesMappingTable>(this.attach_BasicParametersAndRolesMappingTable), new Action<BasicParametersAndRolesMappingTable>(this.detach_BasicParametersAndRolesMappingTable));
			this._BasicParametrAdditional = default(EntityRef<BasicParametrAdditional>);
			this._BasicParametrsAndSubdivisionClassMappingTable = new EntitySet<BasicParametrsAndSubdivisionClassMappingTable>(new Action<BasicParametrsAndSubdivisionClassMappingTable>(this.attach_BasicParametrsAndSubdivisionClassMappingTable), new Action<BasicParametrsAndSubdivisionClassMappingTable>(this.detach_BasicParametrsAndSubdivisionClassMappingTable));
			this._BasicParametrsAndUsersMapping = new EntitySet<BasicParametrsAndUsersMapping>(new Action<BasicParametrsAndUsersMapping>(this.attach_BasicParametrsAndUsersMapping), new Action<BasicParametrsAndUsersMapping>(this.detach_BasicParametrsAndUsersMapping));
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CommetntForBasicInReport = new EntitySet<CommetntForBasicInReport>(new Action<CommetntForBasicInReport>(this.attach_CommetntForBasicInReport), new Action<CommetntForBasicInReport>(this.detach_CommetntForBasicInReport));
			this._ConfirmationHistory = new EntitySet<ConfirmationHistory>(new Action<ConfirmationHistory>(this.attach_ConfirmationHistory), new Action<ConfirmationHistory>(this.detach_ConfirmationHistory));
			this._ReportArchiveAndBasicParametrsMappingTable = new EntitySet<ReportArchiveAndBasicParametrsMappingTable>(new Action<ReportArchiveAndBasicParametrsMappingTable>(this.attach_ReportArchiveAndBasicParametrsMappingTable), new Action<ReportArchiveAndBasicParametrsMappingTable>(this.detach_ReportArchiveAndBasicParametrsMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametersTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasicParametersTableID
		{
			get
			{
				return this._BasicParametersTableID;
			}
			set
			{
				if ((this._BasicParametersTableID != value))
				{
					this.OnBasicParametersTableIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametersTableID = value;
					this.SendPropertyChanged("BasicParametersTableID");
					this.OnBasicParametersTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationEN", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AbbreviationEN
		{
			get
			{
				return this._AbbreviationEN;
			}
			set
			{
				if ((this._AbbreviationEN != value))
				{
					this.OnAbbreviationENChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationEN = value;
					this.SendPropertyChanged("AbbreviationEN");
					this.OnAbbreviationENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationRU", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AbbreviationRU
		{
			get
			{
				return this._AbbreviationRU;
			}
			set
			{
				if ((this._AbbreviationRU != value))
				{
					this.OnAbbreviationRUChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationRU = value;
					this.SendPropertyChanged("AbbreviationRU");
					this.OnAbbreviationRUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measure", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				if ((this._Measure != value))
				{
					this.OnMeasureChanging(value);
					this.SendPropertyChanging();
					this._Measure = value;
					this.SendPropertyChanged("Measure");
					this.OnMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametersAndRolesMappingTable", Storage="_BasicParametersAndRolesMappingTable", ThisKey="BasicParametersTableID", OtherKey="FK_BasicParametersTable")]
		public EntitySet<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTable
		{
			get
			{
				return this._BasicParametersAndRolesMappingTable;
			}
			set
			{
				this._BasicParametersAndRolesMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametrAdditional", Storage="_BasicParametrAdditional", ThisKey="BasicParametersTableID", OtherKey="BasicParametrAdditionalID", IsUnique=true, IsForeignKey=false)]
		public BasicParametrAdditional BasicParametrAdditional
		{
			get
			{
				return this._BasicParametrAdditional.Entity;
			}
			set
			{
				BasicParametrAdditional previousValue = this._BasicParametrAdditional.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametrAdditional.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametrAdditional.Entity = null;
						previousValue.BasicParametersTable = null;
					}
					this._BasicParametrAdditional.Entity = value;
					if ((value != null))
					{
						value.BasicParametersTable = this;
					}
					this.SendPropertyChanged("BasicParametrAdditional");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametrsAndSubdivisionClassMappingTable", Storage="_BasicParametrsAndSubdivisionClassMappingTable", ThisKey="BasicParametersTableID", OtherKey="FK_BasicParametrsTable")]
		public EntitySet<BasicParametrsAndSubdivisionClassMappingTable> BasicParametrsAndSubdivisionClassMappingTable
		{
			get
			{
				return this._BasicParametrsAndSubdivisionClassMappingTable;
			}
			set
			{
				this._BasicParametrsAndSubdivisionClassMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametrsAndUsersMapping", Storage="_BasicParametrsAndUsersMapping", ThisKey="BasicParametersTableID", OtherKey="FK_ParametrsTable")]
		public EntitySet<BasicParametrsAndUsersMapping> BasicParametrsAndUsersMapping
		{
			get
			{
				return this._BasicParametrsAndUsersMapping;
			}
			set
			{
				this._BasicParametrsAndUsersMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="BasicParametersTableID", OtherKey="FK_BasicParametersTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_CommetntForBasicInReport", Storage="_CommetntForBasicInReport", ThisKey="BasicParametersTableID", OtherKey="FK_BasickParamets")]
		public EntitySet<CommetntForBasicInReport> CommetntForBasicInReport
		{
			get
			{
				return this._CommetntForBasicInReport;
			}
			set
			{
				this._CommetntForBasicInReport.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_ConfirmationHistory", Storage="_ConfirmationHistory", ThisKey="BasicParametersTableID", OtherKey="FK_BasicParamTable")]
		public EntitySet<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this._ConfirmationHistory;
			}
			set
			{
				this._ConfirmationHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_ReportArchiveAndBasicParametrsMappingTable", Storage="_ReportArchiveAndBasicParametrsMappingTable", ThisKey="BasicParametersTableID", OtherKey="FK_BasicParametrsTable")]
		public EntitySet<ReportArchiveAndBasicParametrsMappingTable> ReportArchiveAndBasicParametrsMappingTable
		{
			get
			{
				return this._ReportArchiveAndBasicParametrsMappingTable;
			}
			set
			{
				this._ReportArchiveAndBasicParametrsMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
		
		private void attach_BasicParametrsAndSubdivisionClassMappingTable(BasicParametrsAndSubdivisionClassMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_BasicParametrsAndSubdivisionClassMappingTable(BasicParametrsAndSubdivisionClassMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
		
		private void attach_BasicParametrsAndUsersMapping(BasicParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_BasicParametrsAndUsersMapping(BasicParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
		
		private void attach_CommetntForBasicInReport(CommetntForBasicInReport entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_CommetntForBasicInReport(CommetntForBasicInReport entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
		
		private void attach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
		
		private void attach_ReportArchiveAndBasicParametrsMappingTable(ReportArchiveAndBasicParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = this;
		}
		
		private void detach_ReportArchiveAndBasicParametrsMappingTable(ReportArchiveAndBasicParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.BasicParametersTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametrAdditional")]
	public partial class BasicParametrAdditional : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametrAdditionalID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<bool> _ForForeignStudents;
		
		private System.Nullable<int> _FK_FieldOfExpertise;
		
		private System.Nullable<int> _SubvisionLevel;
		
		private System.Nullable<bool> _IsGraduating;
		
		private System.Nullable<bool> _Calculated;
		
		private System.Nullable<int> _SpecType;
		
		private System.Nullable<int> _DataType;
		
		private string _Comment;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<FieldOfExpertise> _FieldOfExpertise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametrAdditionalIDChanging(int value);
    partial void OnBasicParametrAdditionalIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnForForeignStudentsChanging(System.Nullable<bool> value);
    partial void OnForForeignStudentsChanged();
    partial void OnFK_FieldOfExpertiseChanging(System.Nullable<int> value);
    partial void OnFK_FieldOfExpertiseChanged();
    partial void OnSubvisionLevelChanging(System.Nullable<int> value);
    partial void OnSubvisionLevelChanged();
    partial void OnIsGraduatingChanging(System.Nullable<bool> value);
    partial void OnIsGraduatingChanged();
    partial void OnCalculatedChanging(System.Nullable<bool> value);
    partial void OnCalculatedChanged();
    partial void OnSpecTypeChanging(System.Nullable<int> value);
    partial void OnSpecTypeChanged();
    partial void OnDataTypeChanging(System.Nullable<int> value);
    partial void OnDataTypeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public BasicParametrAdditional()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._FieldOfExpertise = default(EntityRef<FieldOfExpertise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametrAdditionalID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BasicParametrAdditionalID
		{
			get
			{
				return this._BasicParametrAdditionalID;
			}
			set
			{
				if ((this._BasicParametrAdditionalID != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBasicParametrAdditionalIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametrAdditionalID = value;
					this.SendPropertyChanged("BasicParametrAdditionalID");
					this.OnBasicParametrAdditionalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForForeignStudents", DbType="Bit")]
		public System.Nullable<bool> ForForeignStudents
		{
			get
			{
				return this._ForForeignStudents;
			}
			set
			{
				if ((this._ForForeignStudents != value))
				{
					this.OnForForeignStudentsChanging(value);
					this.SendPropertyChanging();
					this._ForForeignStudents = value;
					this.SendPropertyChanged("ForForeignStudents");
					this.OnForForeignStudentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FieldOfExpertise", DbType="Int")]
		public System.Nullable<int> FK_FieldOfExpertise
		{
			get
			{
				return this._FK_FieldOfExpertise;
			}
			set
			{
				if ((this._FK_FieldOfExpertise != value))
				{
					if (this._FieldOfExpertise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FieldOfExpertiseChanging(value);
					this.SendPropertyChanging();
					this._FK_FieldOfExpertise = value;
					this.SendPropertyChanged("FK_FieldOfExpertise");
					this.OnFK_FieldOfExpertiseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubvisionLevel", DbType="Int")]
		public System.Nullable<int> SubvisionLevel
		{
			get
			{
				return this._SubvisionLevel;
			}
			set
			{
				if ((this._SubvisionLevel != value))
				{
					this.OnSubvisionLevelChanging(value);
					this.SendPropertyChanging();
					this._SubvisionLevel = value;
					this.SendPropertyChanged("SubvisionLevel");
					this.OnSubvisionLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGraduating", DbType="Bit")]
		public System.Nullable<bool> IsGraduating
		{
			get
			{
				return this._IsGraduating;
			}
			set
			{
				if ((this._IsGraduating != value))
				{
					this.OnIsGraduatingChanging(value);
					this.SendPropertyChanging();
					this._IsGraduating = value;
					this.SendPropertyChanged("IsGraduating");
					this.OnIsGraduatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Calculated", DbType="Bit")]
		public System.Nullable<bool> Calculated
		{
			get
			{
				return this._Calculated;
			}
			set
			{
				if ((this._Calculated != value))
				{
					this.OnCalculatedChanging(value);
					this.SendPropertyChanging();
					this._Calculated = value;
					this.SendPropertyChanged("Calculated");
					this.OnCalculatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecType", DbType="Int")]
		public System.Nullable<int> SpecType
		{
			get
			{
				return this._SpecType;
			}
			set
			{
				if ((this._SpecType != value))
				{
					this.OnSpecTypeChanging(value);
					this.SendPropertyChanging();
					this._SpecType = value;
					this.SendPropertyChanged("SpecType");
					this.OnSpecTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int")]
		public System.Nullable<int> DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametrAdditional", Storage="_BasicParametersTable", ThisKey="BasicParametrAdditionalID", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.BasicParametrAdditional = null;
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametrAdditional = this;
						this._BasicParametrAdditionalID = value.BasicParametersTableID;
					}
					else
					{
						this._BasicParametrAdditionalID = default(int);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldOfExpertise_BasicParametrAdditional", Storage="_FieldOfExpertise", ThisKey="FK_FieldOfExpertise", OtherKey="FieldOfExpertiseID", IsForeignKey=true)]
		public FieldOfExpertise FieldOfExpertise
		{
			get
			{
				return this._FieldOfExpertise.Entity;
			}
			set
			{
				FieldOfExpertise previousValue = this._FieldOfExpertise.Entity;
				if (((previousValue != value) 
							|| (this._FieldOfExpertise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldOfExpertise.Entity = null;
						previousValue.BasicParametrAdditional.Remove(this);
					}
					this._FieldOfExpertise.Entity = value;
					if ((value != null))
					{
						value.BasicParametrAdditional.Add(this);
						this._FK_FieldOfExpertise = value.FieldOfExpertiseID;
					}
					else
					{
						this._FK_FieldOfExpertise = default(Nullable<int>);
					}
					this.SendPropertyChanged("FieldOfExpertise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametrsAndSubdivisionClassMappingTable")]
	public partial class BasicParametrsAndSubdivisionClassMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_BasicParametrsTable;
		
		private System.Nullable<int> _FK_SubdivisionClassTable;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<SubdivisionClassTable> _SubdivisionClassTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_BasicParametrsTableChanging(System.Nullable<int> value);
    partial void OnFK_BasicParametrsTableChanged();
    partial void OnFK_SubdivisionClassTableChanging(System.Nullable<int> value);
    partial void OnFK_SubdivisionClassTableChanged();
    #endregion
		
		public BasicParametrsAndSubdivisionClassMappingTable()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._SubdivisionClassTable = default(EntityRef<SubdivisionClassTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParametrsTable", DbType="Int")]
		public System.Nullable<int> FK_BasicParametrsTable
		{
			get
			{
				return this._FK_BasicParametrsTable;
			}
			set
			{
				if ((this._FK_BasicParametrsTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasicParametrsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParametrsTable = value;
					this.SendPropertyChanged("FK_BasicParametrsTable");
					this.OnFK_BasicParametrsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SubdivisionClassTable", DbType="Int")]
		public System.Nullable<int> FK_SubdivisionClassTable
		{
			get
			{
				return this._FK_SubdivisionClassTable;
			}
			set
			{
				if ((this._FK_SubdivisionClassTable != value))
				{
					if (this._SubdivisionClassTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SubdivisionClassTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SubdivisionClassTable = value;
					this.SendPropertyChanged("FK_SubdivisionClassTable");
					this.OnFK_SubdivisionClassTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametrsAndSubdivisionClassMappingTable", Storage="_BasicParametersTable", ThisKey="FK_BasicParametrsTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.BasicParametrsAndSubdivisionClassMappingTable.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametrsAndSubdivisionClassMappingTable.Add(this);
						this._FK_BasicParametrsTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasicParametrsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubdivisionClassTable_BasicParametrsAndSubdivisionClassMappingTable", Storage="_SubdivisionClassTable", ThisKey="FK_SubdivisionClassTable", OtherKey="ID", IsForeignKey=true)]
		public SubdivisionClassTable SubdivisionClassTable
		{
			get
			{
				return this._SubdivisionClassTable.Entity;
			}
			set
			{
				SubdivisionClassTable previousValue = this._SubdivisionClassTable.Entity;
				if (((previousValue != value) 
							|| (this._SubdivisionClassTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubdivisionClassTable.Entity = null;
						previousValue.BasicParametrsAndSubdivisionClassMappingTable.Remove(this);
					}
					this._SubdivisionClassTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametrsAndSubdivisionClassMappingTable.Add(this);
						this._FK_SubdivisionClassTable = value.ID;
					}
					else
					{
						this._FK_SubdivisionClassTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubdivisionClassTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BasicParametrsAndUsersMapping")]
	public partial class BasicParametrsAndUsersMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametrsAndUsersMappingID;
		
		private bool _Active;
		
		private int _FK_ParametrsTable;
		
		private int _FK_UsersTable;
		
		private bool _CanEdit;
		
		private bool _CanView;
		
		private bool _CanConfirm;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametrsAndUsersMappingIDChanging(int value);
    partial void OnBasicParametrsAndUsersMappingIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_ParametrsTableChanging(int value);
    partial void OnFK_ParametrsTableChanged();
    partial void OnFK_UsersTableChanging(int value);
    partial void OnFK_UsersTableChanged();
    partial void OnCanEditChanging(bool value);
    partial void OnCanEditChanged();
    partial void OnCanViewChanging(bool value);
    partial void OnCanViewChanged();
    partial void OnCanConfirmChanging(bool value);
    partial void OnCanConfirmChanged();
    #endregion
		
		public BasicParametrsAndUsersMapping()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametrsAndUsersMappingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasicParametrsAndUsersMappingID
		{
			get
			{
				return this._BasicParametrsAndUsersMappingID;
			}
			set
			{
				if ((this._BasicParametrsAndUsersMappingID != value))
				{
					this.OnBasicParametrsAndUsersMappingIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametrsAndUsersMappingID = value;
					this.SendPropertyChanged("BasicParametrsAndUsersMappingID");
					this.OnBasicParametrsAndUsersMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ParametrsTable", DbType="Int NOT NULL")]
		public int FK_ParametrsTable
		{
			get
			{
				return this._FK_ParametrsTable;
			}
			set
			{
				if ((this._FK_ParametrsTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ParametrsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ParametrsTable = value;
					this.SendPropertyChanged("FK_ParametrsTable");
					this.OnFK_ParametrsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int NOT NULL")]
		public int FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit NOT NULL")]
		public bool CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit NOT NULL")]
		public bool CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanConfirm", DbType="Bit NOT NULL")]
		public bool CanConfirm
		{
			get
			{
				return this._CanConfirm;
			}
			set
			{
				if ((this._CanConfirm != value))
				{
					this.OnCanConfirmChanging(value);
					this.SendPropertyChanging();
					this._CanConfirm = value;
					this.SendPropertyChanged("CanConfirm");
					this.OnCanConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_BasicParametrsAndUsersMapping", Storage="_BasicParametersTable", ThisKey="FK_ParametrsTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.BasicParametrsAndUsersMapping.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametrsAndUsersMapping.Add(this);
						this._FK_ParametrsTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_ParametrsTable = default(int);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_BasicParametrsAndUsersMapping", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.BasicParametrsAndUsersMapping.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.BasicParametrsAndUsersMapping.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(int);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CalculatedParametrs")]
	public partial class CalculatedParametrs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CalculatedParametrsID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _Measure;
		
		private string _Formula;
		
		private string _AbbreviationEN;
		
		private string _AbbreviationRU;
		
		private EntitySet<CalculatedParametrsAndRolesMappingTable> _CalculatedParametrsAndRolesMappingTable;
		
		private EntitySet<CalculatedParametrsAndUsersMapping> _CalculatedParametrsAndUsersMapping;
		
		private EntitySet<CollectedCalculatedParametrs> _CollectedCalculatedParametrs;
		
		private EntitySet<ConfirmationHistory> _ConfirmationHistory;
		
		private EntitySet<ReportArchiveAndCalculatedParametrsMappingTable> _ReportArchiveAndCalculatedParametrsMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalculatedParametrsIDChanging(int value);
    partial void OnCalculatedParametrsIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMeasureChanging(string value);
    partial void OnMeasureChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    partial void OnAbbreviationENChanging(string value);
    partial void OnAbbreviationENChanged();
    partial void OnAbbreviationRUChanging(string value);
    partial void OnAbbreviationRUChanged();
    #endregion
		
		public CalculatedParametrs()
		{
			this._CalculatedParametrsAndRolesMappingTable = new EntitySet<CalculatedParametrsAndRolesMappingTable>(new Action<CalculatedParametrsAndRolesMappingTable>(this.attach_CalculatedParametrsAndRolesMappingTable), new Action<CalculatedParametrsAndRolesMappingTable>(this.detach_CalculatedParametrsAndRolesMappingTable));
			this._CalculatedParametrsAndUsersMapping = new EntitySet<CalculatedParametrsAndUsersMapping>(new Action<CalculatedParametrsAndUsersMapping>(this.attach_CalculatedParametrsAndUsersMapping), new Action<CalculatedParametrsAndUsersMapping>(this.detach_CalculatedParametrsAndUsersMapping));
			this._CollectedCalculatedParametrs = new EntitySet<CollectedCalculatedParametrs>(new Action<CollectedCalculatedParametrs>(this.attach_CollectedCalculatedParametrs), new Action<CollectedCalculatedParametrs>(this.detach_CollectedCalculatedParametrs));
			this._ConfirmationHistory = new EntitySet<ConfirmationHistory>(new Action<ConfirmationHistory>(this.attach_ConfirmationHistory), new Action<ConfirmationHistory>(this.detach_ConfirmationHistory));
			this._ReportArchiveAndCalculatedParametrsMappingTable = new EntitySet<ReportArchiveAndCalculatedParametrsMappingTable>(new Action<ReportArchiveAndCalculatedParametrsMappingTable>(this.attach_ReportArchiveAndCalculatedParametrsMappingTable), new Action<ReportArchiveAndCalculatedParametrsMappingTable>(this.detach_ReportArchiveAndCalculatedParametrsMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedParametrsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CalculatedParametrsID
		{
			get
			{
				return this._CalculatedParametrsID;
			}
			set
			{
				if ((this._CalculatedParametrsID != value))
				{
					this.OnCalculatedParametrsIDChanging(value);
					this.SendPropertyChanging();
					this._CalculatedParametrsID = value;
					this.SendPropertyChanged("CalculatedParametrsID");
					this.OnCalculatedParametrsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measure", DbType="VarChar(10)")]
		public string Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				if ((this._Measure != value))
				{
					this.OnMeasureChanging(value);
					this.SendPropertyChanging();
					this._Measure = value;
					this.SendPropertyChanged("Measure");
					this.OnMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="VarChar(5000)")]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationEN", DbType="VarChar(50)")]
		public string AbbreviationEN
		{
			get
			{
				return this._AbbreviationEN;
			}
			set
			{
				if ((this._AbbreviationEN != value))
				{
					this.OnAbbreviationENChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationEN = value;
					this.SendPropertyChanged("AbbreviationEN");
					this.OnAbbreviationENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationRU", DbType="VarChar(50)")]
		public string AbbreviationRU
		{
			get
			{
				return this._AbbreviationRU;
			}
			set
			{
				if ((this._AbbreviationRU != value))
				{
					this.OnAbbreviationRUChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationRU = value;
					this.SendPropertyChanged("AbbreviationRU");
					this.OnAbbreviationRUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_CalculatedParametrsAndRolesMappingTable", Storage="_CalculatedParametrsAndRolesMappingTable", ThisKey="CalculatedParametrsID", OtherKey="FK_CalculatedParametrs")]
		public EntitySet<CalculatedParametrsAndRolesMappingTable> CalculatedParametrsAndRolesMappingTable
		{
			get
			{
				return this._CalculatedParametrsAndRolesMappingTable;
			}
			set
			{
				this._CalculatedParametrsAndRolesMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_CalculatedParametrsAndUsersMapping", Storage="_CalculatedParametrsAndUsersMapping", ThisKey="CalculatedParametrsID", OtherKey="FK_CalculatedParametrsTable")]
		public EntitySet<CalculatedParametrsAndUsersMapping> CalculatedParametrsAndUsersMapping
		{
			get
			{
				return this._CalculatedParametrsAndUsersMapping;
			}
			set
			{
				this._CalculatedParametrsAndUsersMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_CollectedCalculatedParametrs", Storage="_CollectedCalculatedParametrs", ThisKey="CalculatedParametrsID", OtherKey="FK_CalculatedParametrs")]
		public EntitySet<CollectedCalculatedParametrs> CollectedCalculatedParametrs
		{
			get
			{
				return this._CollectedCalculatedParametrs;
			}
			set
			{
				this._CollectedCalculatedParametrs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_ConfirmationHistory", Storage="_ConfirmationHistory", ThisKey="CalculatedParametrsID", OtherKey="FK_CalculatedParamTable")]
		public EntitySet<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this._ConfirmationHistory;
			}
			set
			{
				this._ConfirmationHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_ReportArchiveAndCalculatedParametrsMappingTable", Storage="_ReportArchiveAndCalculatedParametrsMappingTable", ThisKey="CalculatedParametrsID", OtherKey="FK_CalculatedParametrsTable")]
		public EntitySet<ReportArchiveAndCalculatedParametrsMappingTable> ReportArchiveAndCalculatedParametrsMappingTable
		{
			get
			{
				return this._ReportArchiveAndCalculatedParametrsMappingTable;
			}
			set
			{
				this._ReportArchiveAndCalculatedParametrsMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CalculatedParametrsAndRolesMappingTable(CalculatedParametrsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = this;
		}
		
		private void detach_CalculatedParametrsAndRolesMappingTable(CalculatedParametrsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = null;
		}
		
		private void attach_CalculatedParametrsAndUsersMapping(CalculatedParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = this;
		}
		
		private void detach_CalculatedParametrsAndUsersMapping(CalculatedParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = null;
		}
		
		private void attach_CollectedCalculatedParametrs(CollectedCalculatedParametrs entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = this;
		}
		
		private void detach_CollectedCalculatedParametrs(CollectedCalculatedParametrs entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = null;
		}
		
		private void attach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = this;
		}
		
		private void detach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = null;
		}
		
		private void attach_ReportArchiveAndCalculatedParametrsMappingTable(ReportArchiveAndCalculatedParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = this;
		}
		
		private void detach_ReportArchiveAndCalculatedParametrsMappingTable(ReportArchiveAndCalculatedParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.CalculatedParametrs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CalculatedParametrsAndRolesMappingTable")]
	public partial class CalculatedParametrsAndRolesMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BasicParametersAndRolesWithLeadersID;
		
		private bool _Active;
		
		private System.Nullable<int> _FK_RolesTable;
		
		private System.Nullable<int> _FK_CalculatedParametrs;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanConfirm;
		
		private EntityRef<CalculatedParametrs> _CalculatedParametrs;
		
		private EntityRef<RolesTable> _RolesTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBasicParametersAndRolesWithLeadersIDChanging(int value);
    partial void OnBasicParametersAndRolesWithLeadersIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_RolesTableChanging(System.Nullable<int> value);
    partial void OnFK_RolesTableChanged();
    partial void OnFK_CalculatedParametrsChanging(System.Nullable<int> value);
    partial void OnFK_CalculatedParametrsChanged();
    partial void OnCanEditChanging(System.Nullable<bool> value);
    partial void OnCanEditChanged();
    partial void OnCanViewChanging(System.Nullable<bool> value);
    partial void OnCanViewChanged();
    partial void OnCanConfirmChanging(System.Nullable<bool> value);
    partial void OnCanConfirmChanged();
    #endregion
		
		public CalculatedParametrsAndRolesMappingTable()
		{
			this._CalculatedParametrs = default(EntityRef<CalculatedParametrs>);
			this._RolesTable = default(EntityRef<RolesTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicParametersAndRolesWithLeadersID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BasicParametersAndRolesWithLeadersID
		{
			get
			{
				return this._BasicParametersAndRolesWithLeadersID;
			}
			set
			{
				if ((this._BasicParametersAndRolesWithLeadersID != value))
				{
					this.OnBasicParametersAndRolesWithLeadersIDChanging(value);
					this.SendPropertyChanging();
					this._BasicParametersAndRolesWithLeadersID = value;
					this.SendPropertyChanged("BasicParametersAndRolesWithLeadersID");
					this.OnBasicParametersAndRolesWithLeadersIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int")]
		public System.Nullable<int> FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					if (this._RolesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CalculatedParametrs", DbType="Int")]
		public System.Nullable<int> FK_CalculatedParametrs
		{
			get
			{
				return this._FK_CalculatedParametrs;
			}
			set
			{
				if ((this._FK_CalculatedParametrs != value))
				{
					if (this._CalculatedParametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CalculatedParametrsChanging(value);
					this.SendPropertyChanging();
					this._FK_CalculatedParametrs = value;
					this.SendPropertyChanged("FK_CalculatedParametrs");
					this.OnFK_CalculatedParametrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanConfirm", DbType="Bit")]
		public System.Nullable<bool> CanConfirm
		{
			get
			{
				return this._CanConfirm;
			}
			set
			{
				if ((this._CanConfirm != value))
				{
					this.OnCanConfirmChanging(value);
					this.SendPropertyChanging();
					this._CanConfirm = value;
					this.SendPropertyChanged("CanConfirm");
					this.OnCanConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_CalculatedParametrsAndRolesMappingTable", Storage="_CalculatedParametrs", ThisKey="FK_CalculatedParametrs", OtherKey="CalculatedParametrsID", IsForeignKey=true)]
		public CalculatedParametrs CalculatedParametrs
		{
			get
			{
				return this._CalculatedParametrs.Entity;
			}
			set
			{
				CalculatedParametrs previousValue = this._CalculatedParametrs.Entity;
				if (((previousValue != value) 
							|| (this._CalculatedParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalculatedParametrs.Entity = null;
						previousValue.CalculatedParametrsAndRolesMappingTable.Remove(this);
					}
					this._CalculatedParametrs.Entity = value;
					if ((value != null))
					{
						value.CalculatedParametrsAndRolesMappingTable.Add(this);
						this._FK_CalculatedParametrs = value.CalculatedParametrsID;
					}
					else
					{
						this._FK_CalculatedParametrs = default(Nullable<int>);
					}
					this.SendPropertyChanged("CalculatedParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_CalculatedParametrsAndRolesMappingTable", Storage="_RolesTable", ThisKey="FK_RolesTable", OtherKey="RolesTableID", IsForeignKey=true)]
		public RolesTable RolesTable
		{
			get
			{
				return this._RolesTable.Entity;
			}
			set
			{
				RolesTable previousValue = this._RolesTable.Entity;
				if (((previousValue != value) 
							|| (this._RolesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesTable.Entity = null;
						previousValue.CalculatedParametrsAndRolesMappingTable.Remove(this);
					}
					this._RolesTable.Entity = value;
					if ((value != null))
					{
						value.CalculatedParametrsAndRolesMappingTable.Add(this);
						this._FK_RolesTable = value.RolesTableID;
					}
					else
					{
						this._FK_RolesTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("RolesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CalculatedParametrsAndUsersMapping")]
	public partial class CalculatedParametrsAndUsersMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CalculatedParametrsAndUsersMappingID;
		
		private bool _Active;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanConfirm;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private System.Nullable<int> _FK_CalculatedParametrsTable;
		
		private EntityRef<CalculatedParametrs> _CalculatedParametrs;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalculatedParametrsAndUsersMappingIDChanging(int value);
    partial void OnCalculatedParametrsAndUsersMappingIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCanEditChanging(System.Nullable<bool> value);
    partial void OnCanEditChanged();
    partial void OnCanViewChanging(System.Nullable<bool> value);
    partial void OnCanViewChanged();
    partial void OnCanConfirmChanging(System.Nullable<bool> value);
    partial void OnCanConfirmChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_CalculatedParametrsTableChanging(System.Nullable<int> value);
    partial void OnFK_CalculatedParametrsTableChanged();
    #endregion
		
		public CalculatedParametrsAndUsersMapping()
		{
			this._CalculatedParametrs = default(EntityRef<CalculatedParametrs>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedParametrsAndUsersMappingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CalculatedParametrsAndUsersMappingID
		{
			get
			{
				return this._CalculatedParametrsAndUsersMappingID;
			}
			set
			{
				if ((this._CalculatedParametrsAndUsersMappingID != value))
				{
					this.OnCalculatedParametrsAndUsersMappingIDChanging(value);
					this.SendPropertyChanging();
					this._CalculatedParametrsAndUsersMappingID = value;
					this.SendPropertyChanged("CalculatedParametrsAndUsersMappingID");
					this.OnCalculatedParametrsAndUsersMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanConfirm", DbType="Bit")]
		public System.Nullable<bool> CanConfirm
		{
			get
			{
				return this._CanConfirm;
			}
			set
			{
				if ((this._CanConfirm != value))
				{
					this.OnCanConfirmChanging(value);
					this.SendPropertyChanging();
					this._CanConfirm = value;
					this.SendPropertyChanged("CanConfirm");
					this.OnCanConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CalculatedParametrsTable", DbType="Int")]
		public System.Nullable<int> FK_CalculatedParametrsTable
		{
			get
			{
				return this._FK_CalculatedParametrsTable;
			}
			set
			{
				if ((this._FK_CalculatedParametrsTable != value))
				{
					if (this._CalculatedParametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CalculatedParametrsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CalculatedParametrsTable = value;
					this.SendPropertyChanged("FK_CalculatedParametrsTable");
					this.OnFK_CalculatedParametrsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_CalculatedParametrsAndUsersMapping", Storage="_CalculatedParametrs", ThisKey="FK_CalculatedParametrsTable", OtherKey="CalculatedParametrsID", IsForeignKey=true)]
		public CalculatedParametrs CalculatedParametrs
		{
			get
			{
				return this._CalculatedParametrs.Entity;
			}
			set
			{
				CalculatedParametrs previousValue = this._CalculatedParametrs.Entity;
				if (((previousValue != value) 
							|| (this._CalculatedParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalculatedParametrs.Entity = null;
						previousValue.CalculatedParametrsAndUsersMapping.Remove(this);
					}
					this._CalculatedParametrs.Entity = value;
					if ((value != null))
					{
						value.CalculatedParametrsAndUsersMapping.Add(this);
						this._FK_CalculatedParametrsTable = value.CalculatedParametrsID;
					}
					else
					{
						this._FK_CalculatedParametrsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("CalculatedParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CalculatedParametrsAndUsersMapping", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.CalculatedParametrsAndUsersMapping.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.CalculatedParametrsAndUsersMapping.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedBasicParametersTable")]
	public partial class CollectedBasicParametersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectedBasicParametersTableID;
		
		private bool _Active;
		
		private int _FK_UsersTable;
		
		private int _FK_ReportArchiveTable;
		
		private System.DateTime _LastChangeDateTime;
		
		private System.Nullable<System.DateTime> _SavedDateTime;
		
		private string _UserIP;
		
		private System.Nullable<double> _CollectedValue;
		
		private System.Nullable<int> _FK_BasicParametersTable;
		
		private System.Nullable<int> _FK_ZeroLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FirstLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_SecondLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_ThirdLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FourthLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FifthLevelSubdivisionTable;
		
		private System.Nullable<int> _Status;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<FifthLevelSubdivisionTable> _FifthLevelSubdivisionTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
		private EntityRef<ZeroLevelSubdivisionTable> _ZeroLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectedBasicParametersTableIDChanging(int value);
    partial void OnCollectedBasicParametersTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_UsersTableChanging(int value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_ReportArchiveTableChanging(int value);
    partial void OnFK_ReportArchiveTableChanged();
    partial void OnLastChangeDateTimeChanging(System.DateTime value);
    partial void OnLastChangeDateTimeChanged();
    partial void OnSavedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSavedDateTimeChanged();
    partial void OnUserIPChanging(string value);
    partial void OnUserIPChanged();
    partial void OnCollectedValueChanging(System.Nullable<double> value);
    partial void OnCollectedValueChanged();
    partial void OnFK_BasicParametersTableChanging(System.Nullable<int> value);
    partial void OnFK_BasicParametersTableChanged();
    partial void OnFK_ZeroLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ZeroLevelSubdivisionTableChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_FourthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FourthLevelSubdivisionTableChanged();
    partial void OnFK_FifthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FifthLevelSubdivisionTableChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public CollectedBasicParametersTable()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._FifthLevelSubdivisionTable = default(EntityRef<FifthLevelSubdivisionTable>);
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			this._ZeroLevelSubdivisionTable = default(EntityRef<ZeroLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedBasicParametersTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectedBasicParametersTableID
		{
			get
			{
				return this._CollectedBasicParametersTableID;
			}
			set
			{
				if ((this._CollectedBasicParametersTableID != value))
				{
					this.OnCollectedBasicParametersTableIDChanging(value);
					this.SendPropertyChanging();
					this._CollectedBasicParametersTableID = value;
					this.SendPropertyChanged("CollectedBasicParametersTableID");
					this.OnCollectedBasicParametersTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int NOT NULL")]
		public int FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangeDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangeDateTime
		{
			get
			{
				return this._LastChangeDateTime;
			}
			set
			{
				if ((this._LastChangeDateTime != value))
				{
					this.OnLastChangeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastChangeDateTime = value;
					this.SendPropertyChanged("LastChangeDateTime");
					this.OnLastChangeDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SavedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SavedDateTime
		{
			get
			{
				return this._SavedDateTime;
			}
			set
			{
				if ((this._SavedDateTime != value))
				{
					this.OnSavedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SavedDateTime = value;
					this.SendPropertyChanged("SavedDateTime");
					this.OnSavedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIP", DbType="VarChar(15)")]
		public string UserIP
		{
			get
			{
				return this._UserIP;
			}
			set
			{
				if ((this._UserIP != value))
				{
					this.OnUserIPChanging(value);
					this.SendPropertyChanging();
					this._UserIP = value;
					this.SendPropertyChanged("UserIP");
					this.OnUserIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedValue", DbType="Float")]
		public System.Nullable<double> CollectedValue
		{
			get
			{
				return this._CollectedValue;
			}
			set
			{
				if ((this._CollectedValue != value))
				{
					this.OnCollectedValueChanging(value);
					this.SendPropertyChanging();
					this._CollectedValue = value;
					this.SendPropertyChanged("CollectedValue");
					this.OnCollectedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParametersTable", DbType="Int")]
		public System.Nullable<int> FK_BasicParametersTable
		{
			get
			{
				return this._FK_BasicParametersTable;
			}
			set
			{
				if ((this._FK_BasicParametersTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasicParametersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParametersTable = value;
					this.SendPropertyChanged("FK_BasicParametersTable");
					this.OnFK_BasicParametersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ZeroLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ZeroLevelSubdivisionTable
		{
			get
			{
				return this._FK_ZeroLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ZeroLevelSubdivisionTable != value))
				{
					if (this._ZeroLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ZeroLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ZeroLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ZeroLevelSubdivisionTable");
					this.OnFK_ZeroLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FourthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FourthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLevelSubdivisionTable != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FourthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLevelSubdivisionTable");
					this.OnFK_FourthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FifthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FifthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FifthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FifthLevelSubdivisionTable != value))
				{
					if (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FifthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FifthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FifthLevelSubdivisionTable");
					this.OnFK_FifthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_CollectedBasicParametersTable", Storage="_BasicParametersTable", ThisKey="FK_BasicParametersTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_BasicParametersTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasicParametersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_FifthLevelSubdivisionTable", ThisKey="FK_FifthLevelSubdivisionTable", OtherKey="FifthLevelSubdivisionTableID", IsForeignKey=true)]
		public FifthLevelSubdivisionTable FifthLevelSubdivisionTable
		{
			get
			{
				return this._FifthLevelSubdivisionTable.Entity;
			}
			set
			{
				FifthLevelSubdivisionTable previousValue = this._FifthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FifthLevelSubdivisionTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._FifthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_FifthLevelSubdivisionTable = value.FifthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FifthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FifthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_FourthLevelSubdivisionTable", ThisKey="FK_FourthLevelSubdivisionTable", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_FourthLevelSubdivisionTable = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FourthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedBasicParametersTable", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(int);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedBasicParametersTable", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(int);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZeroLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_ZeroLevelSubdivisionTable", ThisKey="FK_ZeroLevelSubdivisionTable", OtherKey="ZeroLevelSubdivisionTableID", IsForeignKey=true)]
		public ZeroLevelSubdivisionTable ZeroLevelSubdivisionTable
		{
			get
			{
				return this._ZeroLevelSubdivisionTable.Entity;
			}
			set
			{
				ZeroLevelSubdivisionTable previousValue = this._ZeroLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ZeroLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZeroLevelSubdivisionTable.Entity = null;
						previousValue.CollectedBasicParametersTable.Remove(this);
					}
					this._ZeroLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedBasicParametersTable.Add(this);
						this._FK_ZeroLevelSubdivisionTable = value.ZeroLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ZeroLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ZeroLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedCalculatedParametrs")]
	public partial class CollectedCalculatedParametrs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectedCalculatedParametrsID;
		
		private bool _Active;
		
		private System.Nullable<int> _FK_CalculatedParametrs;
		
		private System.Nullable<double> _CollectedValue;
		
		private System.Nullable<System.DateTime> _LastChangeDateTime;
		
		private System.Nullable<System.DateTime> _SavedDateTime;
		
		private string _UserIP;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private System.Nullable<bool> _Confirmed;
		
		private System.Nullable<int> _FK_ReportArchiveTable;
		
		private EntityRef<CalculatedParametrs> _CalculatedParametrs;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectedCalculatedParametrsIDChanging(int value);
    partial void OnCollectedCalculatedParametrsIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_CalculatedParametrsChanging(System.Nullable<int> value);
    partial void OnFK_CalculatedParametrsChanged();
    partial void OnCollectedValueChanging(System.Nullable<double> value);
    partial void OnCollectedValueChanged();
    partial void OnLastChangeDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastChangeDateTimeChanged();
    partial void OnSavedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSavedDateTimeChanged();
    partial void OnUserIPChanging(string value);
    partial void OnUserIPChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    partial void OnFK_ReportArchiveTableChanging(System.Nullable<int> value);
    partial void OnFK_ReportArchiveTableChanged();
    #endregion
		
		public CollectedCalculatedParametrs()
		{
			this._CalculatedParametrs = default(EntityRef<CalculatedParametrs>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedCalculatedParametrsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectedCalculatedParametrsID
		{
			get
			{
				return this._CollectedCalculatedParametrsID;
			}
			set
			{
				if ((this._CollectedCalculatedParametrsID != value))
				{
					this.OnCollectedCalculatedParametrsIDChanging(value);
					this.SendPropertyChanging();
					this._CollectedCalculatedParametrsID = value;
					this.SendPropertyChanged("CollectedCalculatedParametrsID");
					this.OnCollectedCalculatedParametrsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CalculatedParametrs", DbType="Int")]
		public System.Nullable<int> FK_CalculatedParametrs
		{
			get
			{
				return this._FK_CalculatedParametrs;
			}
			set
			{
				if ((this._FK_CalculatedParametrs != value))
				{
					if (this._CalculatedParametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CalculatedParametrsChanging(value);
					this.SendPropertyChanging();
					this._FK_CalculatedParametrs = value;
					this.SendPropertyChanged("FK_CalculatedParametrs");
					this.OnFK_CalculatedParametrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedValue", DbType="Float")]
		public System.Nullable<double> CollectedValue
		{
			get
			{
				return this._CollectedValue;
			}
			set
			{
				if ((this._CollectedValue != value))
				{
					this.OnCollectedValueChanging(value);
					this.SendPropertyChanging();
					this._CollectedValue = value;
					this.SendPropertyChanged("CollectedValue");
					this.OnCollectedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangeDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastChangeDateTime
		{
			get
			{
				return this._LastChangeDateTime;
			}
			set
			{
				if ((this._LastChangeDateTime != value))
				{
					this.OnLastChangeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastChangeDateTime = value;
					this.SendPropertyChanged("LastChangeDateTime");
					this.OnLastChangeDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SavedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SavedDateTime
		{
			get
			{
				return this._SavedDateTime;
			}
			set
			{
				if ((this._SavedDateTime != value))
				{
					this.OnSavedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SavedDateTime = value;
					this.SendPropertyChanged("SavedDateTime");
					this.OnSavedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIP", DbType="VarChar(15)")]
		public string UserIP
		{
			get
			{
				return this._UserIP;
			}
			set
			{
				if ((this._UserIP != value))
				{
					this.OnUserIPChanging(value);
					this.SendPropertyChanging();
					this._UserIP = value;
					this.SendPropertyChanged("UserIP");
					this.OnUserIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int")]
		public System.Nullable<int> FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_CollectedCalculatedParametrs", Storage="_CalculatedParametrs", ThisKey="FK_CalculatedParametrs", OtherKey="CalculatedParametrsID", IsForeignKey=true)]
		public CalculatedParametrs CalculatedParametrs
		{
			get
			{
				return this._CalculatedParametrs.Entity;
			}
			set
			{
				CalculatedParametrs previousValue = this._CalculatedParametrs.Entity;
				if (((previousValue != value) 
							|| (this._CalculatedParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalculatedParametrs.Entity = null;
						previousValue.CollectedCalculatedParametrs.Remove(this);
					}
					this._CalculatedParametrs.Entity = value;
					if ((value != null))
					{
						value.CollectedCalculatedParametrs.Add(this);
						this._FK_CalculatedParametrs = value.CalculatedParametrsID;
					}
					else
					{
						this._FK_CalculatedParametrs = default(Nullable<int>);
					}
					this.SendPropertyChanged("CalculatedParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedCalculatedParametrs", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.CollectedCalculatedParametrs.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.CollectedCalculatedParametrs.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedCalculatedParametrs", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.CollectedCalculatedParametrs.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.CollectedCalculatedParametrs.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedIndicatorsForR")]
	public partial class CollectedIndicatorsForR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectedIndicatorsForRID;
		
		private System.Nullable<double> _Value;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_IndicatorsTable;
		
		private System.Nullable<int> _FK_FirstLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_SecondLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_ThirdLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FourthLelevlSubdivisionTable;
		
		private System.Nullable<int> _FK_FifthLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_ReportArchiveTable;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private EntityRef<FifthLevelSubdivisionTable> _FifthLevelSubdivisionTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntityRef<IndicatorsTable> _IndicatorsTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectedIndicatorsForRIDChanging(int value);
    partial void OnCollectedIndicatorsForRIDChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_IndicatorsTableChanging(System.Nullable<int> value);
    partial void OnFK_IndicatorsTableChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_FourthLelevlSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FourthLelevlSubdivisionTableChanged();
    partial void OnFK_FifthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FifthLevelSubdivisionTableChanged();
    partial void OnFK_ReportArchiveTableChanging(System.Nullable<int> value);
    partial void OnFK_ReportArchiveTableChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    #endregion
		
		public CollectedIndicatorsForR()
		{
			this._FifthLevelSubdivisionTable = default(EntityRef<FifthLevelSubdivisionTable>);
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			this._IndicatorsTable = default(EntityRef<IndicatorsTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedIndicatorsForRID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectedIndicatorsForRID
		{
			get
			{
				return this._CollectedIndicatorsForRID;
			}
			set
			{
				if ((this._CollectedIndicatorsForRID != value))
				{
					this.OnCollectedIndicatorsForRIDChanging(value);
					this.SendPropertyChanging();
					this._CollectedIndicatorsForRID = value;
					this.SendPropertyChanged("CollectedIndicatorsForRID");
					this.OnCollectedIndicatorsForRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorsTable", DbType="Int")]
		public System.Nullable<int> FK_IndicatorsTable
		{
			get
			{
				return this._FK_IndicatorsTable;
			}
			set
			{
				if ((this._FK_IndicatorsTable != value))
				{
					if (this._IndicatorsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorsTable = value;
					this.SendPropertyChanged("FK_IndicatorsTable");
					this.OnFK_IndicatorsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLelevlSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FourthLelevlSubdivisionTable
		{
			get
			{
				return this._FK_FourthLelevlSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLelevlSubdivisionTable != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FourthLelevlSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLelevlSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLelevlSubdivisionTable");
					this.OnFK_FourthLelevlSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FifthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FifthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FifthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FifthLevelSubdivisionTable != value))
				{
					if (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FifthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FifthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FifthLevelSubdivisionTable");
					this.OnFK_FifthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int")]
		public System.Nullable<int> FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_FifthLevelSubdivisionTable", ThisKey="FK_FifthLevelSubdivisionTable", OtherKey="FifthLevelSubdivisionTableID", IsForeignKey=true)]
		public FifthLevelSubdivisionTable FifthLevelSubdivisionTable
		{
			get
			{
				return this._FifthLevelSubdivisionTable.Entity;
			}
			set
			{
				FifthLevelSubdivisionTable previousValue = this._FifthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FifthLevelSubdivisionTable.Entity = null;
						previousValue.CollectedIndicatorsForR.Remove(this);
					}
					this._FifthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndicatorsForR.Add(this);
						this._FK_FifthLevelSubdivisionTable = value.FifthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FifthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FifthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.CollectedIndicatorsForR.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndicatorsForR.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_FourthLevelSubdivisionTable", ThisKey="FK_FourthLelevlSubdivisionTable", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.CollectedIndicatorsForR.Remove(this);
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndicatorsForR.Add(this);
						this._FK_FourthLelevlSubdivisionTable = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FourthLelevlSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_CollectedIndicatorsForR", Storage="_IndicatorsTable", ThisKey="FK_IndicatorsTable", OtherKey="IndicatorsTableID", IsForeignKey=true)]
		public IndicatorsTable IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable.Entity;
			}
			set
			{
				IndicatorsTable previousValue = this._IndicatorsTable.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorsTable.Entity = null;
						previousValue.CollectedIndicatorsForR.Remove(this);
					}
					this._IndicatorsTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndicatorsForR.Add(this);
						this._FK_IndicatorsTable = value.IndicatorsTableID;
					}
					else
					{
						this._FK_IndicatorsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("IndicatorsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedIndicatorsForR", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.CollectedIndicatorsForR.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndicatorsForR.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.CollectedIndicatorsForR.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndicatorsForR.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.CollectedIndicatorsForR.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndicatorsForR.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedIndocators")]
	public partial class CollectedIndocators : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CollectedIndocatorsID;
		
		private bool _Active;
		
		private System.Nullable<int> _FK_Indicators;
		
		private System.Nullable<double> _CollectedValue;
		
		private System.Nullable<System.DateTime> _LastChangeDateTime;
		
		private System.Nullable<System.DateTime> _SavedDateTime;
		
		private string _UserIP;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private System.Nullable<bool> _Confirmed;
		
		private System.Nullable<int> _FK_ReportArchiveTable;
		
		private EntityRef<IndicatorsTable> _IndicatorsTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectedIndocatorsIDChanging(int value);
    partial void OnCollectedIndocatorsIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_IndicatorsChanging(System.Nullable<int> value);
    partial void OnFK_IndicatorsChanged();
    partial void OnCollectedValueChanging(System.Nullable<double> value);
    partial void OnCollectedValueChanged();
    partial void OnLastChangeDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastChangeDateTimeChanged();
    partial void OnSavedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSavedDateTimeChanged();
    partial void OnUserIPChanging(string value);
    partial void OnUserIPChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    partial void OnFK_ReportArchiveTableChanging(System.Nullable<int> value);
    partial void OnFK_ReportArchiveTableChanged();
    #endregion
		
		public CollectedIndocators()
		{
			this._IndicatorsTable = default(EntityRef<IndicatorsTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedIndocatorsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CollectedIndocatorsID
		{
			get
			{
				return this._CollectedIndocatorsID;
			}
			set
			{
				if ((this._CollectedIndocatorsID != value))
				{
					this.OnCollectedIndocatorsIDChanging(value);
					this.SendPropertyChanging();
					this._CollectedIndocatorsID = value;
					this.SendPropertyChanged("CollectedIndocatorsID");
					this.OnCollectedIndocatorsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Indicators", DbType="Int")]
		public System.Nullable<int> FK_Indicators
		{
			get
			{
				return this._FK_Indicators;
			}
			set
			{
				if ((this._FK_Indicators != value))
				{
					if (this._IndicatorsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorsChanging(value);
					this.SendPropertyChanging();
					this._FK_Indicators = value;
					this.SendPropertyChanged("FK_Indicators");
					this.OnFK_IndicatorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CollectedValue", DbType="Float")]
		public System.Nullable<double> CollectedValue
		{
			get
			{
				return this._CollectedValue;
			}
			set
			{
				if ((this._CollectedValue != value))
				{
					this.OnCollectedValueChanging(value);
					this.SendPropertyChanging();
					this._CollectedValue = value;
					this.SendPropertyChanged("CollectedValue");
					this.OnCollectedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangeDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastChangeDateTime
		{
			get
			{
				return this._LastChangeDateTime;
			}
			set
			{
				if ((this._LastChangeDateTime != value))
				{
					this.OnLastChangeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastChangeDateTime = value;
					this.SendPropertyChanged("LastChangeDateTime");
					this.OnLastChangeDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SavedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SavedDateTime
		{
			get
			{
				return this._SavedDateTime;
			}
			set
			{
				if ((this._SavedDateTime != value))
				{
					this.OnSavedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SavedDateTime = value;
					this.SendPropertyChanged("SavedDateTime");
					this.OnSavedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIP", DbType="VarChar(15)")]
		public string UserIP
		{
			get
			{
				return this._UserIP;
			}
			set
			{
				if ((this._UserIP != value))
				{
					this.OnUserIPChanging(value);
					this.SendPropertyChanging();
					this._UserIP = value;
					this.SendPropertyChanged("UserIP");
					this.OnUserIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int")]
		public System.Nullable<int> FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_CollectedIndocators", Storage="_IndicatorsTable", ThisKey="FK_Indicators", OtherKey="IndicatorsTableID", IsForeignKey=true)]
		public IndicatorsTable IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable.Entity;
			}
			set
			{
				IndicatorsTable previousValue = this._IndicatorsTable.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorsTable.Entity = null;
						previousValue.CollectedIndocators.Remove(this);
					}
					this._IndicatorsTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndocators.Add(this);
						this._FK_Indicators = value.IndicatorsTableID;
					}
					else
					{
						this._FK_Indicators = default(Nullable<int>);
					}
					this.SendPropertyChanged("IndicatorsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedIndocators", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.CollectedIndocators.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndocators.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedIndocators", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.CollectedIndocators.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.CollectedIndocators.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommetntForBasicInReport")]
	public partial class CommetntForBasicInReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FK_BasickParamets;
		
		private System.Nullable<int> _FK_Report;
		
		private string _Comment;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFK_BasickParametsChanging(System.Nullable<int> value);
    partial void OnFK_BasickParametsChanged();
    partial void OnFK_ReportChanging(System.Nullable<int> value);
    partial void OnFK_ReportChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public CommetntForBasicInReport()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasickParamets", DbType="Int")]
		public System.Nullable<int> FK_BasickParamets
		{
			get
			{
				return this._FK_BasickParamets;
			}
			set
			{
				if ((this._FK_BasickParamets != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasickParametsChanging(value);
					this.SendPropertyChanging();
					this._FK_BasickParamets = value;
					this.SendPropertyChanged("FK_BasickParamets");
					this.OnFK_BasickParametsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Report", DbType="Int")]
		public System.Nullable<int> FK_Report
		{
			get
			{
				return this._FK_Report;
			}
			set
			{
				if ((this._FK_Report != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportChanging(value);
					this.SendPropertyChanging();
					this._FK_Report = value;
					this.SendPropertyChanged("FK_Report");
					this.OnFK_ReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_CommetntForBasicInReport", Storage="_BasicParametersTable", ThisKey="FK_BasickParamets", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.CommetntForBasicInReport.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.CommetntForBasicInReport.Add(this);
						this._FK_BasickParamets = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasickParamets = default(Nullable<int>);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CommetntForBasicInReport", Storage="_ReportArchiveTable", ThisKey="FK_Report", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.CommetntForBasicInReport.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.CommetntForBasicInReport.Add(this);
						this._FK_Report = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_Report = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfirmationHistory")]
	public partial class ConfirmationHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _FK_IndicatorsTable;
		
		private System.Nullable<int> _FK_CalculatedParamTable;
		
		private System.Nullable<int> _FK_BasicParamTable;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private System.Nullable<int> _FK_ReportTable;
		
		private string _Comment;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<CalculatedParametrs> _CalculatedParametrs;
		
		private EntityRef<IndicatorsTable> _IndicatorsTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnFK_IndicatorsTableChanging(System.Nullable<int> value);
    partial void OnFK_IndicatorsTableChanged();
    partial void OnFK_CalculatedParamTableChanging(System.Nullable<int> value);
    partial void OnFK_CalculatedParamTableChanged();
    partial void OnFK_BasicParamTableChanging(System.Nullable<int> value);
    partial void OnFK_BasicParamTableChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_ReportTableChanging(System.Nullable<int> value);
    partial void OnFK_ReportTableChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public ConfirmationHistory()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._CalculatedParametrs = default(EntityRef<CalculatedParametrs>);
			this._IndicatorsTable = default(EntityRef<IndicatorsTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorsTable", DbType="Int")]
		public System.Nullable<int> FK_IndicatorsTable
		{
			get
			{
				return this._FK_IndicatorsTable;
			}
			set
			{
				if ((this._FK_IndicatorsTable != value))
				{
					if (this._IndicatorsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorsTable = value;
					this.SendPropertyChanged("FK_IndicatorsTable");
					this.OnFK_IndicatorsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CalculatedParamTable", DbType="Int")]
		public System.Nullable<int> FK_CalculatedParamTable
		{
			get
			{
				return this._FK_CalculatedParamTable;
			}
			set
			{
				if ((this._FK_CalculatedParamTable != value))
				{
					if (this._CalculatedParametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CalculatedParamTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CalculatedParamTable = value;
					this.SendPropertyChanged("FK_CalculatedParamTable");
					this.OnFK_CalculatedParamTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParamTable", DbType="Int")]
		public System.Nullable<int> FK_BasicParamTable
		{
			get
			{
				return this._FK_BasicParamTable;
			}
			set
			{
				if ((this._FK_BasicParamTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasicParamTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParamTable = value;
					this.SendPropertyChanged("FK_BasicParamTable");
					this.OnFK_BasicParamTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportTable", DbType="Int")]
		public System.Nullable<int> FK_ReportTable
		{
			get
			{
				return this._FK_ReportTable;
			}
			set
			{
				if ((this._FK_ReportTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportTable = value;
					this.SendPropertyChanged("FK_ReportTable");
					this.OnFK_ReportTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_ConfirmationHistory", Storage="_BasicParametersTable", ThisKey="FK_BasicParamTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.ConfirmationHistory.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.ConfirmationHistory.Add(this);
						this._FK_BasicParamTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasicParamTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_ConfirmationHistory", Storage="_CalculatedParametrs", ThisKey="FK_CalculatedParamTable", OtherKey="CalculatedParametrsID", IsForeignKey=true)]
		public CalculatedParametrs CalculatedParametrs
		{
			get
			{
				return this._CalculatedParametrs.Entity;
			}
			set
			{
				CalculatedParametrs previousValue = this._CalculatedParametrs.Entity;
				if (((previousValue != value) 
							|| (this._CalculatedParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalculatedParametrs.Entity = null;
						previousValue.ConfirmationHistory.Remove(this);
					}
					this._CalculatedParametrs.Entity = value;
					if ((value != null))
					{
						value.ConfirmationHistory.Add(this);
						this._FK_CalculatedParamTable = value.CalculatedParametrsID;
					}
					else
					{
						this._FK_CalculatedParamTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("CalculatedParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_ConfirmationHistory", Storage="_IndicatorsTable", ThisKey="FK_IndicatorsTable", OtherKey="IndicatorsTableID", IsForeignKey=true)]
		public IndicatorsTable IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable.Entity;
			}
			set
			{
				IndicatorsTable previousValue = this._IndicatorsTable.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorsTable.Entity = null;
						previousValue.ConfirmationHistory.Remove(this);
					}
					this._IndicatorsTable.Entity = value;
					if ((value != null))
					{
						value.ConfirmationHistory.Add(this);
						this._FK_IndicatorsTable = value.IndicatorsTableID;
					}
					else
					{
						this._FK_IndicatorsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("IndicatorsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ConfirmationHistory", Storage="_ReportArchiveTable", ThisKey="FK_ReportTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.ConfirmationHistory.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.ConfirmationHistory.Add(this);
						this._FK_ReportTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConfirmationHistory", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.ConfirmationHistory.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.ConfirmationHistory.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConnectGroup_And_Users")]
	public partial class ConnectGroup_And_Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_UserTable;
		
		private System.Nullable<int> _FK_GroupTable;
		
		private string _Subject_Name;
		
		private EntityRef<StudentGroupsTable> _StudentGroupsTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_UserTableChanging(System.Nullable<int> value);
    partial void OnFK_UserTableChanged();
    partial void OnFK_GroupTableChanging(System.Nullable<int> value);
    partial void OnFK_GroupTableChanged();
    partial void OnSubject_NameChanging(string value);
    partial void OnSubject_NameChanged();
    #endregion
		
		public ConnectGroup_And_Users()
		{
			this._StudentGroupsTable = default(EntityRef<StudentGroupsTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserTable", DbType="Int")]
		public System.Nullable<int> FK_UserTable
		{
			get
			{
				return this._FK_UserTable;
			}
			set
			{
				if ((this._FK_UserTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UserTable = value;
					this.SendPropertyChanged("FK_UserTable");
					this.OnFK_UserTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_GroupTable", DbType="Int")]
		public System.Nullable<int> FK_GroupTable
		{
			get
			{
				return this._FK_GroupTable;
			}
			set
			{
				if ((this._FK_GroupTable != value))
				{
					if (this._StudentGroupsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_GroupTableChanging(value);
					this.SendPropertyChanging();
					this._FK_GroupTable = value;
					this.SendPropertyChanged("FK_GroupTable");
					this.OnFK_GroupTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_Name", DbType="VarChar(50)")]
		public string Subject_Name
		{
			get
			{
				return this._Subject_Name;
			}
			set
			{
				if ((this._Subject_Name != value))
				{
					this.OnSubject_NameChanging(value);
					this.SendPropertyChanging();
					this._Subject_Name = value;
					this.SendPropertyChanged("Subject_Name");
					this.OnSubject_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupsTable_ConnectGroup_And_Users", Storage="_StudentGroupsTable", ThisKey="FK_GroupTable", OtherKey="ID", IsForeignKey=true)]
		public StudentGroupsTable StudentGroupsTable
		{
			get
			{
				return this._StudentGroupsTable.Entity;
			}
			set
			{
				StudentGroupsTable previousValue = this._StudentGroupsTable.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroupsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroupsTable.Entity = null;
						previousValue.ConnectGroup_And_Users.Remove(this);
					}
					this._StudentGroupsTable.Entity = value;
					if ((value != null))
					{
						value.ConnectGroup_And_Users.Add(this);
						this._FK_GroupTable = value.ID;
					}
					else
					{
						this._FK_GroupTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("StudentGroupsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConnectGroup_And_Users", Storage="_UsersTable", ThisKey="FK_UserTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.ConnectGroup_And_Users.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.ConnectGroup_And_Users.Add(this);
						this._FK_UserTable = value.UsersTableID;
					}
					else
					{
						this._FK_UserTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentTable")]
	public partial class DocumentTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentID;
		
		private System.Nullable<int> _DocumentNumber;
		
		private string _DocumentName;
		
		private string _DocumentLink;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _DocumentType;
		
		private EntityRef<DocumentTypes> _DocumentTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentNumberChanging(System.Nullable<int> value);
    partial void OnDocumentNumberChanged();
    partial void OnDocumentNameChanging(string value);
    partial void OnDocumentNameChanged();
    partial void OnDocumentLinkChanging(string value);
    partial void OnDocumentLinkChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnDocumentTypeChanging(System.Nullable<int> value);
    partial void OnDocumentTypeChanged();
    #endregion
		
		public DocumentTable()
		{
			this._DocumentTypes = default(EntityRef<DocumentTypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="Int")]
		public System.Nullable<int> DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentName", DbType="VarChar(2000)")]
		public string DocumentName
		{
			get
			{
				return this._DocumentName;
			}
			set
			{
				if ((this._DocumentName != value))
				{
					this.OnDocumentNameChanging(value);
					this.SendPropertyChanging();
					this._DocumentName = value;
					this.SendPropertyChanged("DocumentName");
					this.OnDocumentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentLink", DbType="VarChar(200)")]
		public string DocumentLink
		{
			get
			{
				return this._DocumentLink;
			}
			set
			{
				if ((this._DocumentLink != value))
				{
					this.OnDocumentLinkChanging(value);
					this.SendPropertyChanging();
					this._DocumentLink = value;
					this.SendPropertyChanged("DocumentLink");
					this.OnDocumentLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="Int")]
		public System.Nullable<int> DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					if (this._DocumentTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentTypes_DocumentTable", Storage="_DocumentTypes", ThisKey="DocumentType", OtherKey="DocumentTypeId", IsForeignKey=true)]
		public DocumentTypes DocumentTypes
		{
			get
			{
				return this._DocumentTypes.Entity;
			}
			set
			{
				DocumentTypes previousValue = this._DocumentTypes.Entity;
				if (((previousValue != value) 
							|| (this._DocumentTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentTypes.Entity = null;
						previousValue.DocumentTable.Remove(this);
					}
					this._DocumentTypes.Entity = value;
					if ((value != null))
					{
						value.DocumentTable.Add(this);
						this._DocumentType = value.DocumentTypeId;
					}
					else
					{
						this._DocumentType = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentTypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentTypes")]
	public partial class DocumentTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentTypeId;
		
		private bool _Active;
		
		private string _TypeName;
		
		private EntitySet<DocumentTable> _DocumentTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentTypeIdChanging(int value);
    partial void OnDocumentTypeIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public DocumentTypes()
		{
			this._DocumentTable = new EntitySet<DocumentTable>(new Action<DocumentTable>(this.attach_DocumentTable), new Action<DocumentTable>(this.detach_DocumentTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentTypeId
		{
			get
			{
				return this._DocumentTypeId;
			}
			set
			{
				if ((this._DocumentTypeId != value))
				{
					this.OnDocumentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DocumentTypeId = value;
					this.SendPropertyChanged("DocumentTypeId");
					this.OnDocumentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(200)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentTypes_DocumentTable", Storage="_DocumentTable", ThisKey="DocumentTypeId", OtherKey="DocumentType")]
		public EntitySet<DocumentTable> DocumentTable
		{
			get
			{
				return this._DocumentTable;
			}
			set
			{
				this._DocumentTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentTable(DocumentTable entity)
		{
			this.SendPropertyChanging();
			entity.DocumentTypes = this;
		}
		
		private void detach_DocumentTable(DocumentTable entity)
		{
			this.SendPropertyChanging();
			entity.DocumentTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EducationCostTable")]
	public partial class EducationCostTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EducationCostTableID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _FK_Specialization;
		
		private System.Nullable<double> _CostOfCommercOch;
		
		private System.Nullable<double> _CostOfCommercOchIn;
		
		private System.Nullable<double> _CostOfCommercZaoch;
		
		private System.Nullable<double> _CostOfCommercEvening;
		
		private System.Nullable<double> _CostOfBudjetOch;
		
		private System.Nullable<double> _CostOfBudjetZaoch;
		
		private EntityRef<SpecializationTable> _SpecializationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEducationCostTableIDChanging(int value);
    partial void OnEducationCostTableIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnFK_SpecializationChanging(System.Nullable<int> value);
    partial void OnFK_SpecializationChanged();
    partial void OnCostOfCommercOchChanging(System.Nullable<double> value);
    partial void OnCostOfCommercOchChanged();
    partial void OnCostOfCommercOchInChanging(System.Nullable<double> value);
    partial void OnCostOfCommercOchInChanged();
    partial void OnCostOfCommercZaochChanging(System.Nullable<double> value);
    partial void OnCostOfCommercZaochChanged();
    partial void OnCostOfCommercEveningChanging(System.Nullable<double> value);
    partial void OnCostOfCommercEveningChanged();
    partial void OnCostOfBudjetOchChanging(System.Nullable<double> value);
    partial void OnCostOfBudjetOchChanged();
    partial void OnCostOfBudjetZaochChanging(System.Nullable<double> value);
    partial void OnCostOfBudjetZaochChanged();
    #endregion
		
		public EducationCostTable()
		{
			this._SpecializationTable = default(EntityRef<SpecializationTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationCostTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EducationCostTableID
		{
			get
			{
				return this._EducationCostTableID;
			}
			set
			{
				if ((this._EducationCostTableID != value))
				{
					this.OnEducationCostTableIDChanging(value);
					this.SendPropertyChanging();
					this._EducationCostTableID = value;
					this.SendPropertyChanged("EducationCostTableID");
					this.OnEducationCostTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Specialization", DbType="Int")]
		public System.Nullable<int> FK_Specialization
		{
			get
			{
				return this._FK_Specialization;
			}
			set
			{
				if ((this._FK_Specialization != value))
				{
					if (this._SpecializationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SpecializationChanging(value);
					this.SendPropertyChanging();
					this._FK_Specialization = value;
					this.SendPropertyChanged("FK_Specialization");
					this.OnFK_SpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfCommercOch", DbType="Float")]
		public System.Nullable<double> CostOfCommercOch
		{
			get
			{
				return this._CostOfCommercOch;
			}
			set
			{
				if ((this._CostOfCommercOch != value))
				{
					this.OnCostOfCommercOchChanging(value);
					this.SendPropertyChanging();
					this._CostOfCommercOch = value;
					this.SendPropertyChanged("CostOfCommercOch");
					this.OnCostOfCommercOchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfCommercOchIn", DbType="Float")]
		public System.Nullable<double> CostOfCommercOchIn
		{
			get
			{
				return this._CostOfCommercOchIn;
			}
			set
			{
				if ((this._CostOfCommercOchIn != value))
				{
					this.OnCostOfCommercOchInChanging(value);
					this.SendPropertyChanging();
					this._CostOfCommercOchIn = value;
					this.SendPropertyChanged("CostOfCommercOchIn");
					this.OnCostOfCommercOchInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfCommercZaoch", DbType="Float")]
		public System.Nullable<double> CostOfCommercZaoch
		{
			get
			{
				return this._CostOfCommercZaoch;
			}
			set
			{
				if ((this._CostOfCommercZaoch != value))
				{
					this.OnCostOfCommercZaochChanging(value);
					this.SendPropertyChanging();
					this._CostOfCommercZaoch = value;
					this.SendPropertyChanged("CostOfCommercZaoch");
					this.OnCostOfCommercZaochChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfCommercEvening", DbType="Float")]
		public System.Nullable<double> CostOfCommercEvening
		{
			get
			{
				return this._CostOfCommercEvening;
			}
			set
			{
				if ((this._CostOfCommercEvening != value))
				{
					this.OnCostOfCommercEveningChanging(value);
					this.SendPropertyChanging();
					this._CostOfCommercEvening = value;
					this.SendPropertyChanged("CostOfCommercEvening");
					this.OnCostOfCommercEveningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfBudjetOch", DbType="Float")]
		public System.Nullable<double> CostOfBudjetOch
		{
			get
			{
				return this._CostOfBudjetOch;
			}
			set
			{
				if ((this._CostOfBudjetOch != value))
				{
					this.OnCostOfBudjetOchChanging(value);
					this.SendPropertyChanging();
					this._CostOfBudjetOch = value;
					this.SendPropertyChanged("CostOfBudjetOch");
					this.OnCostOfBudjetOchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfBudjetZaoch", DbType="Float")]
		public System.Nullable<double> CostOfBudjetZaoch
		{
			get
			{
				return this._CostOfBudjetZaoch;
			}
			set
			{
				if ((this._CostOfBudjetZaoch != value))
				{
					this.OnCostOfBudjetZaochChanging(value);
					this.SendPropertyChanging();
					this._CostOfBudjetZaoch = value;
					this.SendPropertyChanged("CostOfBudjetZaoch");
					this.OnCostOfBudjetZaochChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_EducationCostTable", Storage="_SpecializationTable", ThisKey="FK_Specialization", OtherKey="SpecializationTableID", IsForeignKey=true)]
		public SpecializationTable SpecializationTable
		{
			get
			{
				return this._SpecializationTable.Entity;
			}
			set
			{
				SpecializationTable previousValue = this._SpecializationTable.Entity;
				if (((previousValue != value) 
							|| (this._SpecializationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecializationTable.Entity = null;
						previousValue.EducationCostTable.Remove(this);
					}
					this._SpecializationTable.Entity = value;
					if ((value != null))
					{
						value.EducationCostTable.Add(this);
						this._FK_Specialization = value.SpecializationTableID;
					}
					else
					{
						this._FK_Specialization = default(Nullable<int>);
					}
					this.SendPropertyChanged("SpecializationTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailCopies")]
	public partial class EmailCopies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _EmailTo;
		
		private string _EmailFrom;
		
		private string _EmailTitle;
		
		private string _EmailContent;
		
		private string _EmailAttachment;
		
		private System.Nullable<System.DateTime> _SendDateTime;
		
		private System.Nullable<bool> _SendOk;
		
		private string _ErrorMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailToChanging(string value);
    partial void OnEmailToChanged();
    partial void OnEmailFromChanging(string value);
    partial void OnEmailFromChanged();
    partial void OnEmailTitleChanging(string value);
    partial void OnEmailTitleChanged();
    partial void OnEmailContentChanging(string value);
    partial void OnEmailContentChanged();
    partial void OnEmailAttachmentChanging(string value);
    partial void OnEmailAttachmentChanged();
    partial void OnSendDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSendDateTimeChanged();
    partial void OnSendOkChanging(System.Nullable<bool> value);
    partial void OnSendOkChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public EmailCopies()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTo", DbType="VarChar(MAX)")]
		public string EmailTo
		{
			get
			{
				return this._EmailTo;
			}
			set
			{
				if ((this._EmailTo != value))
				{
					this.OnEmailToChanging(value);
					this.SendPropertyChanging();
					this._EmailTo = value;
					this.SendPropertyChanged("EmailTo");
					this.OnEmailToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailFrom", DbType="VarChar(MAX)")]
		public string EmailFrom
		{
			get
			{
				return this._EmailFrom;
			}
			set
			{
				if ((this._EmailFrom != value))
				{
					this.OnEmailFromChanging(value);
					this.SendPropertyChanging();
					this._EmailFrom = value;
					this.SendPropertyChanged("EmailFrom");
					this.OnEmailFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTitle", DbType="VarChar(MAX)")]
		public string EmailTitle
		{
			get
			{
				return this._EmailTitle;
			}
			set
			{
				if ((this._EmailTitle != value))
				{
					this.OnEmailTitleChanging(value);
					this.SendPropertyChanging();
					this._EmailTitle = value;
					this.SendPropertyChanged("EmailTitle");
					this.OnEmailTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailContent", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string EmailContent
		{
			get
			{
				return this._EmailContent;
			}
			set
			{
				if ((this._EmailContent != value))
				{
					this.OnEmailContentChanging(value);
					this.SendPropertyChanging();
					this._EmailContent = value;
					this.SendPropertyChanged("EmailContent");
					this.OnEmailContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAttachment", DbType="VarChar(MAX)")]
		public string EmailAttachment
		{
			get
			{
				return this._EmailAttachment;
			}
			set
			{
				if ((this._EmailAttachment != value))
				{
					this.OnEmailAttachmentChanging(value);
					this.SendPropertyChanging();
					this._EmailAttachment = value;
					this.SendPropertyChanged("EmailAttachment");
					this.OnEmailAttachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SendDateTime
		{
			get
			{
				return this._SendDateTime;
			}
			set
			{
				if ((this._SendDateTime != value))
				{
					this.OnSendDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SendDateTime = value;
					this.SendPropertyChanged("SendDateTime");
					this.OnSendDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendOk", DbType="Bit")]
		public System.Nullable<bool> SendOk
		{
			get
			{
				return this._SendOk;
			}
			set
			{
				if ((this._SendOk != value))
				{
					this.OnSendOkChanging(value);
					this.SendPropertyChanging();
					this._SendOk = value;
					this.SendPropertyChanged("SendOk");
					this.OnSendOkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailSendHistory")]
	public partial class EmailSendHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_ReportsArchiveTable;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Value;
		
		private System.Nullable<int> _Count;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ReportsArchiveTableChanging(System.Nullable<int> value);
    partial void OnFK_ReportsArchiveTableChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    #endregion
		
		public EmailSendHistory()
		{
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportsArchiveTable", DbType="Int")]
		public System.Nullable<int> FK_ReportsArchiveTable
		{
			get
			{
				return this._FK_ReportsArchiveTable;
			}
			set
			{
				if ((this._FK_ReportsArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportsArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportsArchiveTable = value;
					this.SendPropertyChanged("FK_ReportsArchiveTable");
					this.OnFK_ReportsArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_EmailSendHistory", Storage="_ReportArchiveTable", ThisKey="FK_ReportsArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.EmailSendHistory.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.EmailSendHistory.Add(this);
						this._FK_ReportsArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportsArchiveTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailSendTable")]
	public partial class EmailSendTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _SMTPName;
		
		private System.Nullable<int> _Port;
		
		private string _Password;
		
		private System.Nullable<long> _SendOk;
		
		private System.Nullable<long> _SendError;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSMTPNameChanging(string value);
    partial void OnSMTPNameChanged();
    partial void OnPortChanging(System.Nullable<int> value);
    partial void OnPortChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSendOkChanging(System.Nullable<long> value);
    partial void OnSendOkChanged();
    partial void OnSendErrorChanging(System.Nullable<long> value);
    partial void OnSendErrorChanged();
    #endregion
		
		public EmailSendTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(500)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMTPName", DbType="VarChar(500)")]
		public string SMTPName
		{
			get
			{
				return this._SMTPName;
			}
			set
			{
				if ((this._SMTPName != value))
				{
					this.OnSMTPNameChanging(value);
					this.SendPropertyChanging();
					this._SMTPName = value;
					this.SendPropertyChanged("SMTPName");
					this.OnSMTPNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int")]
		public System.Nullable<int> Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(500)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendOk", DbType="BigInt")]
		public System.Nullable<long> SendOk
		{
			get
			{
				return this._SendOk;
			}
			set
			{
				if ((this._SendOk != value))
				{
					this.OnSendOkChanging(value);
					this.SendPropertyChanging();
					this._SendOk = value;
					this.SendPropertyChanged("SendOk");
					this.OnSendOkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendError", DbType="BigInt")]
		public System.Nullable<long> SendError
		{
			get
			{
				return this._SendError;
			}
			set
			{
				if ((this._SendError != value))
				{
					this.OnSendErrorChanging(value);
					this.SendPropertyChanging();
					this._SendError = value;
					this.SendPropertyChanged("SendError");
					this.OnSendErrorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailTemplate")]
	public partial class EmailTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _EmailTitle;
		
		private string _EmailContent;
		
		private System.Nullable<bool> _Active;
		
		private string _Comment;
		
		private string _NameRus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailTitleChanging(string value);
    partial void OnEmailTitleChanged();
    partial void OnEmailContentChanging(string value);
    partial void OnEmailContentChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnNameRusChanging(string value);
    partial void OnNameRusChanged();
    #endregion
		
		public EmailTemplate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTitle", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string EmailTitle
		{
			get
			{
				return this._EmailTitle;
			}
			set
			{
				if ((this._EmailTitle != value))
				{
					this.OnEmailTitleChanging(value);
					this.SendPropertyChanging();
					this._EmailTitle = value;
					this.SendPropertyChanged("EmailTitle");
					this.OnEmailTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailContent", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string EmailContent
		{
			get
			{
				return this._EmailContent;
			}
			set
			{
				if ((this._EmailContent != value))
				{
					this.OnEmailContentChanging(value);
					this.SendPropertyChanging();
					this._EmailContent = value;
					this.SendPropertyChanged("EmailContent");
					this.OnEmailContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameRus", DbType="VarChar(500)")]
		public string NameRus
		{
			get
			{
				return this._NameRus;
			}
			set
			{
				if ((this._NameRus != value))
				{
					this.OnNameRusChanging(value);
					this.SendPropertyChanging();
					this._NameRus = value;
					this.SendPropertyChanged("NameRus");
					this.OnNameRusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldOfExpertise")]
	public partial class FieldOfExpertise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldOfExpertiseID;
		
		private bool _Active;
		
		private string _Name;
		
		private EntitySet<BasicParametrAdditional> _BasicParametrAdditional;
		
		private EntitySet<SpecializationTable> _SpecializationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldOfExpertiseIDChanging(int value);
    partial void OnFieldOfExpertiseIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FieldOfExpertise()
		{
			this._BasicParametrAdditional = new EntitySet<BasicParametrAdditional>(new Action<BasicParametrAdditional>(this.attach_BasicParametrAdditional), new Action<BasicParametrAdditional>(this.detach_BasicParametrAdditional));
			this._SpecializationTable = new EntitySet<SpecializationTable>(new Action<SpecializationTable>(this.attach_SpecializationTable), new Action<SpecializationTable>(this.detach_SpecializationTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldOfExpertiseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldOfExpertiseID
		{
			get
			{
				return this._FieldOfExpertiseID;
			}
			set
			{
				if ((this._FieldOfExpertiseID != value))
				{
					this.OnFieldOfExpertiseIDChanging(value);
					this.SendPropertyChanging();
					this._FieldOfExpertiseID = value;
					this.SendPropertyChanged("FieldOfExpertiseID");
					this.OnFieldOfExpertiseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldOfExpertise_BasicParametrAdditional", Storage="_BasicParametrAdditional", ThisKey="FieldOfExpertiseID", OtherKey="FK_FieldOfExpertise")]
		public EntitySet<BasicParametrAdditional> BasicParametrAdditional
		{
			get
			{
				return this._BasicParametrAdditional;
			}
			set
			{
				this._BasicParametrAdditional.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldOfExpertise_SpecializationTable", Storage="_SpecializationTable", ThisKey="FieldOfExpertiseID", OtherKey="FK_FieldOfExpertise")]
		public EntitySet<SpecializationTable> SpecializationTable
		{
			get
			{
				return this._SpecializationTable;
			}
			set
			{
				this._SpecializationTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicParametrAdditional(BasicParametrAdditional entity)
		{
			this.SendPropertyChanging();
			entity.FieldOfExpertise = this;
		}
		
		private void detach_BasicParametrAdditional(BasicParametrAdditional entity)
		{
			this.SendPropertyChanging();
			entity.FieldOfExpertise = null;
		}
		
		private void attach_SpecializationTable(SpecializationTable entity)
		{
			this.SendPropertyChanging();
			entity.FieldOfExpertise = this;
		}
		
		private void detach_SpecializationTable(SpecializationTable entity)
		{
			this.SendPropertyChanging();
			entity.FieldOfExpertise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FifthLevelSubdivisionTable")]
	public partial class FifthLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FifthLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_FourthLevelSubdivisionTable;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CollectedIndicatorsForR> _CollectedIndicatorsForR;
		
		private EntitySet<ReportArchiveAndLevelMappingTable> _ReportArchiveAndLevelMappingTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFifthLevelSubdivisionTableIDChanging(int value);
    partial void OnFifthLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_FourthLevelSubdivisionTableChanging(int value);
    partial void OnFK_FourthLevelSubdivisionTableChanged();
    #endregion
		
		public FifthLevelSubdivisionTable()
		{
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CollectedIndicatorsForR = new EntitySet<CollectedIndicatorsForR>(new Action<CollectedIndicatorsForR>(this.attach_CollectedIndicatorsForR), new Action<CollectedIndicatorsForR>(this.detach_CollectedIndicatorsForR));
			this._ReportArchiveAndLevelMappingTable = new EntitySet<ReportArchiveAndLevelMappingTable>(new Action<ReportArchiveAndLevelMappingTable>(this.attach_ReportArchiveAndLevelMappingTable), new Action<ReportArchiveAndLevelMappingTable>(this.detach_ReportArchiveAndLevelMappingTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FifthLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FifthLevelSubdivisionTableID
		{
			get
			{
				return this._FifthLevelSubdivisionTableID;
			}
			set
			{
				if ((this._FifthLevelSubdivisionTableID != value))
				{
					this.OnFifthLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._FifthLevelSubdivisionTableID = value;
					this.SendPropertyChanged("FifthLevelSubdivisionTableID");
					this.OnFifthLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_FourthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FourthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLevelSubdivisionTable != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FourthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLevelSubdivisionTable");
					this.OnFK_FourthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="FifthLevelSubdivisionTableID", OtherKey="FK_FifthLevelSubdivisionTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_CollectedIndicatorsForR", ThisKey="FifthLevelSubdivisionTableID", OtherKey="FK_FifthLevelSubdivisionTable")]
		public EntitySet<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this._CollectedIndicatorsForR;
			}
			set
			{
				this._CollectedIndicatorsForR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_ReportArchiveAndLevelMappingTable", ThisKey="FifthLevelSubdivisionTableID", OtherKey="FK_FifthLevelSubdivisionTable")]
		public EntitySet<ReportArchiveAndLevelMappingTable> ReportArchiveAndLevelMappingTable
		{
			get
			{
				return this._ReportArchiveAndLevelMappingTable;
			}
			set
			{
				this._ReportArchiveAndLevelMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="FifthLevelSubdivisionTableID", OtherKey="FK_FifthLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_FifthLevelSubdivisionTable", Storage="_FourthLevelSubdivisionTable", ThisKey="FK_FourthLevelSubdivisionTable", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.FifthLevelSubdivisionTable.Remove(this);
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.FifthLevelSubdivisionTable.Add(this);
						this._FK_FourthLevelSubdivisionTable = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FourthLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = null;
		}
		
		private void attach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = null;
		}
		
		private void attach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = this;
		}
		
		private void detach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FifthLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FirstLevelSubdivisionTable")]
	public partial class FirstLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FirstLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private System.Nullable<int> _FK_ZeroLevelSubvisionTable;
		
		private string _AbbRu;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CollectedIndicatorsForR> _CollectedIndicatorsForR;
		
		private EntitySet<Rank_StructureRaitings> _Rank_StructureRaitings;
		
		private EntitySet<ReportArchiveAndLevelMappingTable> _ReportArchiveAndLevelMappingTable;
		
		private EntitySet<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<ZeroLevelSubdivisionTable> _ZeroLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstLevelSubdivisionTableIDChanging(int value);
    partial void OnFirstLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_ZeroLevelSubvisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ZeroLevelSubvisionTableChanged();
    partial void OnAbbRuChanging(string value);
    partial void OnAbbRuChanged();
    #endregion
		
		public FirstLevelSubdivisionTable()
		{
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CollectedIndicatorsForR = new EntitySet<CollectedIndicatorsForR>(new Action<CollectedIndicatorsForR>(this.attach_CollectedIndicatorsForR), new Action<CollectedIndicatorsForR>(this.detach_CollectedIndicatorsForR));
			this._Rank_StructureRaitings = new EntitySet<Rank_StructureRaitings>(new Action<Rank_StructureRaitings>(this.attach_Rank_StructureRaitings), new Action<Rank_StructureRaitings>(this.detach_Rank_StructureRaitings));
			this._ReportArchiveAndLevelMappingTable = new EntitySet<ReportArchiveAndLevelMappingTable>(new Action<ReportArchiveAndLevelMappingTable>(this.attach_ReportArchiveAndLevelMappingTable), new Action<ReportArchiveAndLevelMappingTable>(this.detach_ReportArchiveAndLevelMappingTable));
			this._SecondLevelSubdivisionTable = new EntitySet<SecondLevelSubdivisionTable>(new Action<SecondLevelSubdivisionTable>(this.attach_SecondLevelSubdivisionTable), new Action<SecondLevelSubdivisionTable>(this.detach_SecondLevelSubdivisionTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._ZeroLevelSubdivisionTable = default(EntityRef<ZeroLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FirstLevelSubdivisionTableID
		{
			get
			{
				return this._FirstLevelSubdivisionTableID;
			}
			set
			{
				if ((this._FirstLevelSubdivisionTableID != value))
				{
					this.OnFirstLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._FirstLevelSubdivisionTableID = value;
					this.SendPropertyChanged("FirstLevelSubdivisionTableID");
					this.OnFirstLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ZeroLevelSubvisionTable", DbType="Int")]
		public System.Nullable<int> FK_ZeroLevelSubvisionTable
		{
			get
			{
				return this._FK_ZeroLevelSubvisionTable;
			}
			set
			{
				if ((this._FK_ZeroLevelSubvisionTable != value))
				{
					if (this._ZeroLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ZeroLevelSubvisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ZeroLevelSubvisionTable = value;
					this.SendPropertyChanged("FK_ZeroLevelSubvisionTable");
					this.OnFK_ZeroLevelSubvisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbRu", DbType="VarChar(50)")]
		public string AbbRu
		{
			get
			{
				return this._AbbRu;
			}
			set
			{
				if ((this._AbbRu != value))
				{
					this.OnAbbRuChanging(value);
					this.SendPropertyChanging();
					this._AbbRu = value;
					this.SendPropertyChanged("AbbRu");
					this.OnAbbRuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_CollectedIndicatorsForR", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this._CollectedIndicatorsForR;
			}
			set
			{
				this._CollectedIndicatorsForR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_Rank_StructureRaitings", Storage="_Rank_StructureRaitings", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevel")]
		public EntitySet<Rank_StructureRaitings> Rank_StructureRaitings
		{
			get
			{
				return this._Rank_StructureRaitings;
			}
			set
			{
				this._Rank_StructureRaitings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_ReportArchiveAndLevelMappingTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubmisionTableId")]
		public EntitySet<ReportArchiveAndLevelMappingTable> ReportArchiveAndLevelMappingTable
		{
			get
			{
				return this._ReportArchiveAndLevelMappingTable;
			}
			set
			{
				this._ReportArchiveAndLevelMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_SecondLevelSubdivisionTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<SecondLevelSubdivisionTable> SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable;
			}
			set
			{
				this._SecondLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="FirstLevelSubdivisionTableID", OtherKey="FK_FirstLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZeroLevelSubdivisionTable_FirstLevelSubdivisionTable", Storage="_ZeroLevelSubdivisionTable", ThisKey="FK_ZeroLevelSubvisionTable", OtherKey="ZeroLevelSubdivisionTableID", IsForeignKey=true)]
		public ZeroLevelSubdivisionTable ZeroLevelSubdivisionTable
		{
			get
			{
				return this._ZeroLevelSubdivisionTable.Entity;
			}
			set
			{
				ZeroLevelSubdivisionTable previousValue = this._ZeroLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ZeroLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZeroLevelSubdivisionTable.Entity = null;
						previousValue.FirstLevelSubdivisionTable.Remove(this);
					}
					this._ZeroLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.FirstLevelSubdivisionTable.Add(this);
						this._FK_ZeroLevelSubvisionTable = value.ZeroLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ZeroLevelSubvisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ZeroLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_Rank_StructureRaitings(Rank_StructureRaitings entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_Rank_StructureRaitings(Rank_StructureRaitings entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_SecondLevelSubdivisionTable(SecondLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_SecondLevelSubdivisionTable(SecondLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FirstLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FourthLevelParametrs")]
	public partial class FourthLevelParametrs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FourthLevelParametrsID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<bool> _IsModernEducationTechnologies;
		
		private System.Nullable<bool> _IsNetworkComunication;
		
		private System.Nullable<bool> _IsInvalidStudentsFacilities;
		
		private System.Nullable<bool> _IsForeignStudentsAccept;
		
		private System.Nullable<int> _SpecType;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFourthLevelParametrsIDChanging(int value);
    partial void OnFourthLevelParametrsIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnIsModernEducationTechnologiesChanging(System.Nullable<bool> value);
    partial void OnIsModernEducationTechnologiesChanged();
    partial void OnIsNetworkComunicationChanging(System.Nullable<bool> value);
    partial void OnIsNetworkComunicationChanged();
    partial void OnIsInvalidStudentsFacilitiesChanging(System.Nullable<bool> value);
    partial void OnIsInvalidStudentsFacilitiesChanged();
    partial void OnIsForeignStudentsAcceptChanging(System.Nullable<bool> value);
    partial void OnIsForeignStudentsAcceptChanged();
    partial void OnSpecTypeChanging(System.Nullable<int> value);
    partial void OnSpecTypeChanged();
    #endregion
		
		public FourthLevelParametrs()
		{
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FourthLevelParametrsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FourthLevelParametrsID
		{
			get
			{
				return this._FourthLevelParametrsID;
			}
			set
			{
				if ((this._FourthLevelParametrsID != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFourthLevelParametrsIDChanging(value);
					this.SendPropertyChanging();
					this._FourthLevelParametrsID = value;
					this.SendPropertyChanged("FourthLevelParametrsID");
					this.OnFourthLevelParametrsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsModernEducationTechnologies", DbType="Bit")]
		public System.Nullable<bool> IsModernEducationTechnologies
		{
			get
			{
				return this._IsModernEducationTechnologies;
			}
			set
			{
				if ((this._IsModernEducationTechnologies != value))
				{
					this.OnIsModernEducationTechnologiesChanging(value);
					this.SendPropertyChanging();
					this._IsModernEducationTechnologies = value;
					this.SendPropertyChanged("IsModernEducationTechnologies");
					this.OnIsModernEducationTechnologiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNetworkComunication", DbType="Bit")]
		public System.Nullable<bool> IsNetworkComunication
		{
			get
			{
				return this._IsNetworkComunication;
			}
			set
			{
				if ((this._IsNetworkComunication != value))
				{
					this.OnIsNetworkComunicationChanging(value);
					this.SendPropertyChanging();
					this._IsNetworkComunication = value;
					this.SendPropertyChanged("IsNetworkComunication");
					this.OnIsNetworkComunicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInvalidStudentsFacilities", DbType="Bit")]
		public System.Nullable<bool> IsInvalidStudentsFacilities
		{
			get
			{
				return this._IsInvalidStudentsFacilities;
			}
			set
			{
				if ((this._IsInvalidStudentsFacilities != value))
				{
					this.OnIsInvalidStudentsFacilitiesChanging(value);
					this.SendPropertyChanging();
					this._IsInvalidStudentsFacilities = value;
					this.SendPropertyChanged("IsInvalidStudentsFacilities");
					this.OnIsInvalidStudentsFacilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForeignStudentsAccept", DbType="Bit")]
		public System.Nullable<bool> IsForeignStudentsAccept
		{
			get
			{
				return this._IsForeignStudentsAccept;
			}
			set
			{
				if ((this._IsForeignStudentsAccept != value))
				{
					this.OnIsForeignStudentsAcceptChanging(value);
					this.SendPropertyChanging();
					this._IsForeignStudentsAccept = value;
					this.SendPropertyChanged("IsForeignStudentsAccept");
					this.OnIsForeignStudentsAcceptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecType", DbType="Int")]
		public System.Nullable<int> SpecType
		{
			get
			{
				return this._SpecType;
			}
			set
			{
				if ((this._SpecType != value))
				{
					this.OnSpecTypeChanging(value);
					this.SendPropertyChanging();
					this._SpecType = value;
					this.SendPropertyChanged("SpecType");
					this.OnSpecTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_FourthLevelParametrs", Storage="_FourthLevelSubdivisionTable", ThisKey="FourthLevelParametrsID", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.FourthLevelParametrs = null;
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.FourthLevelParametrs = this;
						this._FourthLevelParametrsID = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FourthLevelParametrsID = default(int);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FourthLevelSubdivisionTable")]
	public partial class FourthLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FourthLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_ThirdLevelSubdivisionTable;
		
		private int _FK_Specialization;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CollectedIndicatorsForR> _CollectedIndicatorsForR;
		
		private EntitySet<FifthLevelSubdivisionTable> _FifthLevelSubdivisionTable;
		
		private EntityRef<FourthLevelParametrs> _FourthLevelParametrs;
		
		private EntitySet<ReportArchiveAndLevelMappingTable> _ReportArchiveAndLevelMappingTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<SpecializationTable> _SpecializationTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFourthLevelSubdivisionTableIDChanging(int value);
    partial void OnFourthLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(int value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_SpecializationChanging(int value);
    partial void OnFK_SpecializationChanged();
    #endregion
		
		public FourthLevelSubdivisionTable()
		{
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CollectedIndicatorsForR = new EntitySet<CollectedIndicatorsForR>(new Action<CollectedIndicatorsForR>(this.attach_CollectedIndicatorsForR), new Action<CollectedIndicatorsForR>(this.detach_CollectedIndicatorsForR));
			this._FifthLevelSubdivisionTable = new EntitySet<FifthLevelSubdivisionTable>(new Action<FifthLevelSubdivisionTable>(this.attach_FifthLevelSubdivisionTable), new Action<FifthLevelSubdivisionTable>(this.detach_FifthLevelSubdivisionTable));
			this._FourthLevelParametrs = default(EntityRef<FourthLevelParametrs>);
			this._ReportArchiveAndLevelMappingTable = new EntitySet<ReportArchiveAndLevelMappingTable>(new Action<ReportArchiveAndLevelMappingTable>(this.attach_ReportArchiveAndLevelMappingTable), new Action<ReportArchiveAndLevelMappingTable>(this.detach_ReportArchiveAndLevelMappingTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._SpecializationTable = default(EntityRef<SpecializationTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FourthLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FourthLevelSubdivisionTableID
		{
			get
			{
				return this._FourthLevelSubdivisionTableID;
			}
			set
			{
				if ((this._FourthLevelSubdivisionTableID != value))
				{
					this.OnFourthLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._FourthLevelSubdivisionTableID = value;
					this.SendPropertyChanged("FourthLevelSubdivisionTableID");
					this.OnFourthLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Specialization", DbType="Int NOT NULL")]
		public int FK_Specialization
		{
			get
			{
				return this._FK_Specialization;
			}
			set
			{
				if ((this._FK_Specialization != value))
				{
					if (this._SpecializationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SpecializationChanging(value);
					this.SendPropertyChanging();
					this._FK_Specialization = value;
					this.SendPropertyChanged("FK_Specialization");
					this.OnFK_SpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FK_FourthLevelSubdivisionTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_CollectedIndicatorsForR", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FK_FourthLelevlSubdivisionTable")]
		public EntitySet<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this._CollectedIndicatorsForR;
			}
			set
			{
				this._CollectedIndicatorsForR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_FifthLevelSubdivisionTable", Storage="_FifthLevelSubdivisionTable", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FK_FourthLevelSubdivisionTable")]
		public EntitySet<FifthLevelSubdivisionTable> FifthLevelSubdivisionTable
		{
			get
			{
				return this._FifthLevelSubdivisionTable;
			}
			set
			{
				this._FifthLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_FourthLevelParametrs", Storage="_FourthLevelParametrs", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FourthLevelParametrsID", IsUnique=true, IsForeignKey=false)]
		public FourthLevelParametrs FourthLevelParametrs
		{
			get
			{
				return this._FourthLevelParametrs.Entity;
			}
			set
			{
				FourthLevelParametrs previousValue = this._FourthLevelParametrs.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelParametrs.Entity = null;
						previousValue.FourthLevelSubdivisionTable = null;
					}
					this._FourthLevelParametrs.Entity = value;
					if ((value != null))
					{
						value.FourthLevelSubdivisionTable = this;
					}
					this.SendPropertyChanged("FourthLevelParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_ReportArchiveAndLevelMappingTable", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FK_FourthLevelSubdivisionTable")]
		public EntitySet<ReportArchiveAndLevelMappingTable> ReportArchiveAndLevelMappingTable
		{
			get
			{
				return this._ReportArchiveAndLevelMappingTable;
			}
			set
			{
				this._ReportArchiveAndLevelMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="FourthLevelSubdivisionTableID", OtherKey="FK_FourthLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_FourthLevelSubdivisionTable", Storage="_SpecializationTable", ThisKey="FK_Specialization", OtherKey="SpecializationTableID", IsForeignKey=true)]
		public SpecializationTable SpecializationTable
		{
			get
			{
				return this._SpecializationTable.Entity;
			}
			set
			{
				SpecializationTable previousValue = this._SpecializationTable.Entity;
				if (((previousValue != value) 
							|| (this._SpecializationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecializationTable.Entity = null;
						previousValue.FourthLevelSubdivisionTable.Remove(this);
					}
					this._SpecializationTable.Entity = value;
					if ((value != null))
					{
						value.FourthLevelSubdivisionTable.Add(this);
						this._FK_Specialization = value.SpecializationTableID;
					}
					else
					{
						this._FK_Specialization = default(int);
					}
					this.SendPropertyChanged("SpecializationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_FourthLevelSubdivisionTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.FourthLevelSubdivisionTable.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.FourthLevelSubdivisionTable.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = null;
		}
		
		private void attach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = null;
		}
		
		private void attach_FifthLevelSubdivisionTable(FifthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = this;
		}
		
		private void detach_FifthLevelSubdivisionTable(FifthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = null;
		}
		
		private void attach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = this;
		}
		
		private void detach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.FourthLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorClass")]
	public partial class IndicatorClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorClassID;
		
		private string _ClassName;
		
		private EntitySet<IndicatorsTable> _IndicatorsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorClassIDChanging(int value);
    partial void OnIndicatorClassIDChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    #endregion
		
		public IndicatorClass()
		{
			this._IndicatorsTable = new EntitySet<IndicatorsTable>(new Action<IndicatorsTable>(this.attach_IndicatorsTable), new Action<IndicatorsTable>(this.detach_IndicatorsTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorClassID
		{
			get
			{
				return this._IndicatorClassID;
			}
			set
			{
				if ((this._IndicatorClassID != value))
				{
					this.OnIndicatorClassIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorClassID = value;
					this.SendPropertyChanged("IndicatorClassID");
					this.OnIndicatorClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="VarChar(500)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorClass_IndicatorsTable", Storage="_IndicatorsTable", ThisKey="IndicatorClassID", OtherKey="FK_IndicatorClass")]
		public EntitySet<IndicatorsTable> IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable;
			}
			set
			{
				this._IndicatorsTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IndicatorsTable(IndicatorsTable entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorClass = this;
		}
		
		private void detach_IndicatorsTable(IndicatorsTable entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorsAndRolesMappingTable")]
	public partial class IndicatorsAndRolesMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CalculatedIndicatorsAndRolesWithLeadersID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_RolesTable;
		
		private System.Nullable<int> _FK_Indicators;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanConfirm;
		
		private EntityRef<IndicatorsTable> _IndicatorsTable;
		
		private EntityRef<RolesTable> _RolesTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalculatedIndicatorsAndRolesWithLeadersIDChanging(int value);
    partial void OnCalculatedIndicatorsAndRolesWithLeadersIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_RolesTableChanging(System.Nullable<int> value);
    partial void OnFK_RolesTableChanged();
    partial void OnFK_IndicatorsChanging(System.Nullable<int> value);
    partial void OnFK_IndicatorsChanged();
    partial void OnCanEditChanging(System.Nullable<bool> value);
    partial void OnCanEditChanged();
    partial void OnCanViewChanging(System.Nullable<bool> value);
    partial void OnCanViewChanged();
    partial void OnCanConfirmChanging(System.Nullable<bool> value);
    partial void OnCanConfirmChanged();
    #endregion
		
		public IndicatorsAndRolesMappingTable()
		{
			this._IndicatorsTable = default(EntityRef<IndicatorsTable>);
			this._RolesTable = default(EntityRef<RolesTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedIndicatorsAndRolesWithLeadersID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CalculatedIndicatorsAndRolesWithLeadersID
		{
			get
			{
				return this._CalculatedIndicatorsAndRolesWithLeadersID;
			}
			set
			{
				if ((this._CalculatedIndicatorsAndRolesWithLeadersID != value))
				{
					this.OnCalculatedIndicatorsAndRolesWithLeadersIDChanging(value);
					this.SendPropertyChanging();
					this._CalculatedIndicatorsAndRolesWithLeadersID = value;
					this.SendPropertyChanged("CalculatedIndicatorsAndRolesWithLeadersID");
					this.OnCalculatedIndicatorsAndRolesWithLeadersIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_RolesTable", DbType="Int")]
		public System.Nullable<int> FK_RolesTable
		{
			get
			{
				return this._FK_RolesTable;
			}
			set
			{
				if ((this._FK_RolesTable != value))
				{
					if (this._RolesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RolesTableChanging(value);
					this.SendPropertyChanging();
					this._FK_RolesTable = value;
					this.SendPropertyChanged("FK_RolesTable");
					this.OnFK_RolesTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Indicators", DbType="Int")]
		public System.Nullable<int> FK_Indicators
		{
			get
			{
				return this._FK_Indicators;
			}
			set
			{
				if ((this._FK_Indicators != value))
				{
					if (this._IndicatorsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorsChanging(value);
					this.SendPropertyChanging();
					this._FK_Indicators = value;
					this.SendPropertyChanged("FK_Indicators");
					this.OnFK_IndicatorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanConfirm", DbType="Bit")]
		public System.Nullable<bool> CanConfirm
		{
			get
			{
				return this._CanConfirm;
			}
			set
			{
				if ((this._CanConfirm != value))
				{
					this.OnCanConfirmChanging(value);
					this.SendPropertyChanging();
					this._CanConfirm = value;
					this.SendPropertyChanged("CanConfirm");
					this.OnCanConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_IndicatorsAndRolesMappingTable", Storage="_IndicatorsTable", ThisKey="FK_Indicators", OtherKey="IndicatorsTableID", IsForeignKey=true)]
		public IndicatorsTable IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable.Entity;
			}
			set
			{
				IndicatorsTable previousValue = this._IndicatorsTable.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorsTable.Entity = null;
						previousValue.IndicatorsAndRolesMappingTable.Remove(this);
					}
					this._IndicatorsTable.Entity = value;
					if ((value != null))
					{
						value.IndicatorsAndRolesMappingTable.Add(this);
						this._FK_Indicators = value.IndicatorsTableID;
					}
					else
					{
						this._FK_Indicators = default(Nullable<int>);
					}
					this.SendPropertyChanged("IndicatorsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_IndicatorsAndRolesMappingTable", Storage="_RolesTable", ThisKey="FK_RolesTable", OtherKey="RolesTableID", IsForeignKey=true)]
		public RolesTable RolesTable
		{
			get
			{
				return this._RolesTable.Entity;
			}
			set
			{
				RolesTable previousValue = this._RolesTable.Entity;
				if (((previousValue != value) 
							|| (this._RolesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolesTable.Entity = null;
						previousValue.IndicatorsAndRolesMappingTable.Remove(this);
					}
					this._RolesTable.Entity = value;
					if ((value != null))
					{
						value.IndicatorsAndRolesMappingTable.Add(this);
						this._FK_RolesTable = value.RolesTableID;
					}
					else
					{
						this._FK_RolesTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("RolesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorsAndUsersMapping")]
	public partial class IndicatorsAndUsersMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorsAndUsersMappingID;
		
		private bool _Active;
		
		private System.Nullable<bool> _CanEdit;
		
		private System.Nullable<bool> _CanView;
		
		private System.Nullable<bool> _CanConfirm;
		
		private System.Nullable<int> _FK_UsresTable;
		
		private System.Nullable<int> _FK_IndicatorsTable;
		
		private EntityRef<IndicatorsTable> _IndicatorsTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorsAndUsersMappingIDChanging(int value);
    partial void OnIndicatorsAndUsersMappingIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCanEditChanging(System.Nullable<bool> value);
    partial void OnCanEditChanged();
    partial void OnCanViewChanging(System.Nullable<bool> value);
    partial void OnCanViewChanged();
    partial void OnCanConfirmChanging(System.Nullable<bool> value);
    partial void OnCanConfirmChanged();
    partial void OnFK_UsresTableChanging(System.Nullable<int> value);
    partial void OnFK_UsresTableChanged();
    partial void OnFK_IndicatorsTableChanging(System.Nullable<int> value);
    partial void OnFK_IndicatorsTableChanged();
    #endregion
		
		public IndicatorsAndUsersMapping()
		{
			this._IndicatorsTable = default(EntityRef<IndicatorsTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorsAndUsersMappingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorsAndUsersMappingID
		{
			get
			{
				return this._IndicatorsAndUsersMappingID;
			}
			set
			{
				if ((this._IndicatorsAndUsersMappingID != value))
				{
					this.OnIndicatorsAndUsersMappingIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorsAndUsersMappingID = value;
					this.SendPropertyChanged("IndicatorsAndUsersMappingID");
					this.OnIndicatorsAndUsersMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit")]
		public System.Nullable<bool> CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit")]
		public System.Nullable<bool> CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanConfirm", DbType="Bit")]
		public System.Nullable<bool> CanConfirm
		{
			get
			{
				return this._CanConfirm;
			}
			set
			{
				if ((this._CanConfirm != value))
				{
					this.OnCanConfirmChanging(value);
					this.SendPropertyChanging();
					this._CanConfirm = value;
					this.SendPropertyChanged("CanConfirm");
					this.OnCanConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsresTable", DbType="Int")]
		public System.Nullable<int> FK_UsresTable
		{
			get
			{
				return this._FK_UsresTable;
			}
			set
			{
				if ((this._FK_UsresTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsresTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsresTable = value;
					this.SendPropertyChanged("FK_UsresTable");
					this.OnFK_UsresTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorsTable", DbType="Int")]
		public System.Nullable<int> FK_IndicatorsTable
		{
			get
			{
				return this._FK_IndicatorsTable;
			}
			set
			{
				if ((this._FK_IndicatorsTable != value))
				{
					if (this._IndicatorsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorsTable = value;
					this.SendPropertyChanged("FK_IndicatorsTable");
					this.OnFK_IndicatorsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_IndicatorsAndUsersMapping", Storage="_IndicatorsTable", ThisKey="FK_IndicatorsTable", OtherKey="IndicatorsTableID", IsForeignKey=true)]
		public IndicatorsTable IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable.Entity;
			}
			set
			{
				IndicatorsTable previousValue = this._IndicatorsTable.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorsTable.Entity = null;
						previousValue.IndicatorsAndUsersMapping.Remove(this);
					}
					this._IndicatorsTable.Entity = value;
					if ((value != null))
					{
						value.IndicatorsAndUsersMapping.Add(this);
						this._FK_IndicatorsTable = value.IndicatorsTableID;
					}
					else
					{
						this._FK_IndicatorsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("IndicatorsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_IndicatorsAndUsersMapping", Storage="_UsersTable", ThisKey="FK_UsresTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.IndicatorsAndUsersMapping.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.IndicatorsAndUsersMapping.Add(this);
						this._FK_UsresTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsresTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IndicatorsTable")]
	public partial class IndicatorsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndicatorsTableID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private string _Measure;
		
		private string _Formula;
		
		private System.Nullable<int> _FK_IndicatorClass;
		
		private System.Nullable<int> _DataType;
		
		private System.Nullable<int> _SortID;
		
		private EntitySet<CollectedIndicatorsForR> _CollectedIndicatorsForR;
		
		private EntitySet<CollectedIndocators> _CollectedIndocators;
		
		private EntitySet<ConfirmationHistory> _ConfirmationHistory;
		
		private EntitySet<IndicatorsAndRolesMappingTable> _IndicatorsAndRolesMappingTable;
		
		private EntitySet<IndicatorsAndUsersMapping> _IndicatorsAndUsersMapping;
		
		private EntitySet<PlannedIndicator> _PlannedIndicator;
		
		private EntitySet<ReportArchiveAndIndicatorsMappingTable> _ReportArchiveAndIndicatorsMappingTable;
		
		private EntityRef<IndicatorClass> _IndicatorClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndicatorsTableIDChanging(int value);
    partial void OnIndicatorsTableIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMeasureChanging(string value);
    partial void OnMeasureChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    partial void OnFK_IndicatorClassChanging(System.Nullable<int> value);
    partial void OnFK_IndicatorClassChanged();
    partial void OnDataTypeChanging(System.Nullable<int> value);
    partial void OnDataTypeChanged();
    partial void OnSortIDChanging(System.Nullable<int> value);
    partial void OnSortIDChanged();
    #endregion
		
		public IndicatorsTable()
		{
			this._CollectedIndicatorsForR = new EntitySet<CollectedIndicatorsForR>(new Action<CollectedIndicatorsForR>(this.attach_CollectedIndicatorsForR), new Action<CollectedIndicatorsForR>(this.detach_CollectedIndicatorsForR));
			this._CollectedIndocators = new EntitySet<CollectedIndocators>(new Action<CollectedIndocators>(this.attach_CollectedIndocators), new Action<CollectedIndocators>(this.detach_CollectedIndocators));
			this._ConfirmationHistory = new EntitySet<ConfirmationHistory>(new Action<ConfirmationHistory>(this.attach_ConfirmationHistory), new Action<ConfirmationHistory>(this.detach_ConfirmationHistory));
			this._IndicatorsAndRolesMappingTable = new EntitySet<IndicatorsAndRolesMappingTable>(new Action<IndicatorsAndRolesMappingTable>(this.attach_IndicatorsAndRolesMappingTable), new Action<IndicatorsAndRolesMappingTable>(this.detach_IndicatorsAndRolesMappingTable));
			this._IndicatorsAndUsersMapping = new EntitySet<IndicatorsAndUsersMapping>(new Action<IndicatorsAndUsersMapping>(this.attach_IndicatorsAndUsersMapping), new Action<IndicatorsAndUsersMapping>(this.detach_IndicatorsAndUsersMapping));
			this._PlannedIndicator = new EntitySet<PlannedIndicator>(new Action<PlannedIndicator>(this.attach_PlannedIndicator), new Action<PlannedIndicator>(this.detach_PlannedIndicator));
			this._ReportArchiveAndIndicatorsMappingTable = new EntitySet<ReportArchiveAndIndicatorsMappingTable>(new Action<ReportArchiveAndIndicatorsMappingTable>(this.attach_ReportArchiveAndIndicatorsMappingTable), new Action<ReportArchiveAndIndicatorsMappingTable>(this.detach_ReportArchiveAndIndicatorsMappingTable));
			this._IndicatorClass = default(EntityRef<IndicatorClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorsTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndicatorsTableID
		{
			get
			{
				return this._IndicatorsTableID;
			}
			set
			{
				if ((this._IndicatorsTableID != value))
				{
					this.OnIndicatorsTableIDChanging(value);
					this.SendPropertyChanging();
					this._IndicatorsTableID = value;
					this.SendPropertyChanged("IndicatorsTableID");
					this.OnIndicatorsTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measure", DbType="VarChar(20)")]
		public string Measure
		{
			get
			{
				return this._Measure;
			}
			set
			{
				if ((this._Measure != value))
				{
					this.OnMeasureChanging(value);
					this.SendPropertyChanging();
					this._Measure = value;
					this.SendPropertyChanged("Measure");
					this.OnMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="VarChar(5000)")]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorClass", DbType="Int")]
		public System.Nullable<int> FK_IndicatorClass
		{
			get
			{
				return this._FK_IndicatorClass;
			}
			set
			{
				if ((this._FK_IndicatorClass != value))
				{
					if (this._IndicatorClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorClassChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorClass = value;
					this.SendPropertyChanged("FK_IndicatorClass");
					this.OnFK_IndicatorClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int")]
		public System.Nullable<int> DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortID", DbType="Int")]
		public System.Nullable<int> SortID
		{
			get
			{
				return this._SortID;
			}
			set
			{
				if ((this._SortID != value))
				{
					this.OnSortIDChanging(value);
					this.SendPropertyChanging();
					this._SortID = value;
					this.SendPropertyChanged("SortID");
					this.OnSortIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_CollectedIndicatorsForR", Storage="_CollectedIndicatorsForR", ThisKey="IndicatorsTableID", OtherKey="FK_IndicatorsTable")]
		public EntitySet<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this._CollectedIndicatorsForR;
			}
			set
			{
				this._CollectedIndicatorsForR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_CollectedIndocators", Storage="_CollectedIndocators", ThisKey="IndicatorsTableID", OtherKey="FK_Indicators")]
		public EntitySet<CollectedIndocators> CollectedIndocators
		{
			get
			{
				return this._CollectedIndocators;
			}
			set
			{
				this._CollectedIndocators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_ConfirmationHistory", Storage="_ConfirmationHistory", ThisKey="IndicatorsTableID", OtherKey="FK_IndicatorsTable")]
		public EntitySet<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this._ConfirmationHistory;
			}
			set
			{
				this._ConfirmationHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_IndicatorsAndRolesMappingTable", Storage="_IndicatorsAndRolesMappingTable", ThisKey="IndicatorsTableID", OtherKey="FK_Indicators")]
		public EntitySet<IndicatorsAndRolesMappingTable> IndicatorsAndRolesMappingTable
		{
			get
			{
				return this._IndicatorsAndRolesMappingTable;
			}
			set
			{
				this._IndicatorsAndRolesMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_IndicatorsAndUsersMapping", Storage="_IndicatorsAndUsersMapping", ThisKey="IndicatorsTableID", OtherKey="FK_IndicatorsTable")]
		public EntitySet<IndicatorsAndUsersMapping> IndicatorsAndUsersMapping
		{
			get
			{
				return this._IndicatorsAndUsersMapping;
			}
			set
			{
				this._IndicatorsAndUsersMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_PlannedIndicator", Storage="_PlannedIndicator", ThisKey="IndicatorsTableID", OtherKey="FK_IndicatorsTable")]
		public EntitySet<PlannedIndicator> PlannedIndicator
		{
			get
			{
				return this._PlannedIndicator;
			}
			set
			{
				this._PlannedIndicator.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_ReportArchiveAndIndicatorsMappingTable", Storage="_ReportArchiveAndIndicatorsMappingTable", ThisKey="IndicatorsTableID", OtherKey="FK_IndicatorsTable")]
		public EntitySet<ReportArchiveAndIndicatorsMappingTable> ReportArchiveAndIndicatorsMappingTable
		{
			get
			{
				return this._ReportArchiveAndIndicatorsMappingTable;
			}
			set
			{
				this._ReportArchiveAndIndicatorsMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorClass_IndicatorsTable", Storage="_IndicatorClass", ThisKey="FK_IndicatorClass", OtherKey="IndicatorClassID", IsForeignKey=true)]
		public IndicatorClass IndicatorClass
		{
			get
			{
				return this._IndicatorClass.Entity;
			}
			set
			{
				IndicatorClass previousValue = this._IndicatorClass.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorClass.Entity = null;
						previousValue.IndicatorsTable.Remove(this);
					}
					this._IndicatorClass.Entity = value;
					if ((value != null))
					{
						value.IndicatorsTable.Add(this);
						this._FK_IndicatorClass = value.IndicatorClassID;
					}
					else
					{
						this._FK_IndicatorClass = default(Nullable<int>);
					}
					this.SendPropertyChanged("IndicatorClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = this;
		}
		
		private void detach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = null;
		}
		
		private void attach_CollectedIndocators(CollectedIndocators entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = this;
		}
		
		private void detach_CollectedIndocators(CollectedIndocators entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = null;
		}
		
		private void attach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = this;
		}
		
		private void detach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = null;
		}
		
		private void attach_IndicatorsAndRolesMappingTable(IndicatorsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = this;
		}
		
		private void detach_IndicatorsAndRolesMappingTable(IndicatorsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = null;
		}
		
		private void attach_IndicatorsAndUsersMapping(IndicatorsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = this;
		}
		
		private void detach_IndicatorsAndUsersMapping(IndicatorsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = null;
		}
		
		private void attach_PlannedIndicator(PlannedIndicator entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = this;
		}
		
		private void detach_PlannedIndicator(PlannedIndicator entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = null;
		}
		
		private void attach_ReportArchiveAndIndicatorsMappingTable(ReportArchiveAndIndicatorsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = this;
		}
		
		private void detach_ReportArchiveAndIndicatorsMappingTable(ReportArchiveAndIndicatorsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.IndicatorsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManualTable")]
	public partial class ManualTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManualID;
		
		private System.Nullable<bool> _Active;
		
		private string _ManualName;
		
		private string _ManualLink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManualIDChanging(int value);
    partial void OnManualIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnManualNameChanging(string value);
    partial void OnManualNameChanged();
    partial void OnManualLinkChanging(string value);
    partial void OnManualLinkChanged();
    #endregion
		
		public ManualTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ManualID
		{
			get
			{
				return this._ManualID;
			}
			set
			{
				if ((this._ManualID != value))
				{
					this.OnManualIDChanging(value);
					this.SendPropertyChanging();
					this._ManualID = value;
					this.SendPropertyChanged("ManualID");
					this.OnManualIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualName", DbType="VarChar(200)")]
		public string ManualName
		{
			get
			{
				return this._ManualName;
			}
			set
			{
				if ((this._ManualName != value))
				{
					this.OnManualNameChanging(value);
					this.SendPropertyChanging();
					this._ManualName = value;
					this.SendPropertyChanged("ManualName");
					this.OnManualNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualLink", DbType="VarChar(200)")]
		public string ManualLink
		{
			get
			{
				return this._ManualLink;
			}
			set
			{
				if ((this._ManualLink != value))
				{
					this.OnManualLinkChanging(value);
					this.SendPropertyChanging();
					this._ManualLink = value;
					this.SendPropertyChanged("ManualLink");
					this.OnManualLinkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MultiUser")]
	public partial class MultiUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MultiUserID;
		
		private int _FK_UserCanAccess;
		
		private int _FK_UserToAccess;
		
		private bool _Active;
		
		private EntityRef<UsersTable> _UsersTable;
		
		private EntityRef<UsersTable> _UsersTable1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMultiUserIDChanging(int value);
    partial void OnMultiUserIDChanged();
    partial void OnFK_UserCanAccessChanging(int value);
    partial void OnFK_UserCanAccessChanged();
    partial void OnFK_UserToAccessChanging(int value);
    partial void OnFK_UserToAccessChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public MultiUser()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			this._UsersTable1 = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultiUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MultiUserID
		{
			get
			{
				return this._MultiUserID;
			}
			set
			{
				if ((this._MultiUserID != value))
				{
					this.OnMultiUserIDChanging(value);
					this.SendPropertyChanging();
					this._MultiUserID = value;
					this.SendPropertyChanged("MultiUserID");
					this.OnMultiUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserCanAccess", DbType="Int NOT NULL")]
		public int FK_UserCanAccess
		{
			get
			{
				return this._FK_UserCanAccess;
			}
			set
			{
				if ((this._FK_UserCanAccess != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserCanAccessChanging(value);
					this.SendPropertyChanging();
					this._FK_UserCanAccess = value;
					this.SendPropertyChanged("FK_UserCanAccess");
					this.OnFK_UserCanAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserToAccess", DbType="Int NOT NULL")]
		public int FK_UserToAccess
		{
			get
			{
				return this._FK_UserToAccess;
			}
			set
			{
				if ((this._FK_UserToAccess != value))
				{
					if (this._UsersTable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserToAccessChanging(value);
					this.SendPropertyChanging();
					this._FK_UserToAccess = value;
					this.SendPropertyChanged("FK_UserToAccess");
					this.OnFK_UserToAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_MultiUser", Storage="_UsersTable", ThisKey="FK_UserCanAccess", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.MultiUser.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.MultiUser.Add(this);
						this._FK_UserCanAccess = value.UsersTableID;
					}
					else
					{
						this._FK_UserCanAccess = default(int);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_MultiUser1", Storage="_UsersTable1", ThisKey="FK_UserToAccess", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable1
		{
			get
			{
				return this._UsersTable1.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable1.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable1.Entity = null;
						previousValue.MultiUser1.Remove(this);
					}
					this._UsersTable1.Entity = value;
					if ((value != null))
					{
						value.MultiUser1.Add(this);
						this._FK_UserToAccess = value.UsersTableID;
					}
					else
					{
						this._FK_UserToAccess = default(int);
					}
					this.SendPropertyChanged("UsersTable1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlannedIndicator")]
	public partial class PlannedIndicator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlanedIndicatorID;
		
		private bool _Active;
		
		private System.Nullable<double> _Value;
		
		private System.Nullable<System.DateTime> _Date;
		
		private int _FK_IndicatorsTable;
		
		private EntityRef<IndicatorsTable> _IndicatorsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlanedIndicatorIDChanging(int value);
    partial void OnPlanedIndicatorIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnFK_IndicatorsTableChanging(int value);
    partial void OnFK_IndicatorsTableChanged();
    #endregion
		
		public PlannedIndicator()
		{
			this._IndicatorsTable = default(EntityRef<IndicatorsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanedIndicatorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlanedIndicatorID
		{
			get
			{
				return this._PlanedIndicatorID;
			}
			set
			{
				if ((this._PlanedIndicatorID != value))
				{
					this.OnPlanedIndicatorIDChanging(value);
					this.SendPropertyChanging();
					this._PlanedIndicatorID = value;
					this.SendPropertyChanged("PlanedIndicatorID");
					this.OnPlanedIndicatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorsTable", DbType="Int NOT NULL")]
		public int FK_IndicatorsTable
		{
			get
			{
				return this._FK_IndicatorsTable;
			}
			set
			{
				if ((this._FK_IndicatorsTable != value))
				{
					if (this._IndicatorsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorsTable = value;
					this.SendPropertyChanged("FK_IndicatorsTable");
					this.OnFK_IndicatorsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_PlannedIndicator", Storage="_IndicatorsTable", ThisKey="FK_IndicatorsTable", OtherKey="IndicatorsTableID", IsForeignKey=true)]
		public IndicatorsTable IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable.Entity;
			}
			set
			{
				IndicatorsTable previousValue = this._IndicatorsTable.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorsTable.Entity = null;
						previousValue.PlannedIndicator.Remove(this);
					}
					this._IndicatorsTable.Entity = value;
					if ((value != null))
					{
						value.PlannedIndicator.Add(this);
						this._FK_IndicatorsTable = value.IndicatorsTableID;
					}
					else
					{
						this._FK_IndicatorsTable = default(int);
					}
					this.SendPropertyChanged("IndicatorsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _Active;
		
		private string _ProjectName;
		
		private string _ImageUrl;
		
		private System.Nullable<bool> _CreateButton;
		
		private EntitySet<UserGroupTable> _UserGroupTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnCreateButtonChanging(System.Nullable<bool> value);
    partial void OnCreateButtonChanged();
    #endregion
		
		public Projects()
		{
			this._UserGroupTable = new EntitySet<UserGroupTable>(new Action<UserGroupTable>(this.attach_UserGroupTable), new Action<UserGroupTable>(this.detach_UserGroupTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(500)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrl", DbType="VarChar(100)")]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateButton", DbType="Bit")]
		public System.Nullable<bool> CreateButton
		{
			get
			{
				return this._CreateButton;
			}
			set
			{
				if ((this._CreateButton != value))
				{
					this.OnCreateButtonChanging(value);
					this.SendPropertyChanging();
					this._CreateButton = value;
					this.SendPropertyChanged("CreateButton");
					this.OnCreateButtonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_UserGroupTable", Storage="_UserGroupTable", ThisKey="Id", OtherKey="Fk_ProjectsTable")]
		public EntitySet<UserGroupTable> UserGroupTable
		{
			get
			{
				return this._UserGroupTable;
			}
			set
			{
				this._UserGroupTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroupTable(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_UserGroupTable(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProrectorIndicatorValues")]
	public partial class ProrectorIndicatorValues : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProrectorIndicatorId;
		
		private bool _Active;
		
		private int _FK_ReportArchiveTable;
		
		private int _FK_IndicatorsTable;
		
		private double _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProrectorIndicatorIdChanging(int value);
    partial void OnProrectorIndicatorIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_ReportArchiveTableChanging(int value);
    partial void OnFK_ReportArchiveTableChanged();
    partial void OnFK_IndicatorsTableChanging(int value);
    partial void OnFK_IndicatorsTableChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    #endregion
		
		public ProrectorIndicatorValues()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProrectorIndicatorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProrectorIndicatorId
		{
			get
			{
				return this._ProrectorIndicatorId;
			}
			set
			{
				if ((this._ProrectorIndicatorId != value))
				{
					this.OnProrectorIndicatorIdChanging(value);
					this.SendPropertyChanging();
					this._ProrectorIndicatorId = value;
					this.SendPropertyChanged("ProrectorIndicatorId");
					this.OnProrectorIndicatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorsTable", DbType="Int NOT NULL")]
		public int FK_IndicatorsTable
		{
			get
			{
				return this._FK_IndicatorsTable;
			}
			set
			{
				if ((this._FK_IndicatorsTable != value))
				{
					this.OnFK_IndicatorsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorsTable = value;
					this.SendPropertyChanged("FK_IndicatorsTable");
					this.OnFK_IndicatorsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_AddArticleCreateTable")]
	public partial class Rank_AddArticleCreateTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private string _DataType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDataTypeChanging(string value);
    partial void OnDataTypeChanged();
    #endregion
		
		public Rank_AddArticleCreateTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="VarChar(100)")]
		public string DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Articles")]
	public partial class Rank_Articles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<double> _Complexity;
		
		private System.Nullable<int> _FK_Parametrs;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _FK_Mark;
		
		private string _File_Name;
		
		private EntitySet<Rank_AutorsAndArticles> _Rank_AutorsAndArticles;
		
		private EntityRef<Rank_Mark> _Rank_Mark;
		
		private EntityRef<Rank_Parametrs> _Rank_Parametrs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnComplexityChanging(System.Nullable<double> value);
    partial void OnComplexityChanged();
    partial void OnFK_ParametrsChanging(System.Nullable<int> value);
    partial void OnFK_ParametrsChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnFK_MarkChanging(System.Nullable<int> value);
    partial void OnFK_MarkChanged();
    partial void OnFile_NameChanging(string value);
    partial void OnFile_NameChanged();
    #endregion
		
		public Rank_Articles()
		{
			this._Rank_AutorsAndArticles = new EntitySet<Rank_AutorsAndArticles>(new Action<Rank_AutorsAndArticles>(this.attach_Rank_AutorsAndArticles), new Action<Rank_AutorsAndArticles>(this.detach_Rank_AutorsAndArticles));
			this._Rank_Mark = default(EntityRef<Rank_Mark>);
			this._Rank_Parametrs = default(EntityRef<Rank_Parametrs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complexity", DbType="Float")]
		public System.Nullable<double> Complexity
		{
			get
			{
				return this._Complexity;
			}
			set
			{
				if ((this._Complexity != value))
				{
					this.OnComplexityChanging(value);
					this.SendPropertyChanging();
					this._Complexity = value;
					this.SendPropertyChanged("Complexity");
					this.OnComplexityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Parametrs", DbType="Int")]
		public System.Nullable<int> FK_Parametrs
		{
			get
			{
				return this._FK_Parametrs;
			}
			set
			{
				if ((this._FK_Parametrs != value))
				{
					if (this._Rank_Parametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ParametrsChanging(value);
					this.SendPropertyChanging();
					this._FK_Parametrs = value;
					this.SendPropertyChanged("FK_Parametrs");
					this.OnFK_ParametrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Mark", DbType="Int")]
		public System.Nullable<int> FK_Mark
		{
			get
			{
				return this._FK_Mark;
			}
			set
			{
				if ((this._FK_Mark != value))
				{
					if (this._Rank_Mark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_MarkChanging(value);
					this.SendPropertyChanging();
					this._FK_Mark = value;
					this.SendPropertyChanged("FK_Mark");
					this.OnFK_MarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_Name", DbType="VarChar(200)")]
		public string File_Name
		{
			get
			{
				return this._File_Name;
			}
			set
			{
				if ((this._File_Name != value))
				{
					this.OnFile_NameChanging(value);
					this.SendPropertyChanging();
					this._File_Name = value;
					this.SendPropertyChanged("File_Name");
					this.OnFile_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Articles_Rank_AutorsAndArticles", Storage="_Rank_AutorsAndArticles", ThisKey="ID", OtherKey="FK_Article")]
		public EntitySet<Rank_AutorsAndArticles> Rank_AutorsAndArticles
		{
			get
			{
				return this._Rank_AutorsAndArticles;
			}
			set
			{
				this._Rank_AutorsAndArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Mark_Rank_Articles", Storage="_Rank_Mark", ThisKey="FK_Mark", OtherKey="ID", IsForeignKey=true)]
		public Rank_Mark Rank_Mark
		{
			get
			{
				return this._Rank_Mark.Entity;
			}
			set
			{
				Rank_Mark previousValue = this._Rank_Mark.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Mark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Mark.Entity = null;
						previousValue.Rank_Articles.Remove(this);
					}
					this._Rank_Mark.Entity = value;
					if ((value != null))
					{
						value.Rank_Articles.Add(this);
						this._FK_Mark = value.ID;
					}
					else
					{
						this._FK_Mark = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Mark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Articles", Storage="_Rank_Parametrs", ThisKey="FK_Parametrs", OtherKey="ID", IsForeignKey=true)]
		public Rank_Parametrs Rank_Parametrs
		{
			get
			{
				return this._Rank_Parametrs.Entity;
			}
			set
			{
				Rank_Parametrs previousValue = this._Rank_Parametrs.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Parametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Parametrs.Entity = null;
						previousValue.Rank_Articles.Remove(this);
					}
					this._Rank_Parametrs.Entity = value;
					if ((value != null))
					{
						value.Rank_Articles.Add(this);
						this._FK_Parametrs = value.ID;
					}
					else
					{
						this._FK_Parametrs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Parametrs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rank_AutorsAndArticles(Rank_AutorsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Articles = this;
		}
		
		private void detach_Rank_AutorsAndArticles(Rank_AutorsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Articles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_ArticleValues")]
	public partial class Rank_ArticleValues : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Article;
		
		private System.Nullable<int> _FK_AddArtTable;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ArticleChanging(System.Nullable<int> value);
    partial void OnFK_ArticleChanged();
    partial void OnFK_AddArtTableChanging(System.Nullable<int> value);
    partial void OnFK_AddArtTableChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Rank_ArticleValues()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Article", DbType="Int")]
		public System.Nullable<int> FK_Article
		{
			get
			{
				return this._FK_Article;
			}
			set
			{
				if ((this._FK_Article != value))
				{
					this.OnFK_ArticleChanging(value);
					this.SendPropertyChanging();
					this._FK_Article = value;
					this.SendPropertyChanged("FK_Article");
					this.OnFK_ArticleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_AddArtTable", DbType="Int")]
		public System.Nullable<int> FK_AddArtTable
		{
			get
			{
				return this._FK_AddArtTable;
			}
			set
			{
				if ((this._FK_AddArtTable != value))
				{
					this.OnFK_AddArtTableChanging(value);
					this.SendPropertyChanging();
					this._FK_AddArtTable = value;
					this.SendPropertyChanged("FK_AddArtTable");
					this.OnFK_AddArtTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(150)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Autors")]
	public partial class Rank_Autors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Autor;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private System.Nullable<int> _FK_Users;
		
		private System.Nullable<int> _FK_Positions;
		
		private string _SecondName;
		
		private string _ThirdName;
		
		private EntitySet<Rank_AutorsAndArticles> _Rank_AutorsAndArticles;
		
		private EntitySet<Rank_Collected_ParametrsValue> _Rank_Collected_ParametrsValue;
		
		private EntitySet<Rank_Raiting_History> _Rank_Raiting_History;
		
		private EntityRef<Rank_Positions> _Rank_Positions;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_AutorChanging(int value);
    partial void OnID_AutorChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_UsersChanging(System.Nullable<int> value);
    partial void OnFK_UsersChanged();
    partial void OnFK_PositionsChanging(System.Nullable<int> value);
    partial void OnFK_PositionsChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnThirdNameChanging(string value);
    partial void OnThirdNameChanged();
    #endregion
		
		public Rank_Autors()
		{
			this._Rank_AutorsAndArticles = new EntitySet<Rank_AutorsAndArticles>(new Action<Rank_AutorsAndArticles>(this.attach_Rank_AutorsAndArticles), new Action<Rank_AutorsAndArticles>(this.detach_Rank_AutorsAndArticles));
			this._Rank_Collected_ParametrsValue = new EntitySet<Rank_Collected_ParametrsValue>(new Action<Rank_Collected_ParametrsValue>(this.attach_Rank_Collected_ParametrsValue), new Action<Rank_Collected_ParametrsValue>(this.detach_Rank_Collected_ParametrsValue));
			this._Rank_Raiting_History = new EntitySet<Rank_Raiting_History>(new Action<Rank_Raiting_History>(this.attach_Rank_Raiting_History), new Action<Rank_Raiting_History>(this.detach_Rank_Raiting_History));
			this._Rank_Positions = default(EntityRef<Rank_Positions>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Autor", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Autor
		{
			get
			{
				return this._ID_Autor;
			}
			set
			{
				if ((this._ID_Autor != value))
				{
					this.OnID_AutorChanging(value);
					this.SendPropertyChanging();
					this._ID_Autor = value;
					this.SendPropertyChanged("ID_Autor");
					this.OnID_AutorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Users", DbType="Int")]
		public System.Nullable<int> FK_Users
		{
			get
			{
				return this._FK_Users;
			}
			set
			{
				if ((this._FK_Users != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersChanging(value);
					this.SendPropertyChanging();
					this._FK_Users = value;
					this.SendPropertyChanged("FK_Users");
					this.OnFK_UsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Positions", DbType="Int")]
		public System.Nullable<int> FK_Positions
		{
			get
			{
				return this._FK_Positions;
			}
			set
			{
				if ((this._FK_Positions != value))
				{
					if (this._Rank_Positions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_PositionsChanging(value);
					this.SendPropertyChanging();
					this._FK_Positions = value;
					this.SendPropertyChanged("FK_Positions");
					this.OnFK_PositionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondName", DbType="VarChar(200)")]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdName", DbType="VarChar(200)")]
		public string ThirdName
		{
			get
			{
				return this._ThirdName;
			}
			set
			{
				if ((this._ThirdName != value))
				{
					this.OnThirdNameChanging(value);
					this.SendPropertyChanging();
					this._ThirdName = value;
					this.SendPropertyChanged("ThirdName");
					this.OnThirdNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Autors_Rank_AutorsAndArticles", Storage="_Rank_AutorsAndArticles", ThisKey="ID_Autor", OtherKey="FK_Autors")]
		public EntitySet<Rank_AutorsAndArticles> Rank_AutorsAndArticles
		{
			get
			{
				return this._Rank_AutorsAndArticles;
			}
			set
			{
				this._Rank_AutorsAndArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Autors_Rank_Collected_ParametrsValue", Storage="_Rank_Collected_ParametrsValue", ThisKey="ID_Autor", OtherKey="FK_Autor")]
		public EntitySet<Rank_Collected_ParametrsValue> Rank_Collected_ParametrsValue
		{
			get
			{
				return this._Rank_Collected_ParametrsValue;
			}
			set
			{
				this._Rank_Collected_ParametrsValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Autors_Rank_Raiting_History", Storage="_Rank_Raiting_History", ThisKey="ID_Autor", OtherKey="FK_Autor")]
		public EntitySet<Rank_Raiting_History> Rank_Raiting_History
		{
			get
			{
				return this._Rank_Raiting_History;
			}
			set
			{
				this._Rank_Raiting_History.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Positions_Rank_Autors", Storage="_Rank_Positions", ThisKey="FK_Positions", OtherKey="ID", IsForeignKey=true)]
		public Rank_Positions Rank_Positions
		{
			get
			{
				return this._Rank_Positions.Entity;
			}
			set
			{
				Rank_Positions previousValue = this._Rank_Positions.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Positions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Positions.Entity = null;
						previousValue.Rank_Autors.Remove(this);
					}
					this._Rank_Positions.Entity = value;
					if ((value != null))
					{
						value.Rank_Autors.Add(this);
						this._FK_Positions = value.ID;
					}
					else
					{
						this._FK_Positions = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Positions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_Rank_Autors", Storage="_UsersTable", ThisKey="FK_Users", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.Rank_Autors.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.Rank_Autors.Add(this);
						this._FK_Users = value.UsersTableID;
					}
					else
					{
						this._FK_Users = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rank_AutorsAndArticles(Rank_AutorsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Autors = this;
		}
		
		private void detach_Rank_AutorsAndArticles(Rank_AutorsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Autors = null;
		}
		
		private void attach_Rank_Collected_ParametrsValue(Rank_Collected_ParametrsValue entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Autors = this;
		}
		
		private void detach_Rank_Collected_ParametrsValue(Rank_Collected_ParametrsValue entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Autors = null;
		}
		
		private void attach_Rank_Raiting_History(Rank_Raiting_History entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Autors = this;
		}
		
		private void detach_Rank_Raiting_History(Rank_Raiting_History entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Autors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_AutorsAndArticles")]
	public partial class Rank_AutorsAndArticles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Autors;
		
		private System.Nullable<int> _FK_Article;
		
		private System.Nullable<bool> _Confirmed;
		
		private System.Nullable<int> _FK_Param_Type;
		
		private EntityRef<Rank_Articles> _Rank_Articles;
		
		private EntityRef<Rank_Autors> _Rank_Autors;
		
		private EntityRef<Rank_Param_Type> _Rank_Param_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_AutorsChanging(System.Nullable<int> value);
    partial void OnFK_AutorsChanged();
    partial void OnFK_ArticleChanging(System.Nullable<int> value);
    partial void OnFK_ArticleChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    partial void OnFK_Param_TypeChanging(System.Nullable<int> value);
    partial void OnFK_Param_TypeChanged();
    #endregion
		
		public Rank_AutorsAndArticles()
		{
			this._Rank_Articles = default(EntityRef<Rank_Articles>);
			this._Rank_Autors = default(EntityRef<Rank_Autors>);
			this._Rank_Param_Type = default(EntityRef<Rank_Param_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Autors", DbType="Int")]
		public System.Nullable<int> FK_Autors
		{
			get
			{
				return this._FK_Autors;
			}
			set
			{
				if ((this._FK_Autors != value))
				{
					if (this._Rank_Autors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_AutorsChanging(value);
					this.SendPropertyChanging();
					this._FK_Autors = value;
					this.SendPropertyChanged("FK_Autors");
					this.OnFK_AutorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Article", DbType="Int")]
		public System.Nullable<int> FK_Article
		{
			get
			{
				return this._FK_Article;
			}
			set
			{
				if ((this._FK_Article != value))
				{
					if (this._Rank_Articles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ArticleChanging(value);
					this.SendPropertyChanging();
					this._FK_Article = value;
					this.SendPropertyChanged("FK_Article");
					this.OnFK_ArticleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Param_Type", DbType="Int")]
		public System.Nullable<int> FK_Param_Type
		{
			get
			{
				return this._FK_Param_Type;
			}
			set
			{
				if ((this._FK_Param_Type != value))
				{
					if (this._Rank_Param_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Param_TypeChanging(value);
					this.SendPropertyChanging();
					this._FK_Param_Type = value;
					this.SendPropertyChanged("FK_Param_Type");
					this.OnFK_Param_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Articles_Rank_AutorsAndArticles", Storage="_Rank_Articles", ThisKey="FK_Article", OtherKey="ID", IsForeignKey=true)]
		public Rank_Articles Rank_Articles
		{
			get
			{
				return this._Rank_Articles.Entity;
			}
			set
			{
				Rank_Articles previousValue = this._Rank_Articles.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Articles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Articles.Entity = null;
						previousValue.Rank_AutorsAndArticles.Remove(this);
					}
					this._Rank_Articles.Entity = value;
					if ((value != null))
					{
						value.Rank_AutorsAndArticles.Add(this);
						this._FK_Article = value.ID;
					}
					else
					{
						this._FK_Article = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Articles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Autors_Rank_AutorsAndArticles", Storage="_Rank_Autors", ThisKey="FK_Autors", OtherKey="ID_Autor", IsForeignKey=true)]
		public Rank_Autors Rank_Autors
		{
			get
			{
				return this._Rank_Autors.Entity;
			}
			set
			{
				Rank_Autors previousValue = this._Rank_Autors.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Autors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Autors.Entity = null;
						previousValue.Rank_AutorsAndArticles.Remove(this);
					}
					this._Rank_Autors.Entity = value;
					if ((value != null))
					{
						value.Rank_AutorsAndArticles.Add(this);
						this._FK_Autors = value.ID_Autor;
					}
					else
					{
						this._FK_Autors = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Autors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Param_Type_Rank_AutorsAndArticles", Storage="_Rank_Param_Type", ThisKey="FK_Param_Type", OtherKey="ID", IsForeignKey=true)]
		public Rank_Param_Type Rank_Param_Type
		{
			get
			{
				return this._Rank_Param_Type.Entity;
			}
			set
			{
				Rank_Param_Type previousValue = this._Rank_Param_Type.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Param_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Param_Type.Entity = null;
						previousValue.Rank_AutorsAndArticles.Remove(this);
					}
					this._Rank_Param_Type.Entity = value;
					if ((value != null))
					{
						value.Rank_AutorsAndArticles.Add(this);
						this._FK_Param_Type = value.ID;
					}
					else
					{
						this._FK_Param_Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Param_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Collected_ParametrsValue")]
	public partial class Rank_Collected_ParametrsValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Parametrs;
		
		private System.Nullable<int> _FK_Autor;
		
		private System.Nullable<double> _Value;
		
		private System.Nullable<int> _Status;
		
		private EntityRef<Rank_Autors> _Rank_Autors;
		
		private EntityRef<Rank_Parametrs> _Rank_Parametrs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ParametrsChanging(System.Nullable<int> value);
    partial void OnFK_ParametrsChanged();
    partial void OnFK_AutorChanging(System.Nullable<int> value);
    partial void OnFK_AutorChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public Rank_Collected_ParametrsValue()
		{
			this._Rank_Autors = default(EntityRef<Rank_Autors>);
			this._Rank_Parametrs = default(EntityRef<Rank_Parametrs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Parametrs", DbType="Int")]
		public System.Nullable<int> FK_Parametrs
		{
			get
			{
				return this._FK_Parametrs;
			}
			set
			{
				if ((this._FK_Parametrs != value))
				{
					if (this._Rank_Parametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ParametrsChanging(value);
					this.SendPropertyChanging();
					this._FK_Parametrs = value;
					this.SendPropertyChanged("FK_Parametrs");
					this.OnFK_ParametrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Autor", DbType="Int")]
		public System.Nullable<int> FK_Autor
		{
			get
			{
				return this._FK_Autor;
			}
			set
			{
				if ((this._FK_Autor != value))
				{
					if (this._Rank_Autors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_AutorChanging(value);
					this.SendPropertyChanging();
					this._FK_Autor = value;
					this.SendPropertyChanged("FK_Autor");
					this.OnFK_AutorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Autors_Rank_Collected_ParametrsValue", Storage="_Rank_Autors", ThisKey="FK_Autor", OtherKey="ID_Autor", IsForeignKey=true)]
		public Rank_Autors Rank_Autors
		{
			get
			{
				return this._Rank_Autors.Entity;
			}
			set
			{
				Rank_Autors previousValue = this._Rank_Autors.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Autors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Autors.Entity = null;
						previousValue.Rank_Collected_ParametrsValue.Remove(this);
					}
					this._Rank_Autors.Entity = value;
					if ((value != null))
					{
						value.Rank_Collected_ParametrsValue.Add(this);
						this._FK_Autor = value.ID_Autor;
					}
					else
					{
						this._FK_Autor = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Autors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Collected_ParametrsValue", Storage="_Rank_Parametrs", ThisKey="FK_Parametrs", OtherKey="ID", IsForeignKey=true)]
		public Rank_Parametrs Rank_Parametrs
		{
			get
			{
				return this._Rank_Parametrs.Entity;
			}
			set
			{
				Rank_Parametrs previousValue = this._Rank_Parametrs.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Parametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Parametrs.Entity = null;
						previousValue.Rank_Collected_ParametrsValue.Remove(this);
					}
					this._Rank_Parametrs.Entity = value;
					if ((value != null))
					{
						value.Rank_Collected_ParametrsValue.Add(this);
						this._FK_Parametrs = value.ID;
					}
					else
					{
						this._FK_Parametrs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Parametrs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Connect_ParamType_Param")]
	public partial class Rank_Connect_ParamType_Param : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Param_Type;
		
		private System.Nullable<int> _FK_Parametrs;
		
		private EntityRef<Rank_Param_Type> _Rank_Param_Type;
		
		private EntityRef<Rank_Parametrs> _Rank_Parametrs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_Param_TypeChanging(System.Nullable<int> value);
    partial void OnFK_Param_TypeChanged();
    partial void OnFK_ParametrsChanging(System.Nullable<int> value);
    partial void OnFK_ParametrsChanged();
    #endregion
		
		public Rank_Connect_ParamType_Param()
		{
			this._Rank_Param_Type = default(EntityRef<Rank_Param_Type>);
			this._Rank_Parametrs = default(EntityRef<Rank_Parametrs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Param_Type", DbType="Int")]
		public System.Nullable<int> FK_Param_Type
		{
			get
			{
				return this._FK_Param_Type;
			}
			set
			{
				if ((this._FK_Param_Type != value))
				{
					if (this._Rank_Param_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Param_TypeChanging(value);
					this.SendPropertyChanging();
					this._FK_Param_Type = value;
					this.SendPropertyChanged("FK_Param_Type");
					this.OnFK_Param_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Parametrs", DbType="Int")]
		public System.Nullable<int> FK_Parametrs
		{
			get
			{
				return this._FK_Parametrs;
			}
			set
			{
				if ((this._FK_Parametrs != value))
				{
					if (this._Rank_Parametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ParametrsChanging(value);
					this.SendPropertyChanging();
					this._FK_Parametrs = value;
					this.SendPropertyChanged("FK_Parametrs");
					this.OnFK_ParametrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Param_Type_Rank_Connect_ParamType_Param", Storage="_Rank_Param_Type", ThisKey="FK_Param_Type", OtherKey="ID", IsForeignKey=true)]
		public Rank_Param_Type Rank_Param_Type
		{
			get
			{
				return this._Rank_Param_Type.Entity;
			}
			set
			{
				Rank_Param_Type previousValue = this._Rank_Param_Type.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Param_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Param_Type.Entity = null;
						previousValue.Rank_Connect_ParamType_Param.Remove(this);
					}
					this._Rank_Param_Type.Entity = value;
					if ((value != null))
					{
						value.Rank_Connect_ParamType_Param.Add(this);
						this._FK_Param_Type = value.ID;
					}
					else
					{
						this._FK_Param_Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Param_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Connect_ParamType_Param", Storage="_Rank_Parametrs", ThisKey="FK_Parametrs", OtherKey="ID", IsForeignKey=true)]
		public Rank_Parametrs Rank_Parametrs
		{
			get
			{
				return this._Rank_Parametrs.Entity;
			}
			set
			{
				Rank_Parametrs previousValue = this._Rank_Parametrs.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Parametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Parametrs.Entity = null;
						previousValue.Rank_Connect_ParamType_Param.Remove(this);
					}
					this._Rank_Parametrs.Entity = value;
					if ((value != null))
					{
						value.Rank_Connect_ParamType_Param.Add(this);
						this._FK_Parametrs = value.ID;
					}
					else
					{
						this._FK_Parametrs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Parametrs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_ConnectedParametrs_ArticleCreateTable")]
	public partial class Rank_ConnectedParametrs_ArticleCreateTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Parametrs;
		
		private System.Nullable<int> _FK_AddArticleCreateTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ParametrsChanging(System.Nullable<int> value);
    partial void OnFK_ParametrsChanged();
    partial void OnFK_AddArticleCreateTableChanging(System.Nullable<int> value);
    partial void OnFK_AddArticleCreateTableChanged();
    #endregion
		
		public Rank_ConnectedParametrs_ArticleCreateTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Parametrs", DbType="Int")]
		public System.Nullable<int> FK_Parametrs
		{
			get
			{
				return this._FK_Parametrs;
			}
			set
			{
				if ((this._FK_Parametrs != value))
				{
					this.OnFK_ParametrsChanging(value);
					this.SendPropertyChanging();
					this._FK_Parametrs = value;
					this.SendPropertyChanged("FK_Parametrs");
					this.OnFK_ParametrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_AddArticleCreateTable", DbType="Int")]
		public System.Nullable<int> FK_AddArticleCreateTable
		{
			get
			{
				return this._FK_AddArticleCreateTable;
			}
			set
			{
				if ((this._FK_AddArticleCreateTable != value))
				{
					this.OnFK_AddArticleCreateTableChanging(value);
					this.SendPropertyChanging();
					this._FK_AddArticleCreateTable = value;
					this.SendPropertyChanged("FK_AddArticleCreateTable");
					this.OnFK_AddArticleCreateTableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Mark")]
	public partial class Rank_Mark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private System.Nullable<int> _Points;
		
		private EntitySet<Rank_Articles> _Rank_Articles;
		
		private EntitySet<Rank_Points> _Rank_Points;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPointsChanging(System.Nullable<int> value);
    partial void OnPointsChanged();
    #endregion
		
		public Rank_Mark()
		{
			this._Rank_Articles = new EntitySet<Rank_Articles>(new Action<Rank_Articles>(this.attach_Rank_Articles), new Action<Rank_Articles>(this.detach_Rank_Articles));
			this._Rank_Points = new EntitySet<Rank_Points>(new Action<Rank_Points>(this.attach_Rank_Points), new Action<Rank_Points>(this.detach_Rank_Points));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Int")]
		public System.Nullable<int> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Mark_Rank_Articles", Storage="_Rank_Articles", ThisKey="ID", OtherKey="FK_Mark")]
		public EntitySet<Rank_Articles> Rank_Articles
		{
			get
			{
				return this._Rank_Articles;
			}
			set
			{
				this._Rank_Articles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Mark_Rank_Points", Storage="_Rank_Points", ThisKey="ID", OtherKey="FK_Mark")]
		public EntitySet<Rank_Points> Rank_Points
		{
			get
			{
				return this._Rank_Points;
			}
			set
			{
				this._Rank_Points.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rank_Articles(Rank_Articles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Mark = this;
		}
		
		private void detach_Rank_Articles(Rank_Articles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Mark = null;
		}
		
		private void attach_Rank_Points(Rank_Points entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Mark = this;
		}
		
		private void detach_Rank_Points(Rank_Points entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Mark = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Param_Type")]
	public partial class Rank_Param_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Param_Name;
		
		private System.Nullable<double> _Param_Value;
		
		private EntitySet<Rank_AutorsAndArticles> _Rank_AutorsAndArticles;
		
		private EntitySet<Rank_Connect_ParamType_Param> _Rank_Connect_ParamType_Param;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnParam_NameChanging(string value);
    partial void OnParam_NameChanged();
    partial void OnParam_ValueChanging(System.Nullable<double> value);
    partial void OnParam_ValueChanged();
    #endregion
		
		public Rank_Param_Type()
		{
			this._Rank_AutorsAndArticles = new EntitySet<Rank_AutorsAndArticles>(new Action<Rank_AutorsAndArticles>(this.attach_Rank_AutorsAndArticles), new Action<Rank_AutorsAndArticles>(this.detach_Rank_AutorsAndArticles));
			this._Rank_Connect_ParamType_Param = new EntitySet<Rank_Connect_ParamType_Param>(new Action<Rank_Connect_ParamType_Param>(this.attach_Rank_Connect_ParamType_Param), new Action<Rank_Connect_ParamType_Param>(this.detach_Rank_Connect_ParamType_Param));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param_Name", DbType="VarChar(150)")]
		public string Param_Name
		{
			get
			{
				return this._Param_Name;
			}
			set
			{
				if ((this._Param_Name != value))
				{
					this.OnParam_NameChanging(value);
					this.SendPropertyChanging();
					this._Param_Name = value;
					this.SendPropertyChanged("Param_Name");
					this.OnParam_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param_Value", DbType="Float")]
		public System.Nullable<double> Param_Value
		{
			get
			{
				return this._Param_Value;
			}
			set
			{
				if ((this._Param_Value != value))
				{
					this.OnParam_ValueChanging(value);
					this.SendPropertyChanging();
					this._Param_Value = value;
					this.SendPropertyChanged("Param_Value");
					this.OnParam_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Param_Type_Rank_AutorsAndArticles", Storage="_Rank_AutorsAndArticles", ThisKey="ID", OtherKey="FK_Param_Type")]
		public EntitySet<Rank_AutorsAndArticles> Rank_AutorsAndArticles
		{
			get
			{
				return this._Rank_AutorsAndArticles;
			}
			set
			{
				this._Rank_AutorsAndArticles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Param_Type_Rank_Connect_ParamType_Param", Storage="_Rank_Connect_ParamType_Param", ThisKey="ID", OtherKey="FK_Param_Type")]
		public EntitySet<Rank_Connect_ParamType_Param> Rank_Connect_ParamType_Param
		{
			get
			{
				return this._Rank_Connect_ParamType_Param;
			}
			set
			{
				this._Rank_Connect_ParamType_Param.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rank_AutorsAndArticles(Rank_AutorsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Param_Type = this;
		}
		
		private void detach_Rank_AutorsAndArticles(Rank_AutorsAndArticles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Param_Type = null;
		}
		
		private void attach_Rank_Connect_ParamType_Param(Rank_Connect_ParamType_Param entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Param_Type = this;
		}
		
		private void detach_Rank_Connect_ParamType_Param(Rank_Connect_ParamType_Param entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Param_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Parametrs")]
	public partial class Rank_Parametrs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private string _Amount;
		
		private string _Formula;
		
		private EntitySet<Rank_Articles> _Rank_Articles;
		
		private EntitySet<Rank_Collected_ParametrsValue> _Rank_Collected_ParametrsValue;
		
		private EntitySet<Rank_Connect_ParamType_Param> _Rank_Connect_ParamType_Param;
		
		private EntitySet<Rank_Points> _Rank_Points;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAmountChanging(string value);
    partial void OnAmountChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    #endregion
		
		public Rank_Parametrs()
		{
			this._Rank_Articles = new EntitySet<Rank_Articles>(new Action<Rank_Articles>(this.attach_Rank_Articles), new Action<Rank_Articles>(this.detach_Rank_Articles));
			this._Rank_Collected_ParametrsValue = new EntitySet<Rank_Collected_ParametrsValue>(new Action<Rank_Collected_ParametrsValue>(this.attach_Rank_Collected_ParametrsValue), new Action<Rank_Collected_ParametrsValue>(this.detach_Rank_Collected_ParametrsValue));
			this._Rank_Connect_ParamType_Param = new EntitySet<Rank_Connect_ParamType_Param>(new Action<Rank_Connect_ParamType_Param>(this.attach_Rank_Connect_ParamType_Param), new Action<Rank_Connect_ParamType_Param>(this.detach_Rank_Connect_ParamType_Param));
			this._Rank_Points = new EntitySet<Rank_Points>(new Action<Rank_Points>(this.attach_Rank_Points), new Action<Rank_Points>(this.detach_Rank_Points));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="VarChar(300)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="VarChar(100)")]
		public string Formula
		{
			get
			{
				return this._Formula;
			}
			set
			{
				if ((this._Formula != value))
				{
					this.OnFormulaChanging(value);
					this.SendPropertyChanging();
					this._Formula = value;
					this.SendPropertyChanged("Formula");
					this.OnFormulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Articles", Storage="_Rank_Articles", ThisKey="ID", OtherKey="FK_Parametrs")]
		public EntitySet<Rank_Articles> Rank_Articles
		{
			get
			{
				return this._Rank_Articles;
			}
			set
			{
				this._Rank_Articles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Collected_ParametrsValue", Storage="_Rank_Collected_ParametrsValue", ThisKey="ID", OtherKey="FK_Parametrs")]
		public EntitySet<Rank_Collected_ParametrsValue> Rank_Collected_ParametrsValue
		{
			get
			{
				return this._Rank_Collected_ParametrsValue;
			}
			set
			{
				this._Rank_Collected_ParametrsValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Connect_ParamType_Param", Storage="_Rank_Connect_ParamType_Param", ThisKey="ID", OtherKey="FK_Parametrs")]
		public EntitySet<Rank_Connect_ParamType_Param> Rank_Connect_ParamType_Param
		{
			get
			{
				return this._Rank_Connect_ParamType_Param;
			}
			set
			{
				this._Rank_Connect_ParamType_Param.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Points", Storage="_Rank_Points", ThisKey="ID", OtherKey="FK_Parametrs")]
		public EntitySet<Rank_Points> Rank_Points
		{
			get
			{
				return this._Rank_Points;
			}
			set
			{
				this._Rank_Points.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rank_Articles(Rank_Articles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = this;
		}
		
		private void detach_Rank_Articles(Rank_Articles entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = null;
		}
		
		private void attach_Rank_Collected_ParametrsValue(Rank_Collected_ParametrsValue entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = this;
		}
		
		private void detach_Rank_Collected_ParametrsValue(Rank_Collected_ParametrsValue entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = null;
		}
		
		private void attach_Rank_Connect_ParamType_Param(Rank_Connect_ParamType_Param entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = this;
		}
		
		private void detach_Rank_Connect_ParamType_Param(Rank_Connect_ParamType_Param entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = null;
		}
		
		private void attach_Rank_Points(Rank_Points entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = this;
		}
		
		private void detach_Rank_Points(Rank_Points entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Parametrs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Points")]
	public partial class Rank_Points : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Mark;
		
		private System.Nullable<int> _FK_Parametrs;
		
		private EntityRef<Rank_Mark> _Rank_Mark;
		
		private EntityRef<Rank_Parametrs> _Rank_Parametrs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_MarkChanging(System.Nullable<int> value);
    partial void OnFK_MarkChanged();
    partial void OnFK_ParametrsChanging(System.Nullable<int> value);
    partial void OnFK_ParametrsChanged();
    #endregion
		
		public Rank_Points()
		{
			this._Rank_Mark = default(EntityRef<Rank_Mark>);
			this._Rank_Parametrs = default(EntityRef<Rank_Parametrs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Mark", DbType="Int")]
		public System.Nullable<int> FK_Mark
		{
			get
			{
				return this._FK_Mark;
			}
			set
			{
				if ((this._FK_Mark != value))
				{
					if (this._Rank_Mark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_MarkChanging(value);
					this.SendPropertyChanging();
					this._FK_Mark = value;
					this.SendPropertyChanged("FK_Mark");
					this.OnFK_MarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Parametrs", DbType="Int")]
		public System.Nullable<int> FK_Parametrs
		{
			get
			{
				return this._FK_Parametrs;
			}
			set
			{
				if ((this._FK_Parametrs != value))
				{
					if (this._Rank_Parametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ParametrsChanging(value);
					this.SendPropertyChanging();
					this._FK_Parametrs = value;
					this.SendPropertyChanged("FK_Parametrs");
					this.OnFK_ParametrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Mark_Rank_Points", Storage="_Rank_Mark", ThisKey="FK_Mark", OtherKey="ID", IsForeignKey=true)]
		public Rank_Mark Rank_Mark
		{
			get
			{
				return this._Rank_Mark.Entity;
			}
			set
			{
				Rank_Mark previousValue = this._Rank_Mark.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Mark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Mark.Entity = null;
						previousValue.Rank_Points.Remove(this);
					}
					this._Rank_Mark.Entity = value;
					if ((value != null))
					{
						value.Rank_Points.Add(this);
						this._FK_Mark = value.ID;
					}
					else
					{
						this._FK_Mark = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Mark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Parametrs_Rank_Points", Storage="_Rank_Parametrs", ThisKey="FK_Parametrs", OtherKey="ID", IsForeignKey=true)]
		public Rank_Parametrs Rank_Parametrs
		{
			get
			{
				return this._Rank_Parametrs.Entity;
			}
			set
			{
				Rank_Parametrs previousValue = this._Rank_Parametrs.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Parametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Parametrs.Entity = null;
						previousValue.Rank_Points.Remove(this);
					}
					this._Rank_Parametrs.Entity = value;
					if ((value != null))
					{
						value.Rank_Points.Add(this);
						this._FK_Parametrs = value.ID;
					}
					else
					{
						this._FK_Parametrs = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Parametrs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Positions")]
	public partial class Rank_Positions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Position;
		
		private EntitySet<Rank_Autors> _Rank_Autors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    #endregion
		
		public Rank_Positions()
		{
			this._Rank_Autors = new EntitySet<Rank_Autors>(new Action<Rank_Autors>(this.attach_Rank_Autors), new Action<Rank_Autors>(this.detach_Rank_Autors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(150)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Positions_Rank_Autors", Storage="_Rank_Autors", ThisKey="ID", OtherKey="FK_Positions")]
		public EntitySet<Rank_Autors> Rank_Autors
		{
			get
			{
				return this._Rank_Autors;
			}
			set
			{
				this._Rank_Autors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rank_Autors(Rank_Autors entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Positions = this;
		}
		
		private void detach_Rank_Autors(Rank_Autors entity)
		{
			this.SendPropertyChanging();
			entity.Rank_Positions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_Raiting_History")]
	public partial class Rank_Raiting_History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Autor;
		
		private System.Nullable<System.DateTime> _Date_Save;
		
		private System.Nullable<double> _Raiting_Value;
		
		private EntityRef<Rank_Autors> _Rank_Autors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_AutorChanging(System.Nullable<int> value);
    partial void OnFK_AutorChanged();
    partial void OnDate_SaveChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_SaveChanged();
    partial void OnRaiting_ValueChanging(System.Nullable<double> value);
    partial void OnRaiting_ValueChanged();
    #endregion
		
		public Rank_Raiting_History()
		{
			this._Rank_Autors = default(EntityRef<Rank_Autors>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Autor", DbType="Int")]
		public System.Nullable<int> FK_Autor
		{
			get
			{
				return this._FK_Autor;
			}
			set
			{
				if ((this._FK_Autor != value))
				{
					if (this._Rank_Autors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_AutorChanging(value);
					this.SendPropertyChanging();
					this._FK_Autor = value;
					this.SendPropertyChanged("FK_Autor");
					this.OnFK_AutorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Save", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Save
		{
			get
			{
				return this._Date_Save;
			}
			set
			{
				if ((this._Date_Save != value))
				{
					this.OnDate_SaveChanging(value);
					this.SendPropertyChanging();
					this._Date_Save = value;
					this.SendPropertyChanged("Date_Save");
					this.OnDate_SaveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Raiting_Value", DbType="Float")]
		public System.Nullable<double> Raiting_Value
		{
			get
			{
				return this._Raiting_Value;
			}
			set
			{
				if ((this._Raiting_Value != value))
				{
					this.OnRaiting_ValueChanging(value);
					this.SendPropertyChanging();
					this._Raiting_Value = value;
					this.SendPropertyChanged("Raiting_Value");
					this.OnRaiting_ValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_Autors_Rank_Raiting_History", Storage="_Rank_Autors", ThisKey="FK_Autor", OtherKey="ID_Autor", IsForeignKey=true)]
		public Rank_Autors Rank_Autors
		{
			get
			{
				return this._Rank_Autors.Entity;
			}
			set
			{
				Rank_Autors previousValue = this._Rank_Autors.Entity;
				if (((previousValue != value) 
							|| (this._Rank_Autors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank_Autors.Entity = null;
						previousValue.Rank_Raiting_History.Remove(this);
					}
					this._Rank_Autors.Entity = value;
					if ((value != null))
					{
						value.Rank_Raiting_History.Add(this);
						this._FK_Autor = value.ID_Autor;
					}
					else
					{
						this._FK_Autor = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank_Autors");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank_StructureRaitings")]
	public partial class Rank_StructureRaitings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private System.Nullable<int> _FK_FirstLevel;
		
		private System.Nullable<int> _FK_SecondLevel;
		
		private System.Nullable<int> _FK_ThirdLevel;
		
		private System.Nullable<double> _Value;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_FirstLevelChanging(System.Nullable<int> value);
    partial void OnFK_FirstLevelChanged();
    partial void OnFK_SecondLevelChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelChanged();
    partial void OnFK_ThirdLevelChanging(System.Nullable<int> value);
    partial void OnFK_ThirdLevelChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    #endregion
		
		public Rank_StructureRaitings()
		{
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevel", DbType="Int")]
		public System.Nullable<int> FK_FirstLevel
		{
			get
			{
				return this._FK_FirstLevel;
			}
			set
			{
				if ((this._FK_FirstLevel != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevel = value;
					this.SendPropertyChanged("FK_FirstLevel");
					this.OnFK_FirstLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevel", DbType="Int")]
		public System.Nullable<int> FK_SecondLevel
		{
			get
			{
				return this._FK_SecondLevel;
			}
			set
			{
				if ((this._FK_SecondLevel != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevel = value;
					this.SendPropertyChanged("FK_SecondLevel");
					this.OnFK_SecondLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevel", DbType="Int")]
		public System.Nullable<int> FK_ThirdLevel
		{
			get
			{
				return this._FK_ThirdLevel;
			}
			set
			{
				if ((this._FK_ThirdLevel != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevel = value;
					this.SendPropertyChanged("FK_ThirdLevel");
					this.OnFK_ThirdLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_Rank_StructureRaitings", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevel", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.Rank_StructureRaitings.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.Rank_StructureRaitings.Add(this);
						this._FK_FirstLevel = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_Rank_StructureRaitings", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevel", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.Rank_StructureRaitings.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.Rank_StructureRaitings.Add(this);
						this._FK_SecondLevel = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_Rank_StructureRaitings", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevel", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.Rank_StructureRaitings.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.Rank_StructureRaitings.Add(this);
						this._FK_ThirdLevel = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportArchiveAndBasicParametrsMappingTable")]
	public partial class ReportArchiveAndBasicParametrsMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportArchiveAndBasicParametrsMappingTableID;
		
		private bool _Active;
		
		private int _FK_ReportArchiveTable;
		
		private int _FK_BasicParametrsTable;
		
		private EntityRef<BasicParametersTable> _BasicParametersTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportArchiveAndBasicParametrsMappingTableIDChanging(int value);
    partial void OnReportArchiveAndBasicParametrsMappingTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_ReportArchiveTableChanging(int value);
    partial void OnFK_ReportArchiveTableChanged();
    partial void OnFK_BasicParametrsTableChanging(int value);
    partial void OnFK_BasicParametrsTableChanged();
    #endregion
		
		public ReportArchiveAndBasicParametrsMappingTable()
		{
			this._BasicParametersTable = default(EntityRef<BasicParametersTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportArchiveAndBasicParametrsMappingTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportArchiveAndBasicParametrsMappingTableID
		{
			get
			{
				return this._ReportArchiveAndBasicParametrsMappingTableID;
			}
			set
			{
				if ((this._ReportArchiveAndBasicParametrsMappingTableID != value))
				{
					this.OnReportArchiveAndBasicParametrsMappingTableIDChanging(value);
					this.SendPropertyChanging();
					this._ReportArchiveAndBasicParametrsMappingTableID = value;
					this.SendPropertyChanged("ReportArchiveAndBasicParametrsMappingTableID");
					this.OnReportArchiveAndBasicParametrsMappingTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BasicParametrsTable", DbType="Int NOT NULL")]
		public int FK_BasicParametrsTable
		{
			get
			{
				return this._FK_BasicParametrsTable;
			}
			set
			{
				if ((this._FK_BasicParametrsTable != value))
				{
					if (this._BasicParametersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BasicParametrsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_BasicParametrsTable = value;
					this.SendPropertyChanged("FK_BasicParametrsTable");
					this.OnFK_BasicParametrsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BasicParametersTable_ReportArchiveAndBasicParametrsMappingTable", Storage="_BasicParametersTable", ThisKey="FK_BasicParametrsTable", OtherKey="BasicParametersTableID", IsForeignKey=true)]
		public BasicParametersTable BasicParametersTable
		{
			get
			{
				return this._BasicParametersTable.Entity;
			}
			set
			{
				BasicParametersTable previousValue = this._BasicParametersTable.Entity;
				if (((previousValue != value) 
							|| (this._BasicParametersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicParametersTable.Entity = null;
						previousValue.ReportArchiveAndBasicParametrsMappingTable.Remove(this);
					}
					this._BasicParametersTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndBasicParametrsMappingTable.Add(this);
						this._FK_BasicParametrsTable = value.BasicParametersTableID;
					}
					else
					{
						this._FK_BasicParametrsTable = default(int);
					}
					this.SendPropertyChanged("BasicParametersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndBasicParametrsMappingTable", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.ReportArchiveAndBasicParametrsMappingTable.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndBasicParametrsMappingTable.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(int);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportArchiveAndCalculatedParametrsMappingTable")]
	public partial class ReportArchiveAndCalculatedParametrsMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportArchiveAndCalculatedParametrsMappingTableID;
		
		private bool _Active;
		
		private int _FK_ReportArchiveTable;
		
		private int _FK_CalculatedParametrsTable;
		
		private EntityRef<CalculatedParametrs> _CalculatedParametrs;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportArchiveAndCalculatedParametrsMappingTableIDChanging(int value);
    partial void OnReportArchiveAndCalculatedParametrsMappingTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_ReportArchiveTableChanging(int value);
    partial void OnFK_ReportArchiveTableChanged();
    partial void OnFK_CalculatedParametrsTableChanging(int value);
    partial void OnFK_CalculatedParametrsTableChanged();
    #endregion
		
		public ReportArchiveAndCalculatedParametrsMappingTable()
		{
			this._CalculatedParametrs = default(EntityRef<CalculatedParametrs>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportArchiveAndCalculatedParametrsMappingTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportArchiveAndCalculatedParametrsMappingTableID
		{
			get
			{
				return this._ReportArchiveAndCalculatedParametrsMappingTableID;
			}
			set
			{
				if ((this._ReportArchiveAndCalculatedParametrsMappingTableID != value))
				{
					this.OnReportArchiveAndCalculatedParametrsMappingTableIDChanging(value);
					this.SendPropertyChanging();
					this._ReportArchiveAndCalculatedParametrsMappingTableID = value;
					this.SendPropertyChanged("ReportArchiveAndCalculatedParametrsMappingTableID");
					this.OnReportArchiveAndCalculatedParametrsMappingTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CalculatedParametrsTable", DbType="Int NOT NULL")]
		public int FK_CalculatedParametrsTable
		{
			get
			{
				return this._FK_CalculatedParametrsTable;
			}
			set
			{
				if ((this._FK_CalculatedParametrsTable != value))
				{
					if (this._CalculatedParametrs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CalculatedParametrsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CalculatedParametrsTable = value;
					this.SendPropertyChanged("FK_CalculatedParametrsTable");
					this.OnFK_CalculatedParametrsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculatedParametrs_ReportArchiveAndCalculatedParametrsMappingTable", Storage="_CalculatedParametrs", ThisKey="FK_CalculatedParametrsTable", OtherKey="CalculatedParametrsID", IsForeignKey=true)]
		public CalculatedParametrs CalculatedParametrs
		{
			get
			{
				return this._CalculatedParametrs.Entity;
			}
			set
			{
				CalculatedParametrs previousValue = this._CalculatedParametrs.Entity;
				if (((previousValue != value) 
							|| (this._CalculatedParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalculatedParametrs.Entity = null;
						previousValue.ReportArchiveAndCalculatedParametrsMappingTable.Remove(this);
					}
					this._CalculatedParametrs.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndCalculatedParametrsMappingTable.Add(this);
						this._FK_CalculatedParametrsTable = value.CalculatedParametrsID;
					}
					else
					{
						this._FK_CalculatedParametrsTable = default(int);
					}
					this.SendPropertyChanged("CalculatedParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndCalculatedParametrsMappingTable", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.ReportArchiveAndCalculatedParametrsMappingTable.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndCalculatedParametrsMappingTable.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(int);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportArchiveAndIndicatorsMappingTable")]
	public partial class ReportArchiveAndIndicatorsMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportArchiveAndIndicatorsMappingTableID;
		
		private bool _Active;
		
		private int _FK_ReportArchiveTable;
		
		private int _FK_IndicatorsTable;
		
		private EntityRef<IndicatorsTable> _IndicatorsTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportArchiveAndIndicatorsMappingTableIDChanging(int value);
    partial void OnReportArchiveAndIndicatorsMappingTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_ReportArchiveTableChanging(int value);
    partial void OnFK_ReportArchiveTableChanged();
    partial void OnFK_IndicatorsTableChanging(int value);
    partial void OnFK_IndicatorsTableChanged();
    #endregion
		
		public ReportArchiveAndIndicatorsMappingTable()
		{
			this._IndicatorsTable = default(EntityRef<IndicatorsTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportArchiveAndIndicatorsMappingTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportArchiveAndIndicatorsMappingTableID
		{
			get
			{
				return this._ReportArchiveAndIndicatorsMappingTableID;
			}
			set
			{
				if ((this._ReportArchiveAndIndicatorsMappingTableID != value))
				{
					this.OnReportArchiveAndIndicatorsMappingTableIDChanging(value);
					this.SendPropertyChanging();
					this._ReportArchiveAndIndicatorsMappingTableID = value;
					this.SendPropertyChanged("ReportArchiveAndIndicatorsMappingTableID");
					this.OnReportArchiveAndIndicatorsMappingTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTable", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTable
		{
			get
			{
				return this._FK_ReportArchiveTable;
			}
			set
			{
				if ((this._FK_ReportArchiveTable != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTable = value;
					this.SendPropertyChanged("FK_ReportArchiveTable");
					this.OnFK_ReportArchiveTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_IndicatorsTable", DbType="Int NOT NULL")]
		public int FK_IndicatorsTable
		{
			get
			{
				return this._FK_IndicatorsTable;
			}
			set
			{
				if ((this._FK_IndicatorsTable != value))
				{
					if (this._IndicatorsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_IndicatorsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_IndicatorsTable = value;
					this.SendPropertyChanged("FK_IndicatorsTable");
					this.OnFK_IndicatorsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IndicatorsTable_ReportArchiveAndIndicatorsMappingTable", Storage="_IndicatorsTable", ThisKey="FK_IndicatorsTable", OtherKey="IndicatorsTableID", IsForeignKey=true)]
		public IndicatorsTable IndicatorsTable
		{
			get
			{
				return this._IndicatorsTable.Entity;
			}
			set
			{
				IndicatorsTable previousValue = this._IndicatorsTable.Entity;
				if (((previousValue != value) 
							|| (this._IndicatorsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IndicatorsTable.Entity = null;
						previousValue.ReportArchiveAndIndicatorsMappingTable.Remove(this);
					}
					this._IndicatorsTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndIndicatorsMappingTable.Add(this);
						this._FK_IndicatorsTable = value.IndicatorsTableID;
					}
					else
					{
						this._FK_IndicatorsTable = default(int);
					}
					this.SendPropertyChanged("IndicatorsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndIndicatorsMappingTable", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTable", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.ReportArchiveAndIndicatorsMappingTable.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndIndicatorsMappingTable.Add(this);
						this._FK_ReportArchiveTable = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTable = default(int);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportArchiveAndLevelMappingTable")]
	public partial class ReportArchiveAndLevelMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportArchiveAndLevelMappingTableId;
		
		private bool _Active;
		
		private int _FK_ReportArchiveTableId;
		
		private int _FK_FirstLevelSubmisionTableId;
		
		private System.Nullable<int> _FK_SecondLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_ThirdLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FourthLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FifthLevelSubdivisionTable;
		
		private EntityRef<FifthLevelSubdivisionTable> _FifthLevelSubdivisionTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntityRef<ReportArchiveTable> _ReportArchiveTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportArchiveAndLevelMappingTableIdChanging(int value);
    partial void OnReportArchiveAndLevelMappingTableIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_ReportArchiveTableIdChanging(int value);
    partial void OnFK_ReportArchiveTableIdChanged();
    partial void OnFK_FirstLevelSubmisionTableIdChanging(int value);
    partial void OnFK_FirstLevelSubmisionTableIdChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_FourthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FourthLevelSubdivisionTableChanged();
    partial void OnFK_FifthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FifthLevelSubdivisionTableChanged();
    #endregion
		
		public ReportArchiveAndLevelMappingTable()
		{
			this._FifthLevelSubdivisionTable = default(EntityRef<FifthLevelSubdivisionTable>);
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			this._ReportArchiveTable = default(EntityRef<ReportArchiveTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportArchiveAndLevelMappingTableId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportArchiveAndLevelMappingTableId
		{
			get
			{
				return this._ReportArchiveAndLevelMappingTableId;
			}
			set
			{
				if ((this._ReportArchiveAndLevelMappingTableId != value))
				{
					this.OnReportArchiveAndLevelMappingTableIdChanging(value);
					this.SendPropertyChanging();
					this._ReportArchiveAndLevelMappingTableId = value;
					this.SendPropertyChanged("ReportArchiveAndLevelMappingTableId");
					this.OnReportArchiveAndLevelMappingTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ReportArchiveTableId", DbType="Int NOT NULL")]
		public int FK_ReportArchiveTableId
		{
			get
			{
				return this._FK_ReportArchiveTableId;
			}
			set
			{
				if ((this._FK_ReportArchiveTableId != value))
				{
					if (this._ReportArchiveTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ReportArchiveTableIdChanging(value);
					this.SendPropertyChanging();
					this._FK_ReportArchiveTableId = value;
					this.SendPropertyChanged("FK_ReportArchiveTableId");
					this.OnFK_ReportArchiveTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubmisionTableId", DbType="Int NOT NULL")]
		public int FK_FirstLevelSubmisionTableId
		{
			get
			{
				return this._FK_FirstLevelSubmisionTableId;
			}
			set
			{
				if ((this._FK_FirstLevelSubmisionTableId != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubmisionTableIdChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubmisionTableId = value;
					this.SendPropertyChanged("FK_FirstLevelSubmisionTableId");
					this.OnFK_FirstLevelSubmisionTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FourthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FourthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLevelSubdivisionTable != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FourthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLevelSubdivisionTable");
					this.OnFK_FourthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FifthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FifthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FifthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FifthLevelSubdivisionTable != value))
				{
					if (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FifthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FifthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FifthLevelSubdivisionTable");
					this.OnFK_FifthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_FifthLevelSubdivisionTable", ThisKey="FK_FifthLevelSubdivisionTable", OtherKey="FifthLevelSubdivisionTableID", IsForeignKey=true)]
		public FifthLevelSubdivisionTable FifthLevelSubdivisionTable
		{
			get
			{
				return this._FifthLevelSubdivisionTable.Entity;
			}
			set
			{
				FifthLevelSubdivisionTable previousValue = this._FifthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FifthLevelSubdivisionTable.Entity = null;
						previousValue.ReportArchiveAndLevelMappingTable.Remove(this);
					}
					this._FifthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndLevelMappingTable.Add(this);
						this._FK_FifthLevelSubdivisionTable = value.FifthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FifthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FifthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubmisionTableId", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.ReportArchiveAndLevelMappingTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndLevelMappingTable.Add(this);
						this._FK_FirstLevelSubmisionTableId = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubmisionTableId = default(int);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_FourthLevelSubdivisionTable", ThisKey="FK_FourthLevelSubdivisionTable", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.ReportArchiveAndLevelMappingTable.Remove(this);
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndLevelMappingTable.Add(this);
						this._FK_FourthLevelSubdivisionTable = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FourthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndLevelMappingTable", Storage="_ReportArchiveTable", ThisKey="FK_ReportArchiveTableId", OtherKey="ReportArchiveTableID", IsForeignKey=true)]
		public ReportArchiveTable ReportArchiveTable
		{
			get
			{
				return this._ReportArchiveTable.Entity;
			}
			set
			{
				ReportArchiveTable previousValue = this._ReportArchiveTable.Entity;
				if (((previousValue != value) 
							|| (this._ReportArchiveTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportArchiveTable.Entity = null;
						previousValue.ReportArchiveAndLevelMappingTable.Remove(this);
					}
					this._ReportArchiveTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndLevelMappingTable.Add(this);
						this._FK_ReportArchiveTableId = value.ReportArchiveTableID;
					}
					else
					{
						this._FK_ReportArchiveTableId = default(int);
					}
					this.SendPropertyChanged("ReportArchiveTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.ReportArchiveAndLevelMappingTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndLevelMappingTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.ReportArchiveAndLevelMappingTable.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ReportArchiveAndLevelMappingTable.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportArchiveTable")]
	public partial class ReportArchiveTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportArchiveTableID;
		
		private bool _Active;
		
		private bool _Calculeted;
		
		private bool _Sent;
		
		private System.Nullable<System.DateTime> _SentDateTime;
		
		private bool _RecipientConfirmed;
		
		private System.Nullable<System.DateTime> _StartDateTime;
		
		private System.Nullable<System.DateTime> _EndDateTime;
		
		private System.Nullable<System.DateTime> _DateToSend;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _RecivedDateTime;
		
		private System.Nullable<System.DateTime> _ConfirmEndDay;
		
		private System.Nullable<int> _DaysBeforeToCalcForRector;
		
		private System.Nullable<bool> _OnlyForProrector;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CollectedCalculatedParametrs> _CollectedCalculatedParametrs;
		
		private EntitySet<CollectedIndicatorsForR> _CollectedIndicatorsForR;
		
		private EntitySet<CollectedIndocators> _CollectedIndocators;
		
		private EntitySet<CommetntForBasicInReport> _CommetntForBasicInReport;
		
		private EntitySet<ConfirmationHistory> _ConfirmationHistory;
		
		private EntitySet<EmailSendHistory> _EmailSendHistory;
		
		private EntitySet<ReportArchiveAndBasicParametrsMappingTable> _ReportArchiveAndBasicParametrsMappingTable;
		
		private EntitySet<ReportArchiveAndCalculatedParametrsMappingTable> _ReportArchiveAndCalculatedParametrsMappingTable;
		
		private EntitySet<ReportArchiveAndIndicatorsMappingTable> _ReportArchiveAndIndicatorsMappingTable;
		
		private EntitySet<ReportArchiveAndLevelMappingTable> _ReportArchiveAndLevelMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportArchiveTableIDChanging(int value);
    partial void OnReportArchiveTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCalculetedChanging(bool value);
    partial void OnCalculetedChanged();
    partial void OnSentChanging(bool value);
    partial void OnSentChanged();
    partial void OnSentDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSentDateTimeChanged();
    partial void OnRecipientConfirmedChanging(bool value);
    partial void OnRecipientConfirmedChanged();
    partial void OnStartDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateTimeChanged();
    partial void OnEndDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateTimeChanged();
    partial void OnDateToSendChanging(System.Nullable<System.DateTime> value);
    partial void OnDateToSendChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRecivedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnRecivedDateTimeChanged();
    partial void OnConfirmEndDayChanging(System.Nullable<System.DateTime> value);
    partial void OnConfirmEndDayChanged();
    partial void OnDaysBeforeToCalcForRectorChanging(System.Nullable<int> value);
    partial void OnDaysBeforeToCalcForRectorChanged();
    partial void OnOnlyForProrectorChanging(System.Nullable<bool> value);
    partial void OnOnlyForProrectorChanged();
    #endregion
		
		public ReportArchiveTable()
		{
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CollectedCalculatedParametrs = new EntitySet<CollectedCalculatedParametrs>(new Action<CollectedCalculatedParametrs>(this.attach_CollectedCalculatedParametrs), new Action<CollectedCalculatedParametrs>(this.detach_CollectedCalculatedParametrs));
			this._CollectedIndicatorsForR = new EntitySet<CollectedIndicatorsForR>(new Action<CollectedIndicatorsForR>(this.attach_CollectedIndicatorsForR), new Action<CollectedIndicatorsForR>(this.detach_CollectedIndicatorsForR));
			this._CollectedIndocators = new EntitySet<CollectedIndocators>(new Action<CollectedIndocators>(this.attach_CollectedIndocators), new Action<CollectedIndocators>(this.detach_CollectedIndocators));
			this._CommetntForBasicInReport = new EntitySet<CommetntForBasicInReport>(new Action<CommetntForBasicInReport>(this.attach_CommetntForBasicInReport), new Action<CommetntForBasicInReport>(this.detach_CommetntForBasicInReport));
			this._ConfirmationHistory = new EntitySet<ConfirmationHistory>(new Action<ConfirmationHistory>(this.attach_ConfirmationHistory), new Action<ConfirmationHistory>(this.detach_ConfirmationHistory));
			this._EmailSendHistory = new EntitySet<EmailSendHistory>(new Action<EmailSendHistory>(this.attach_EmailSendHistory), new Action<EmailSendHistory>(this.detach_EmailSendHistory));
			this._ReportArchiveAndBasicParametrsMappingTable = new EntitySet<ReportArchiveAndBasicParametrsMappingTable>(new Action<ReportArchiveAndBasicParametrsMappingTable>(this.attach_ReportArchiveAndBasicParametrsMappingTable), new Action<ReportArchiveAndBasicParametrsMappingTable>(this.detach_ReportArchiveAndBasicParametrsMappingTable));
			this._ReportArchiveAndCalculatedParametrsMappingTable = new EntitySet<ReportArchiveAndCalculatedParametrsMappingTable>(new Action<ReportArchiveAndCalculatedParametrsMappingTable>(this.attach_ReportArchiveAndCalculatedParametrsMappingTable), new Action<ReportArchiveAndCalculatedParametrsMappingTable>(this.detach_ReportArchiveAndCalculatedParametrsMappingTable));
			this._ReportArchiveAndIndicatorsMappingTable = new EntitySet<ReportArchiveAndIndicatorsMappingTable>(new Action<ReportArchiveAndIndicatorsMappingTable>(this.attach_ReportArchiveAndIndicatorsMappingTable), new Action<ReportArchiveAndIndicatorsMappingTable>(this.detach_ReportArchiveAndIndicatorsMappingTable));
			this._ReportArchiveAndLevelMappingTable = new EntitySet<ReportArchiveAndLevelMappingTable>(new Action<ReportArchiveAndLevelMappingTable>(this.attach_ReportArchiveAndLevelMappingTable), new Action<ReportArchiveAndLevelMappingTable>(this.detach_ReportArchiveAndLevelMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportArchiveTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReportArchiveTableID
		{
			get
			{
				return this._ReportArchiveTableID;
			}
			set
			{
				if ((this._ReportArchiveTableID != value))
				{
					this.OnReportArchiveTableIDChanging(value);
					this.SendPropertyChanging();
					this._ReportArchiveTableID = value;
					this.SendPropertyChanged("ReportArchiveTableID");
					this.OnReportArchiveTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Calculeted", DbType="Bit NOT NULL")]
		public bool Calculeted
		{
			get
			{
				return this._Calculeted;
			}
			set
			{
				if ((this._Calculeted != value))
				{
					this.OnCalculetedChanging(value);
					this.SendPropertyChanging();
					this._Calculeted = value;
					this.SendPropertyChanged("Calculeted");
					this.OnCalculetedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sent", DbType="Bit NOT NULL")]
		public bool Sent
		{
			get
			{
				return this._Sent;
			}
			set
			{
				if ((this._Sent != value))
				{
					this.OnSentChanging(value);
					this.SendPropertyChanging();
					this._Sent = value;
					this.SendPropertyChanged("Sent");
					this.OnSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SentDateTime
		{
			get
			{
				return this._SentDateTime;
			}
			set
			{
				if ((this._SentDateTime != value))
				{
					this.OnSentDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SentDateTime = value;
					this.SendPropertyChanged("SentDateTime");
					this.OnSentDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipientConfirmed", DbType="Bit NOT NULL")]
		public bool RecipientConfirmed
		{
			get
			{
				return this._RecipientConfirmed;
			}
			set
			{
				if ((this._RecipientConfirmed != value))
				{
					this.OnRecipientConfirmedChanging(value);
					this.SendPropertyChanging();
					this._RecipientConfirmed = value;
					this.SendPropertyChanged("RecipientConfirmed");
					this.OnRecipientConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateToSend", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateToSend
		{
			get
			{
				return this._DateToSend;
			}
			set
			{
				if ((this._DateToSend != value))
				{
					this.OnDateToSendChanging(value);
					this.SendPropertyChanging();
					this._DateToSend = value;
					this.SendPropertyChanged("DateToSend");
					this.OnDateToSendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecivedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> RecivedDateTime
		{
			get
			{
				return this._RecivedDateTime;
			}
			set
			{
				if ((this._RecivedDateTime != value))
				{
					this.OnRecivedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._RecivedDateTime = value;
					this.SendPropertyChanged("RecivedDateTime");
					this.OnRecivedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmEndDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConfirmEndDay
		{
			get
			{
				return this._ConfirmEndDay;
			}
			set
			{
				if ((this._ConfirmEndDay != value))
				{
					this.OnConfirmEndDayChanging(value);
					this.SendPropertyChanging();
					this._ConfirmEndDay = value;
					this.SendPropertyChanged("ConfirmEndDay");
					this.OnConfirmEndDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysBeforeToCalcForRector", DbType="Int")]
		public System.Nullable<int> DaysBeforeToCalcForRector
		{
			get
			{
				return this._DaysBeforeToCalcForRector;
			}
			set
			{
				if ((this._DaysBeforeToCalcForRector != value))
				{
					this.OnDaysBeforeToCalcForRectorChanging(value);
					this.SendPropertyChanging();
					this._DaysBeforeToCalcForRector = value;
					this.SendPropertyChanged("DaysBeforeToCalcForRector");
					this.OnDaysBeforeToCalcForRectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnlyForProrector", DbType="Bit")]
		public System.Nullable<bool> OnlyForProrector
		{
			get
			{
				return this._OnlyForProrector;
			}
			set
			{
				if ((this._OnlyForProrector != value))
				{
					this.OnOnlyForProrectorChanging(value);
					this.SendPropertyChanging();
					this._OnlyForProrector = value;
					this.SendPropertyChanged("OnlyForProrector");
					this.OnOnlyForProrectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedCalculatedParametrs", Storage="_CollectedCalculatedParametrs", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<CollectedCalculatedParametrs> CollectedCalculatedParametrs
		{
			get
			{
				return this._CollectedCalculatedParametrs;
			}
			set
			{
				this._CollectedCalculatedParametrs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedIndicatorsForR", Storage="_CollectedIndicatorsForR", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this._CollectedIndicatorsForR;
			}
			set
			{
				this._CollectedIndicatorsForR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CollectedIndocators", Storage="_CollectedIndocators", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<CollectedIndocators> CollectedIndocators
		{
			get
			{
				return this._CollectedIndocators;
			}
			set
			{
				this._CollectedIndocators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_CommetntForBasicInReport", Storage="_CommetntForBasicInReport", ThisKey="ReportArchiveTableID", OtherKey="FK_Report")]
		public EntitySet<CommetntForBasicInReport> CommetntForBasicInReport
		{
			get
			{
				return this._CommetntForBasicInReport;
			}
			set
			{
				this._CommetntForBasicInReport.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ConfirmationHistory", Storage="_ConfirmationHistory", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportTable")]
		public EntitySet<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this._ConfirmationHistory;
			}
			set
			{
				this._ConfirmationHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_EmailSendHistory", Storage="_EmailSendHistory", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportsArchiveTable")]
		public EntitySet<EmailSendHistory> EmailSendHistory
		{
			get
			{
				return this._EmailSendHistory;
			}
			set
			{
				this._EmailSendHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndBasicParametrsMappingTable", Storage="_ReportArchiveAndBasicParametrsMappingTable", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<ReportArchiveAndBasicParametrsMappingTable> ReportArchiveAndBasicParametrsMappingTable
		{
			get
			{
				return this._ReportArchiveAndBasicParametrsMappingTable;
			}
			set
			{
				this._ReportArchiveAndBasicParametrsMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndCalculatedParametrsMappingTable", Storage="_ReportArchiveAndCalculatedParametrsMappingTable", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<ReportArchiveAndCalculatedParametrsMappingTable> ReportArchiveAndCalculatedParametrsMappingTable
		{
			get
			{
				return this._ReportArchiveAndCalculatedParametrsMappingTable;
			}
			set
			{
				this._ReportArchiveAndCalculatedParametrsMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndIndicatorsMappingTable", Storage="_ReportArchiveAndIndicatorsMappingTable", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTable")]
		public EntitySet<ReportArchiveAndIndicatorsMappingTable> ReportArchiveAndIndicatorsMappingTable
		{
			get
			{
				return this._ReportArchiveAndIndicatorsMappingTable;
			}
			set
			{
				this._ReportArchiveAndIndicatorsMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportArchiveTable_ReportArchiveAndLevelMappingTable", Storage="_ReportArchiveAndLevelMappingTable", ThisKey="ReportArchiveTableID", OtherKey="FK_ReportArchiveTableId")]
		public EntitySet<ReportArchiveAndLevelMappingTable> ReportArchiveAndLevelMappingTable
		{
			get
			{
				return this._ReportArchiveAndLevelMappingTable;
			}
			set
			{
				this._ReportArchiveAndLevelMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_CollectedCalculatedParametrs(CollectedCalculatedParametrs entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_CollectedCalculatedParametrs(CollectedCalculatedParametrs entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_CollectedIndocators(CollectedIndocators entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_CollectedIndocators(CollectedIndocators entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_CommetntForBasicInReport(CommetntForBasicInReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_CommetntForBasicInReport(CommetntForBasicInReport entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_EmailSendHistory(EmailSendHistory entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_EmailSendHistory(EmailSendHistory entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_ReportArchiveAndBasicParametrsMappingTable(ReportArchiveAndBasicParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_ReportArchiveAndBasicParametrsMappingTable(ReportArchiveAndBasicParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_ReportArchiveAndCalculatedParametrsMappingTable(ReportArchiveAndCalculatedParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_ReportArchiveAndCalculatedParametrsMappingTable(ReportArchiveAndCalculatedParametrsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_ReportArchiveAndIndicatorsMappingTable(ReportArchiveAndIndicatorsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_ReportArchiveAndIndicatorsMappingTable(ReportArchiveAndIndicatorsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
		
		private void attach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = this;
		}
		
		private void detach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ReportArchiveTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolesTable")]
	public partial class RolesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RolesTableID;
		
		private bool _Active;
		
		private string _RoleName;
		
		private System.Nullable<bool> _IsHead;
		
		private EntitySet<BasicParametersAndRolesMappingTable> _BasicParametersAndRolesMappingTable;
		
		private EntitySet<CalculatedParametrsAndRolesMappingTable> _CalculatedParametrsAndRolesMappingTable;
		
		private EntitySet<IndicatorsAndRolesMappingTable> _IndicatorsAndRolesMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRolesTableIDChanging(int value);
    partial void OnRolesTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnIsHeadChanging(System.Nullable<bool> value);
    partial void OnIsHeadChanged();
    #endregion
		
		public RolesTable()
		{
			this._BasicParametersAndRolesMappingTable = new EntitySet<BasicParametersAndRolesMappingTable>(new Action<BasicParametersAndRolesMappingTable>(this.attach_BasicParametersAndRolesMappingTable), new Action<BasicParametersAndRolesMappingTable>(this.detach_BasicParametersAndRolesMappingTable));
			this._CalculatedParametrsAndRolesMappingTable = new EntitySet<CalculatedParametrsAndRolesMappingTable>(new Action<CalculatedParametrsAndRolesMappingTable>(this.attach_CalculatedParametrsAndRolesMappingTable), new Action<CalculatedParametrsAndRolesMappingTable>(this.detach_CalculatedParametrsAndRolesMappingTable));
			this._IndicatorsAndRolesMappingTable = new EntitySet<IndicatorsAndRolesMappingTable>(new Action<IndicatorsAndRolesMappingTable>(this.attach_IndicatorsAndRolesMappingTable), new Action<IndicatorsAndRolesMappingTable>(this.detach_IndicatorsAndRolesMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolesTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RolesTableID
		{
			get
			{
				return this._RolesTableID;
			}
			set
			{
				if ((this._RolesTableID != value))
				{
					this.OnRolesTableIDChanging(value);
					this.SendPropertyChanging();
					this._RolesTableID = value;
					this.SendPropertyChanged("RolesTableID");
					this.OnRolesTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHead", DbType="Bit")]
		public System.Nullable<bool> IsHead
		{
			get
			{
				return this._IsHead;
			}
			set
			{
				if ((this._IsHead != value))
				{
					this.OnIsHeadChanging(value);
					this.SendPropertyChanging();
					this._IsHead = value;
					this.SendPropertyChanged("IsHead");
					this.OnIsHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_BasicParametersAndRolesMappingTable", Storage="_BasicParametersAndRolesMappingTable", ThisKey="RolesTableID", OtherKey="FK_RolesTable")]
		public EntitySet<BasicParametersAndRolesMappingTable> BasicParametersAndRolesMappingTable
		{
			get
			{
				return this._BasicParametersAndRolesMappingTable;
			}
			set
			{
				this._BasicParametersAndRolesMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_CalculatedParametrsAndRolesMappingTable", Storage="_CalculatedParametrsAndRolesMappingTable", ThisKey="RolesTableID", OtherKey="FK_RolesTable")]
		public EntitySet<CalculatedParametrsAndRolesMappingTable> CalculatedParametrsAndRolesMappingTable
		{
			get
			{
				return this._CalculatedParametrsAndRolesMappingTable;
			}
			set
			{
				this._CalculatedParametrsAndRolesMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolesTable_IndicatorsAndRolesMappingTable", Storage="_IndicatorsAndRolesMappingTable", ThisKey="RolesTableID", OtherKey="FK_RolesTable")]
		public EntitySet<IndicatorsAndRolesMappingTable> IndicatorsAndRolesMappingTable
		{
			get
			{
				return this._IndicatorsAndRolesMappingTable;
			}
			set
			{
				this._IndicatorsAndRolesMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = this;
		}
		
		private void detach_BasicParametersAndRolesMappingTable(BasicParametersAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = null;
		}
		
		private void attach_CalculatedParametrsAndRolesMappingTable(CalculatedParametrsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = this;
		}
		
		private void detach_CalculatedParametrsAndRolesMappingTable(CalculatedParametrsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = null;
		}
		
		private void attach_IndicatorsAndRolesMappingTable(IndicatorsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = this;
		}
		
		private void detach_IndicatorsAndRolesMappingTable(IndicatorsAndRolesMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.RolesTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecondLevelSubdivisionTable")]
	public partial class SecondLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SecondLevelSubdivisionTableID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private int _FK_FirstLevelSubdivisionTable;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CollectedIndicatorsForR> _CollectedIndicatorsForR;
		
		private EntitySet<Rank_StructureRaitings> _Rank_StructureRaitings;
		
		private EntitySet<ReportArchiveAndLevelMappingTable> _ReportArchiveAndLevelMappingTable;
		
		private EntitySet<StudentGroupsTable> _StudentGroupsTable;
		
		private EntitySet<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecondLevelSubdivisionTableIDChanging(int value);
    partial void OnSecondLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(int value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    #endregion
		
		public SecondLevelSubdivisionTable()
		{
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CollectedIndicatorsForR = new EntitySet<CollectedIndicatorsForR>(new Action<CollectedIndicatorsForR>(this.attach_CollectedIndicatorsForR), new Action<CollectedIndicatorsForR>(this.detach_CollectedIndicatorsForR));
			this._Rank_StructureRaitings = new EntitySet<Rank_StructureRaitings>(new Action<Rank_StructureRaitings>(this.attach_Rank_StructureRaitings), new Action<Rank_StructureRaitings>(this.detach_Rank_StructureRaitings));
			this._ReportArchiveAndLevelMappingTable = new EntitySet<ReportArchiveAndLevelMappingTable>(new Action<ReportArchiveAndLevelMappingTable>(this.attach_ReportArchiveAndLevelMappingTable), new Action<ReportArchiveAndLevelMappingTable>(this.detach_ReportArchiveAndLevelMappingTable));
			this._StudentGroupsTable = new EntitySet<StudentGroupsTable>(new Action<StudentGroupsTable>(this.attach_StudentGroupsTable), new Action<StudentGroupsTable>(this.detach_StudentGroupsTable));
			this._ThirdLevelSubdivisionTable = new EntitySet<ThirdLevelSubdivisionTable>(new Action<ThirdLevelSubdivisionTable>(this.attach_ThirdLevelSubdivisionTable), new Action<ThirdLevelSubdivisionTable>(this.detach_ThirdLevelSubdivisionTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SecondLevelSubdivisionTableID
		{
			get
			{
				return this._SecondLevelSubdivisionTableID;
			}
			set
			{
				if ((this._SecondLevelSubdivisionTableID != value))
				{
					this.OnSecondLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._SecondLevelSubdivisionTableID = value;
					this.SendPropertyChanged("SecondLevelSubdivisionTableID");
					this.OnSecondLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_CollectedIndicatorsForR", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this._CollectedIndicatorsForR;
			}
			set
			{
				this._CollectedIndicatorsForR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_Rank_StructureRaitings", Storage="_Rank_StructureRaitings", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevel")]
		public EntitySet<Rank_StructureRaitings> Rank_StructureRaitings
		{
			get
			{
				return this._Rank_StructureRaitings;
			}
			set
			{
				this._Rank_StructureRaitings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_ReportArchiveAndLevelMappingTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<ReportArchiveAndLevelMappingTable> ReportArchiveAndLevelMappingTable
		{
			get
			{
				return this._ReportArchiveAndLevelMappingTable;
			}
			set
			{
				this._ReportArchiveAndLevelMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_StudentGroupsTable", Storage="_StudentGroupsTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevel")]
		public EntitySet<StudentGroupsTable> StudentGroupsTable
		{
			get
			{
				return this._StudentGroupsTable;
			}
			set
			{
				this._StudentGroupsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ThirdLevelSubdivisionTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<ThirdLevelSubdivisionTable> ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable;
			}
			set
			{
				this._ThirdLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="SecondLevelSubdivisionTableID", OtherKey="FK_SecondLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_SecondLevelSubdivisionTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.SecondLevelSubdivisionTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.SecondLevelSubdivisionTable.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_Rank_StructureRaitings(Rank_StructureRaitings entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_Rank_StructureRaitings(Rank_StructureRaitings entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_StudentGroupsTable(StudentGroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_StudentGroupsTable(StudentGroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_ThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_ThirdLevelSubdivisionTable(ThirdLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SecondLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecializationTable")]
	public partial class SpecializationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecializationTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _SpecializationNumber;
		
		private System.Nullable<int> _FK_FieldOfExpertise;
		
		private EntitySet<EducationCostTable> _EducationCostTable;
		
		private EntitySet<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<FieldOfExpertise> _FieldOfExpertise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecializationTableIDChanging(int value);
    partial void OnSpecializationTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpecializationNumberChanging(string value);
    partial void OnSpecializationNumberChanged();
    partial void OnFK_FieldOfExpertiseChanging(System.Nullable<int> value);
    partial void OnFK_FieldOfExpertiseChanged();
    #endregion
		
		public SpecializationTable()
		{
			this._EducationCostTable = new EntitySet<EducationCostTable>(new Action<EducationCostTable>(this.attach_EducationCostTable), new Action<EducationCostTable>(this.detach_EducationCostTable));
			this._FourthLevelSubdivisionTable = new EntitySet<FourthLevelSubdivisionTable>(new Action<FourthLevelSubdivisionTable>(this.attach_FourthLevelSubdivisionTable), new Action<FourthLevelSubdivisionTable>(this.detach_FourthLevelSubdivisionTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._FieldOfExpertise = default(EntityRef<FieldOfExpertise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecializationTableID
		{
			get
			{
				return this._SpecializationTableID;
			}
			set
			{
				if ((this._SpecializationTableID != value))
				{
					this.OnSpecializationTableIDChanging(value);
					this.SendPropertyChanging();
					this._SpecializationTableID = value;
					this.SendPropertyChanged("SpecializationTableID");
					this.OnSpecializationTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecializationNumber", DbType="VarChar(50)")]
		public string SpecializationNumber
		{
			get
			{
				return this._SpecializationNumber;
			}
			set
			{
				if ((this._SpecializationNumber != value))
				{
					this.OnSpecializationNumberChanging(value);
					this.SendPropertyChanging();
					this._SpecializationNumber = value;
					this.SendPropertyChanged("SpecializationNumber");
					this.OnSpecializationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FieldOfExpertise", DbType="Int")]
		public System.Nullable<int> FK_FieldOfExpertise
		{
			get
			{
				return this._FK_FieldOfExpertise;
			}
			set
			{
				if ((this._FK_FieldOfExpertise != value))
				{
					if (this._FieldOfExpertise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FieldOfExpertiseChanging(value);
					this.SendPropertyChanging();
					this._FK_FieldOfExpertise = value;
					this.SendPropertyChanged("FK_FieldOfExpertise");
					this.OnFK_FieldOfExpertiseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_EducationCostTable", Storage="_EducationCostTable", ThisKey="SpecializationTableID", OtherKey="FK_Specialization")]
		public EntitySet<EducationCostTable> EducationCostTable
		{
			get
			{
				return this._EducationCostTable;
			}
			set
			{
				this._EducationCostTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_FourthLevelSubdivisionTable", Storage="_FourthLevelSubdivisionTable", ThisKey="SpecializationTableID", OtherKey="FK_Specialization")]
		public EntitySet<FourthLevelSubdivisionTable> FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable;
			}
			set
			{
				this._FourthLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_UsersTable", Storage="_UsersTable", ThisKey="SpecializationTableID", OtherKey="FK_Specialization")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldOfExpertise_SpecializationTable", Storage="_FieldOfExpertise", ThisKey="FK_FieldOfExpertise", OtherKey="FieldOfExpertiseID", IsForeignKey=true)]
		public FieldOfExpertise FieldOfExpertise
		{
			get
			{
				return this._FieldOfExpertise.Entity;
			}
			set
			{
				FieldOfExpertise previousValue = this._FieldOfExpertise.Entity;
				if (((previousValue != value) 
							|| (this._FieldOfExpertise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldOfExpertise.Entity = null;
						previousValue.SpecializationTable.Remove(this);
					}
					this._FieldOfExpertise.Entity = value;
					if ((value != null))
					{
						value.SpecializationTable.Add(this);
						this._FK_FieldOfExpertise = value.FieldOfExpertiseID;
					}
					else
					{
						this._FK_FieldOfExpertise = default(Nullable<int>);
					}
					this.SendPropertyChanged("FieldOfExpertise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EducationCostTable(EducationCostTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = this;
		}
		
		private void detach_EducationCostTable(EducationCostTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = null;
		}
		
		private void attach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = this;
		}
		
		private void detach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.SpecializationTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentGroupsTable")]
	public partial class StudentGroupsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private System.Nullable<int> _FK_SecondLevel;
		
		private EntitySet<ConnectGroup_And_Users> _ConnectGroup_And_Users;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_SecondLevelChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelChanged();
    #endregion
		
		public StudentGroupsTable()
		{
			this._ConnectGroup_And_Users = new EntitySet<ConnectGroup_And_Users>(new Action<ConnectGroup_And_Users>(this.attach_ConnectGroup_And_Users), new Action<ConnectGroup_And_Users>(this.detach_ConnectGroup_And_Users));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevel", DbType="Int")]
		public System.Nullable<int> FK_SecondLevel
		{
			get
			{
				return this._FK_SecondLevel;
			}
			set
			{
				if ((this._FK_SecondLevel != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevel = value;
					this.SendPropertyChanged("FK_SecondLevel");
					this.OnFK_SecondLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupsTable_ConnectGroup_And_Users", Storage="_ConnectGroup_And_Users", ThisKey="ID", OtherKey="FK_GroupTable")]
		public EntitySet<ConnectGroup_And_Users> ConnectGroup_And_Users
		{
			get
			{
				return this._ConnectGroup_And_Users;
			}
			set
			{
				this._ConnectGroup_And_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupsTable_UsersTable", Storage="_UsersTable", ThisKey="ID", OtherKey="FK_StudentGroup")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_StudentGroupsTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevel", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.StudentGroupsTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.StudentGroupsTable.Add(this);
						this._FK_SecondLevel = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevel = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupsTable = this;
		}
		
		private void detach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupsTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupsTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubdivisionClassTable")]
	public partial class SubdivisionClassTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private EntitySet<BasicParametrsAndSubdivisionClassMappingTable> _BasicParametrsAndSubdivisionClassMappingTable;
		
		private EntitySet<ThirdLevelParametrs> _ThirdLevelParametrs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SubdivisionClassTable()
		{
			this._BasicParametrsAndSubdivisionClassMappingTable = new EntitySet<BasicParametrsAndSubdivisionClassMappingTable>(new Action<BasicParametrsAndSubdivisionClassMappingTable>(this.attach_BasicParametrsAndSubdivisionClassMappingTable), new Action<BasicParametrsAndSubdivisionClassMappingTable>(this.detach_BasicParametrsAndSubdivisionClassMappingTable));
			this._ThirdLevelParametrs = new EntitySet<ThirdLevelParametrs>(new Action<ThirdLevelParametrs>(this.attach_ThirdLevelParametrs), new Action<ThirdLevelParametrs>(this.detach_ThirdLevelParametrs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubdivisionClassTable_BasicParametrsAndSubdivisionClassMappingTable", Storage="_BasicParametrsAndSubdivisionClassMappingTable", ThisKey="ID", OtherKey="FK_SubdivisionClassTable")]
		public EntitySet<BasicParametrsAndSubdivisionClassMappingTable> BasicParametrsAndSubdivisionClassMappingTable
		{
			get
			{
				return this._BasicParametrsAndSubdivisionClassMappingTable;
			}
			set
			{
				this._BasicParametrsAndSubdivisionClassMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubdivisionClassTable_ThirdLevelParametrs", Storage="_ThirdLevelParametrs", ThisKey="ID", OtherKey="FK_SubdivisionClassTable")]
		public EntitySet<ThirdLevelParametrs> ThirdLevelParametrs
		{
			get
			{
				return this._ThirdLevelParametrs;
			}
			set
			{
				this._ThirdLevelParametrs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicParametrsAndSubdivisionClassMappingTable(BasicParametrsAndSubdivisionClassMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.SubdivisionClassTable = this;
		}
		
		private void detach_BasicParametrsAndSubdivisionClassMappingTable(BasicParametrsAndSubdivisionClassMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.SubdivisionClassTable = null;
		}
		
		private void attach_ThirdLevelParametrs(ThirdLevelParametrs entity)
		{
			this.SendPropertyChanging();
			entity.SubdivisionClassTable = this;
		}
		
		private void detach_ThirdLevelParametrs(ThirdLevelParametrs entity)
		{
			this.SendPropertyChanging();
			entity.SubdivisionClassTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubdomainRedirectAutologinTable")]
	public partial class SubdomainRedirectAutologinTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private string _PassCode;
		
		private System.DateTime _EndDate;
		
		private int _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnPassCodeChanging(string value);
    partial void OnPassCodeChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public SubdomainRedirectAutologinTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassCode", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string PassCode
		{
			get
			{
				return this._PassCode;
			}
			set
			{
				if ((this._PassCode != value))
				{
					this.OnPassCodeChanging(value);
					this.SendPropertyChanging();
					this._PassCode = value;
					this.SendPropertyChanged("PassCode");
					this.OnPassCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThirdLevelParametrs")]
	public partial class ThirdLevelParametrs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThirdLevelParametrsID;
		
		private bool _Active;
		
		private bool _CanGraduate;
		
		private System.Nullable<bool> _IsBasic;
		
		private System.Nullable<int> _FK_SubdivisionClassTable;
		
		private EntityRef<SubdivisionClassTable> _SubdivisionClassTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThirdLevelParametrsIDChanging(int value);
    partial void OnThirdLevelParametrsIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCanGraduateChanging(bool value);
    partial void OnCanGraduateChanged();
    partial void OnIsBasicChanging(System.Nullable<bool> value);
    partial void OnIsBasicChanged();
    partial void OnFK_SubdivisionClassTableChanging(System.Nullable<int> value);
    partial void OnFK_SubdivisionClassTableChanged();
    #endregion
		
		public ThirdLevelParametrs()
		{
			this._SubdivisionClassTable = default(EntityRef<SubdivisionClassTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdLevelParametrsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ThirdLevelParametrsID
		{
			get
			{
				return this._ThirdLevelParametrsID;
			}
			set
			{
				if ((this._ThirdLevelParametrsID != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThirdLevelParametrsIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdLevelParametrsID = value;
					this.SendPropertyChanged("ThirdLevelParametrsID");
					this.OnThirdLevelParametrsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanGraduate", DbType="Bit NOT NULL")]
		public bool CanGraduate
		{
			get
			{
				return this._CanGraduate;
			}
			set
			{
				if ((this._CanGraduate != value))
				{
					this.OnCanGraduateChanging(value);
					this.SendPropertyChanging();
					this._CanGraduate = value;
					this.SendPropertyChanged("CanGraduate");
					this.OnCanGraduateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBasic", DbType="Bit")]
		public System.Nullable<bool> IsBasic
		{
			get
			{
				return this._IsBasic;
			}
			set
			{
				if ((this._IsBasic != value))
				{
					this.OnIsBasicChanging(value);
					this.SendPropertyChanging();
					this._IsBasic = value;
					this.SendPropertyChanged("IsBasic");
					this.OnIsBasicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SubdivisionClassTable", DbType="Int")]
		public System.Nullable<int> FK_SubdivisionClassTable
		{
			get
			{
				return this._FK_SubdivisionClassTable;
			}
			set
			{
				if ((this._FK_SubdivisionClassTable != value))
				{
					if (this._SubdivisionClassTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SubdivisionClassTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SubdivisionClassTable = value;
					this.SendPropertyChanged("FK_SubdivisionClassTable");
					this.OnFK_SubdivisionClassTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubdivisionClassTable_ThirdLevelParametrs", Storage="_SubdivisionClassTable", ThisKey="FK_SubdivisionClassTable", OtherKey="ID", IsForeignKey=true)]
		public SubdivisionClassTable SubdivisionClassTable
		{
			get
			{
				return this._SubdivisionClassTable.Entity;
			}
			set
			{
				SubdivisionClassTable previousValue = this._SubdivisionClassTable.Entity;
				if (((previousValue != value) 
							|| (this._SubdivisionClassTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubdivisionClassTable.Entity = null;
						previousValue.ThirdLevelParametrs.Remove(this);
					}
					this._SubdivisionClassTable.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelParametrs.Add(this);
						this._FK_SubdivisionClassTable = value.ID;
					}
					else
					{
						this._FK_SubdivisionClassTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubdivisionClassTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_ThirdLevelParametrs", Storage="_ThirdLevelSubdivisionTable", ThisKey="ThirdLevelParametrsID", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.ThirdLevelParametrs = null;
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelParametrs = this;
						this._ThirdLevelParametrsID = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._ThirdLevelParametrsID = default(int);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThirdLevelSubdivisionTable")]
	public partial class ThirdLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThirdLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_SecondLevelSubdivisionTable;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CollectedIndicatorsForR> _CollectedIndicatorsForR;
		
		private EntitySet<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntitySet<Rank_StructureRaitings> _Rank_StructureRaitings;
		
		private EntitySet<ReportArchiveAndLevelMappingTable> _ReportArchiveAndLevelMappingTable;
		
		private EntityRef<ThirdLevelParametrs> _ThirdLevelParametrs;
		
		private EntitySet<UsersTable> _UsersTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThirdLevelSubdivisionTableIDChanging(int value);
    partial void OnThirdLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(int value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    #endregion
		
		public ThirdLevelSubdivisionTable()
		{
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CollectedIndicatorsForR = new EntitySet<CollectedIndicatorsForR>(new Action<CollectedIndicatorsForR>(this.attach_CollectedIndicatorsForR), new Action<CollectedIndicatorsForR>(this.detach_CollectedIndicatorsForR));
			this._FourthLevelSubdivisionTable = new EntitySet<FourthLevelSubdivisionTable>(new Action<FourthLevelSubdivisionTable>(this.attach_FourthLevelSubdivisionTable), new Action<FourthLevelSubdivisionTable>(this.detach_FourthLevelSubdivisionTable));
			this._Rank_StructureRaitings = new EntitySet<Rank_StructureRaitings>(new Action<Rank_StructureRaitings>(this.attach_Rank_StructureRaitings), new Action<Rank_StructureRaitings>(this.detach_Rank_StructureRaitings));
			this._ReportArchiveAndLevelMappingTable = new EntitySet<ReportArchiveAndLevelMappingTable>(new Action<ReportArchiveAndLevelMappingTable>(this.attach_ReportArchiveAndLevelMappingTable), new Action<ReportArchiveAndLevelMappingTable>(this.detach_ReportArchiveAndLevelMappingTable));
			this._ThirdLevelParametrs = default(EntityRef<ThirdLevelParametrs>);
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThirdLevelSubdivisionTableID
		{
			get
			{
				return this._ThirdLevelSubdivisionTableID;
			}
			set
			{
				if ((this._ThirdLevelSubdivisionTableID != value))
				{
					this.OnThirdLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._ThirdLevelSubdivisionTableID = value;
					this.SendPropertyChanged("ThirdLevelSubdivisionTableID");
					this.OnThirdLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int NOT NULL")]
		public int FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_CollectedIndicatorsForR", Storage="_CollectedIndicatorsForR", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<CollectedIndicatorsForR> CollectedIndicatorsForR
		{
			get
			{
				return this._CollectedIndicatorsForR;
			}
			set
			{
				this._CollectedIndicatorsForR.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_FourthLevelSubdivisionTable", Storage="_FourthLevelSubdivisionTable", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<FourthLevelSubdivisionTable> FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable;
			}
			set
			{
				this._FourthLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_Rank_StructureRaitings", Storage="_Rank_StructureRaitings", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevel")]
		public EntitySet<Rank_StructureRaitings> Rank_StructureRaitings
		{
			get
			{
				return this._Rank_StructureRaitings;
			}
			set
			{
				this._Rank_StructureRaitings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_ReportArchiveAndLevelMappingTable", Storage="_ReportArchiveAndLevelMappingTable", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<ReportArchiveAndLevelMappingTable> ReportArchiveAndLevelMappingTable
		{
			get
			{
				return this._ReportArchiveAndLevelMappingTable;
			}
			set
			{
				this._ReportArchiveAndLevelMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_ThirdLevelParametrs", Storage="_ThirdLevelParametrs", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="ThirdLevelParametrsID", IsUnique=true, IsForeignKey=false)]
		public ThirdLevelParametrs ThirdLevelParametrs
		{
			get
			{
				return this._ThirdLevelParametrs.Entity;
			}
			set
			{
				ThirdLevelParametrs previousValue = this._ThirdLevelParametrs.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelParametrs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelParametrs.Entity = null;
						previousValue.ThirdLevelSubdivisionTable = null;
					}
					this._ThirdLevelParametrs.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelSubdivisionTable = this;
					}
					this.SendPropertyChanged("ThirdLevelParametrs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="ThirdLevelSubdivisionTableID", OtherKey="FK_ThirdLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_ThirdLevelSubdivisionTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.ThirdLevelSubdivisionTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.ThirdLevelSubdivisionTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(int);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
		
		private void attach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedIndicatorsForR(CollectedIndicatorsForR entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
		
		private void attach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_FourthLevelSubdivisionTable(FourthLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
		
		private void attach_Rank_StructureRaitings(Rank_StructureRaitings entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_Rank_StructureRaitings(Rank_StructureRaitings entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
		
		private void attach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_ReportArchiveAndLevelMappingTable(ReportArchiveAndLevelMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ThirdLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfWritingFIO")]
	public partial class TypeOfWritingFIO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FK_UserTableID;
		
		private string _FIO;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFK_UserTableIDChanging(System.Nullable<int> value);
    partial void OnFK_UserTableIDChanged();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public TypeOfWritingFIO()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserTableID", DbType="Int")]
		public System.Nullable<int> FK_UserTableID
		{
			get
			{
				return this._FK_UserTableID;
			}
			set
			{
				if ((this._FK_UserTableID != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserTableIDChanging(value);
					this.SendPropertyChanging();
					this._FK_UserTableID = value;
					this.SendPropertyChanged("FK_UserTableID");
					this.OnFK_UserTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO", DbType="NVarChar(50)")]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_TypeOfWritingFIO", Storage="_UsersTable", ThisKey="FK_UserTableID", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.TypeOfWritingFIO.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.TypeOfWritingFIO.Add(this);
						this._FK_UserTableID = value.UsersTableID;
					}
					else
					{
						this._FK_UserTableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDataChangeHistory")]
	public partial class UserDataChangeHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserChangeDataID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_User;
		
		private System.Nullable<System.DateTime> _ChangeDate;
		
		private string _Name;
		
		private System.Nullable<int> _ID_Param_ToChange;
		
		private System.Nullable<int> _Status;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserChangeDataIDChanging(int value);
    partial void OnUserChangeDataIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_UserChanging(System.Nullable<int> value);
    partial void OnFK_UserChanged();
    partial void OnChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnChangeDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnID_Param_ToChangeChanging(System.Nullable<int> value);
    partial void OnID_Param_ToChangeChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    #endregion
		
		public UserDataChangeHistory()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserChangeDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserChangeDataID
		{
			get
			{
				return this._UserChangeDataID;
			}
			set
			{
				if ((this._UserChangeDataID != value))
				{
					this.OnUserChangeDataIDChanging(value);
					this.SendPropertyChanging();
					this._UserChangeDataID = value;
					this.SendPropertyChanged("UserChangeDataID");
					this.OnUserChangeDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_User", DbType="Int")]
		public System.Nullable<int> FK_User
		{
			get
			{
				return this._FK_User;
			}
			set
			{
				if ((this._FK_User != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserChanging(value);
					this.SendPropertyChanging();
					this._FK_User = value;
					this.SendPropertyChanged("FK_User");
					this.OnFK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="Date")]
		public System.Nullable<System.DateTime> ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Param_ToChange", DbType="Int")]
		public System.Nullable<int> ID_Param_ToChange
		{
			get
			{
				return this._ID_Param_ToChange;
			}
			set
			{
				if ((this._ID_Param_ToChange != value))
				{
					this.OnID_Param_ToChangeChanging(value);
					this.SendPropertyChanging();
					this._ID_Param_ToChange = value;
					this.SendPropertyChanged("ID_Param_ToChange");
					this.OnID_Param_ToChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="VarChar(MAX)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="VarChar(MAX)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UserDataChangeHistory", Storage="_UsersTable", ThisKey="FK_User", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.UserDataChangeHistory.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.UserDataChangeHistory.Add(this);
						this._FK_User = value.UsersTableID;
					}
					else
					{
						this._FK_User = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroupTable")]
	public partial class UserGroupTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserGroupID;
		
		private System.Nullable<bool> _Active;
		
		private string _UserGroupName;
		
		private string _URLtoGroupMain;
		
		private System.Nullable<bool> _AutoLogin;
		
		private System.Nullable<int> _Fk_ProjectsTable;
		
		private string _ImageUrl;
		
		private EntitySet<ApplictionTypes> _ApplictionTypes;
		
		private EntitySet<UsersAndUserGroupMappingTable> _UsersAndUserGroupMappingTable;
		
		private EntityRef<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnUserGroupNameChanging(string value);
    partial void OnUserGroupNameChanged();
    partial void OnURLtoGroupMainChanging(string value);
    partial void OnURLtoGroupMainChanged();
    partial void OnAutoLoginChanging(System.Nullable<bool> value);
    partial void OnAutoLoginChanged();
    partial void OnFk_ProjectsTableChanging(System.Nullable<int> value);
    partial void OnFk_ProjectsTableChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    #endregion
		
		public UserGroupTable()
		{
			this._ApplictionTypes = new EntitySet<ApplictionTypes>(new Action<ApplictionTypes>(this.attach_ApplictionTypes), new Action<ApplictionTypes>(this.detach_ApplictionTypes));
			this._UsersAndUserGroupMappingTable = new EntitySet<UsersAndUserGroupMappingTable>(new Action<UsersAndUserGroupMappingTable>(this.attach_UsersAndUserGroupMappingTable), new Action<UsersAndUserGroupMappingTable>(this.detach_UsersAndUserGroupMappingTable));
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupName", DbType="NVarChar(50)")]
		public string UserGroupName
		{
			get
			{
				return this._UserGroupName;
			}
			set
			{
				if ((this._UserGroupName != value))
				{
					this.OnUserGroupNameChanging(value);
					this.SendPropertyChanging();
					this._UserGroupName = value;
					this.SendPropertyChanged("UserGroupName");
					this.OnUserGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URLtoGroupMain", DbType="VarChar(500)")]
		public string URLtoGroupMain
		{
			get
			{
				return this._URLtoGroupMain;
			}
			set
			{
				if ((this._URLtoGroupMain != value))
				{
					this.OnURLtoGroupMainChanging(value);
					this.SendPropertyChanging();
					this._URLtoGroupMain = value;
					this.SendPropertyChanged("URLtoGroupMain");
					this.OnURLtoGroupMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoLogin", DbType="Bit")]
		public System.Nullable<bool> AutoLogin
		{
			get
			{
				return this._AutoLogin;
			}
			set
			{
				if ((this._AutoLogin != value))
				{
					this.OnAutoLoginChanging(value);
					this.SendPropertyChanging();
					this._AutoLogin = value;
					this.SendPropertyChanged("AutoLogin");
					this.OnAutoLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_ProjectsTable", DbType="Int")]
		public System.Nullable<int> Fk_ProjectsTable
		{
			get
			{
				return this._Fk_ProjectsTable;
			}
			set
			{
				if ((this._Fk_ProjectsTable != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_ProjectsTableChanging(value);
					this.SendPropertyChanging();
					this._Fk_ProjectsTable = value;
					this.SendPropertyChanged("Fk_ProjectsTable");
					this.OnFk_ProjectsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrl", DbType="NVarChar(MAX)")]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_ApplictionTypes", Storage="_ApplictionTypes", ThisKey="UserGroupID", OtherKey="FK_UserGroupTable")]
		public EntitySet<ApplictionTypes> ApplictionTypes
		{
			get
			{
				return this._ApplictionTypes;
			}
			set
			{
				this._ApplictionTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_UsersAndUserGroupMappingTable", Storage="_UsersAndUserGroupMappingTable", ThisKey="UserGroupID", OtherKey="FK_GroupTable")]
		public EntitySet<UsersAndUserGroupMappingTable> UsersAndUserGroupMappingTable
		{
			get
			{
				return this._UsersAndUserGroupMappingTable;
			}
			set
			{
				this._UsersAndUserGroupMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_UserGroupTable", Storage="_Projects", ThisKey="Fk_ProjectsTable", OtherKey="Id", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.UserGroupTable.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.UserGroupTable.Add(this);
						this._Fk_ProjectsTable = value.Id;
					}
					else
					{
						this._Fk_ProjectsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplictionTypes(ApplictionTypes entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = this;
		}
		
		private void detach_ApplictionTypes(ApplictionTypes entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = null;
		}
		
		private void attach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = this;
		}
		
		private void detach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UserGroupTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersAndUserGroupMappingTable")]
	public partial class UsersAndUserGroupMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserAndGroupID;
		
		private System.Nullable<int> _FK_UserTable;
		
		private System.Nullable<int> _FK_GroupTable;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<bool> _Confirmed;
		
		private EntityRef<UserGroupTable> _UserGroupTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAndGroupIDChanging(int value);
    partial void OnUserAndGroupIDChanged();
    partial void OnFK_UserTableChanging(System.Nullable<int> value);
    partial void OnFK_UserTableChanged();
    partial void OnFK_GroupTableChanging(System.Nullable<int> value);
    partial void OnFK_GroupTableChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    #endregion
		
		public UsersAndUserGroupMappingTable()
		{
			this._UserGroupTable = default(EntityRef<UserGroupTable>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAndGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserAndGroupID
		{
			get
			{
				return this._UserAndGroupID;
			}
			set
			{
				if ((this._UserAndGroupID != value))
				{
					this.OnUserAndGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserAndGroupID = value;
					this.SendPropertyChanged("UserAndGroupID");
					this.OnUserAndGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserTable", DbType="Int")]
		public System.Nullable<int> FK_UserTable
		{
			get
			{
				return this._FK_UserTable;
			}
			set
			{
				if ((this._FK_UserTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UserTable = value;
					this.SendPropertyChanged("FK_UserTable");
					this.OnFK_UserTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_GroupTable", DbType="Int")]
		public System.Nullable<int> FK_GroupTable
		{
			get
			{
				return this._FK_GroupTable;
			}
			set
			{
				if ((this._FK_GroupTable != value))
				{
					if (this._UserGroupTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_GroupTableChanging(value);
					this.SendPropertyChanging();
					this._FK_GroupTable = value;
					this.SendPropertyChanged("FK_GroupTable");
					this.OnFK_GroupTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroupTable_UsersAndUserGroupMappingTable", Storage="_UserGroupTable", ThisKey="FK_GroupTable", OtherKey="UserGroupID", IsForeignKey=true)]
		public UserGroupTable UserGroupTable
		{
			get
			{
				return this._UserGroupTable.Entity;
			}
			set
			{
				UserGroupTable previousValue = this._UserGroupTable.Entity;
				if (((previousValue != value) 
							|| (this._UserGroupTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroupTable.Entity = null;
						previousValue.UsersAndUserGroupMappingTable.Remove(this);
					}
					this._UserGroupTable.Entity = value;
					if ((value != null))
					{
						value.UsersAndUserGroupMappingTable.Add(this);
						this._FK_GroupTable = value.UserGroupID;
					}
					else
					{
						this._FK_GroupTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroupTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UsersAndUserGroupMappingTable", Storage="_UsersTable", ThisKey="FK_UserTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.UsersAndUserGroupMappingTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.UsersAndUserGroupMappingTable.Add(this);
						this._FK_UserTable = value.UsersTableID;
					}
					else
					{
						this._FK_UserTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersTable")]
	public partial class UsersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsersTableID;
		
		private bool _Active;
		
		private string _Login;
		
		private string _Password;
		
		private string _Email;
		
		private System.Nullable<int> _FK_FirstLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_SecondLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_ThirdLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FourthLevelSubdivisionTable;
		
		private System.Nullable<int> _FK_FifthLevelSubdivisionTable;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.Nullable<int> _FK_ZeroLevelSubdivisionTable;
		
		private string _PassCode;
		
		private System.Nullable<bool> _Confirmed;
		
		private string _Position;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronimyc;
		
		private string _AcademicDegree;
		
		private string _AcademicRank;
		
		private System.Nullable<bool> _Data_Status;
		
		private System.Nullable<int> _Kurs;
		
		private System.Nullable<int> _YearEnter;
		
		private System.Nullable<int> _FK_Specialization;
		
		private System.Nullable<int> _FK_StudentGroup;
		
		private EntitySet<BasicParametrsAndUsersMapping> _BasicParametrsAndUsersMapping;
		
		private EntitySet<CalculatedParametrsAndUsersMapping> _CalculatedParametrsAndUsersMapping;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<CollectedCalculatedParametrs> _CollectedCalculatedParametrs;
		
		private EntitySet<CollectedIndocators> _CollectedIndocators;
		
		private EntitySet<ConfirmationHistory> _ConfirmationHistory;
		
		private EntitySet<ConnectGroup_And_Users> _ConnectGroup_And_Users;
		
		private EntitySet<IndicatorsAndUsersMapping> _IndicatorsAndUsersMapping;
		
		private EntitySet<MultiUser> _MultiUser;
		
		private EntitySet<MultiUser> _MultiUser1;
		
		private EntitySet<Rank_Autors> _Rank_Autors;
		
		private EntitySet<TypeOfWritingFIO> _TypeOfWritingFIO;
		
		private EntitySet<UserDataChangeHistory> _UserDataChangeHistory;
		
		private EntitySet<UsersAndUserGroupMappingTable> _UsersAndUserGroupMappingTable;
		
		private EntitySet<zCompetitionsTable> _zCompetitionsTable;
		
		private EntitySet<zExpertAndExpertGroupMappingTable> _zExpertAndExpertGroupMappingTable;
		
		private EntitySet<zExpertPointsValue> _zExpertPointsValue;
		
		private EntitySet<zExpertsAndApplicationMappingTable> _zExpertsAndApplicationMappingTable;
		
		private EntitySet<zPartnersTable> _zPartnersTable;
		
		private EntitySet<zTaskPRManualTable> _zTaskPRManualTable;
		
		private EntitySet<Aplication> _Aplications;
		
		private EntityRef<FifthLevelSubdivisionTable> _FifthLevelSubdivisionTable;
		
		private EntityRef<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntityRef<FourthLevelSubdivisionTable> _FourthLevelSubdivisionTable;
		
		private EntityRef<SecondLevelSubdivisionTable> _SecondLevelSubdivisionTable;
		
		private EntityRef<SpecializationTable> _SpecializationTable;
		
		private EntityRef<StudentGroupsTable> _StudentGroupsTable;
		
		private EntityRef<ThirdLevelSubdivisionTable> _ThirdLevelSubdivisionTable;
		
		private EntityRef<ZeroLevelSubdivisionTable> _ZeroLevelSubdivisionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsersTableIDChanging(int value);
    partial void OnUsersTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFK_FirstLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FirstLevelSubdivisionTableChanged();
    partial void OnFK_SecondLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_SecondLevelSubdivisionTableChanged();
    partial void OnFK_ThirdLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ThirdLevelSubdivisionTableChanged();
    partial void OnFK_FourthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FourthLevelSubdivisionTableChanged();
    partial void OnFK_FifthLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_FifthLevelSubdivisionTableChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnFK_ZeroLevelSubdivisionTableChanging(System.Nullable<int> value);
    partial void OnFK_ZeroLevelSubdivisionTableChanged();
    partial void OnPassCodeChanging(string value);
    partial void OnPassCodeChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronimycChanging(string value);
    partial void OnPatronimycChanged();
    partial void OnAcademicDegreeChanging(string value);
    partial void OnAcademicDegreeChanged();
    partial void OnAcademicRankChanging(string value);
    partial void OnAcademicRankChanged();
    partial void OnData_StatusChanging(System.Nullable<bool> value);
    partial void OnData_StatusChanged();
    partial void OnKursChanging(System.Nullable<int> value);
    partial void OnKursChanged();
    partial void OnYearEnterChanging(System.Nullable<int> value);
    partial void OnYearEnterChanged();
    partial void OnFK_SpecializationChanging(System.Nullable<int> value);
    partial void OnFK_SpecializationChanged();
    partial void OnFK_StudentGroupChanging(System.Nullable<int> value);
    partial void OnFK_StudentGroupChanged();
    #endregion
		
		public UsersTable()
		{
			this._BasicParametrsAndUsersMapping = new EntitySet<BasicParametrsAndUsersMapping>(new Action<BasicParametrsAndUsersMapping>(this.attach_BasicParametrsAndUsersMapping), new Action<BasicParametrsAndUsersMapping>(this.detach_BasicParametrsAndUsersMapping));
			this._CalculatedParametrsAndUsersMapping = new EntitySet<CalculatedParametrsAndUsersMapping>(new Action<CalculatedParametrsAndUsersMapping>(this.attach_CalculatedParametrsAndUsersMapping), new Action<CalculatedParametrsAndUsersMapping>(this.detach_CalculatedParametrsAndUsersMapping));
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._CollectedCalculatedParametrs = new EntitySet<CollectedCalculatedParametrs>(new Action<CollectedCalculatedParametrs>(this.attach_CollectedCalculatedParametrs), new Action<CollectedCalculatedParametrs>(this.detach_CollectedCalculatedParametrs));
			this._CollectedIndocators = new EntitySet<CollectedIndocators>(new Action<CollectedIndocators>(this.attach_CollectedIndocators), new Action<CollectedIndocators>(this.detach_CollectedIndocators));
			this._ConfirmationHistory = new EntitySet<ConfirmationHistory>(new Action<ConfirmationHistory>(this.attach_ConfirmationHistory), new Action<ConfirmationHistory>(this.detach_ConfirmationHistory));
			this._ConnectGroup_And_Users = new EntitySet<ConnectGroup_And_Users>(new Action<ConnectGroup_And_Users>(this.attach_ConnectGroup_And_Users), new Action<ConnectGroup_And_Users>(this.detach_ConnectGroup_And_Users));
			this._IndicatorsAndUsersMapping = new EntitySet<IndicatorsAndUsersMapping>(new Action<IndicatorsAndUsersMapping>(this.attach_IndicatorsAndUsersMapping), new Action<IndicatorsAndUsersMapping>(this.detach_IndicatorsAndUsersMapping));
			this._MultiUser = new EntitySet<MultiUser>(new Action<MultiUser>(this.attach_MultiUser), new Action<MultiUser>(this.detach_MultiUser));
			this._MultiUser1 = new EntitySet<MultiUser>(new Action<MultiUser>(this.attach_MultiUser1), new Action<MultiUser>(this.detach_MultiUser1));
			this._Rank_Autors = new EntitySet<Rank_Autors>(new Action<Rank_Autors>(this.attach_Rank_Autors), new Action<Rank_Autors>(this.detach_Rank_Autors));
			this._TypeOfWritingFIO = new EntitySet<TypeOfWritingFIO>(new Action<TypeOfWritingFIO>(this.attach_TypeOfWritingFIO), new Action<TypeOfWritingFIO>(this.detach_TypeOfWritingFIO));
			this._UserDataChangeHistory = new EntitySet<UserDataChangeHistory>(new Action<UserDataChangeHistory>(this.attach_UserDataChangeHistory), new Action<UserDataChangeHistory>(this.detach_UserDataChangeHistory));
			this._UsersAndUserGroupMappingTable = new EntitySet<UsersAndUserGroupMappingTable>(new Action<UsersAndUserGroupMappingTable>(this.attach_UsersAndUserGroupMappingTable), new Action<UsersAndUserGroupMappingTable>(this.detach_UsersAndUserGroupMappingTable));
			this._zCompetitionsTable = new EntitySet<zCompetitionsTable>(new Action<zCompetitionsTable>(this.attach_zCompetitionsTable), new Action<zCompetitionsTable>(this.detach_zCompetitionsTable));
			this._zExpertAndExpertGroupMappingTable = new EntitySet<zExpertAndExpertGroupMappingTable>(new Action<zExpertAndExpertGroupMappingTable>(this.attach_zExpertAndExpertGroupMappingTable), new Action<zExpertAndExpertGroupMappingTable>(this.detach_zExpertAndExpertGroupMappingTable));
			this._zExpertPointsValue = new EntitySet<zExpertPointsValue>(new Action<zExpertPointsValue>(this.attach_zExpertPointsValue), new Action<zExpertPointsValue>(this.detach_zExpertPointsValue));
			this._zExpertsAndApplicationMappingTable = new EntitySet<zExpertsAndApplicationMappingTable>(new Action<zExpertsAndApplicationMappingTable>(this.attach_zExpertsAndApplicationMappingTable), new Action<zExpertsAndApplicationMappingTable>(this.detach_zExpertsAndApplicationMappingTable));
			this._zPartnersTable = new EntitySet<zPartnersTable>(new Action<zPartnersTable>(this.attach_zPartnersTable), new Action<zPartnersTable>(this.detach_zPartnersTable));
			this._zTaskPRManualTable = new EntitySet<zTaskPRManualTable>(new Action<zTaskPRManualTable>(this.attach_zTaskPRManualTable), new Action<zTaskPRManualTable>(this.detach_zTaskPRManualTable));
			this._Aplications = new EntitySet<Aplication>(new Action<Aplication>(this.attach_Aplications), new Action<Aplication>(this.detach_Aplications));
			this._FifthLevelSubdivisionTable = default(EntityRef<FifthLevelSubdivisionTable>);
			this._FirstLevelSubdivisionTable = default(EntityRef<FirstLevelSubdivisionTable>);
			this._FourthLevelSubdivisionTable = default(EntityRef<FourthLevelSubdivisionTable>);
			this._SecondLevelSubdivisionTable = default(EntityRef<SecondLevelSubdivisionTable>);
			this._SpecializationTable = default(EntityRef<SpecializationTable>);
			this._StudentGroupsTable = default(EntityRef<StudentGroupsTable>);
			this._ThirdLevelSubdivisionTable = default(EntityRef<ThirdLevelSubdivisionTable>);
			this._ZeroLevelSubdivisionTable = default(EntityRef<ZeroLevelSubdivisionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsersTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UsersTableID
		{
			get
			{
				return this._UsersTableID;
			}
			set
			{
				if ((this._UsersTableID != value))
				{
					this.OnUsersTableIDChanging(value);
					this.SendPropertyChanging();
					this._UsersTableID = value;
					this.SendPropertyChanged("UsersTableID");
					this.OnUsersTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FirstLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FirstLevelSubdivisionTable
		{
			get
			{
				return this._FK_FirstLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FirstLevelSubdivisionTable != value))
				{
					if (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FirstLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FirstLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FirstLevelSubdivisionTable");
					this.OnFK_FirstLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SecondLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_SecondLevelSubdivisionTable
		{
			get
			{
				return this._FK_SecondLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_SecondLevelSubdivisionTable != value))
				{
					if (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SecondLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SecondLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_SecondLevelSubdivisionTable");
					this.OnFK_SecondLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ThirdLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ThirdLevelSubdivisionTable
		{
			get
			{
				return this._FK_ThirdLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ThirdLevelSubdivisionTable != value))
				{
					if (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ThirdLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ThirdLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ThirdLevelSubdivisionTable");
					this.OnFK_ThirdLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FourthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FourthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FourthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FourthLevelSubdivisionTable != value))
				{
					if (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FourthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FourthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FourthLevelSubdivisionTable");
					this.OnFK_FourthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_FifthLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_FifthLevelSubdivisionTable
		{
			get
			{
				return this._FK_FifthLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_FifthLevelSubdivisionTable != value))
				{
					if (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FifthLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_FifthLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_FifthLevelSubdivisionTable");
					this.OnFK_FifthLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ZeroLevelSubdivisionTable", DbType="Int")]
		public System.Nullable<int> FK_ZeroLevelSubdivisionTable
		{
			get
			{
				return this._FK_ZeroLevelSubdivisionTable;
			}
			set
			{
				if ((this._FK_ZeroLevelSubdivisionTable != value))
				{
					if (this._ZeroLevelSubdivisionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ZeroLevelSubdivisionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ZeroLevelSubdivisionTable = value;
					this.SendPropertyChanged("FK_ZeroLevelSubdivisionTable");
					this.OnFK_ZeroLevelSubdivisionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassCode", DbType="VarChar(50)")]
		public string PassCode
		{
			get
			{
				return this._PassCode;
			}
			set
			{
				if ((this._PassCode != value))
				{
					this.OnPassCodeChanging(value);
					this.SendPropertyChanging();
					this._PassCode = value;
					this.SendPropertyChanged("PassCode");
					this.OnPassCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(500)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronimyc", DbType="NVarChar(50)")]
		public string Patronimyc
		{
			get
			{
				return this._Patronimyc;
			}
			set
			{
				if ((this._Patronimyc != value))
				{
					this.OnPatronimycChanging(value);
					this.SendPropertyChanging();
					this._Patronimyc = value;
					this.SendPropertyChanged("Patronimyc");
					this.OnPatronimycChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicDegree", DbType="NVarChar(50)")]
		public string AcademicDegree
		{
			get
			{
				return this._AcademicDegree;
			}
			set
			{
				if ((this._AcademicDegree != value))
				{
					this.OnAcademicDegreeChanging(value);
					this.SendPropertyChanging();
					this._AcademicDegree = value;
					this.SendPropertyChanged("AcademicDegree");
					this.OnAcademicDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicRank", DbType="NVarChar(50)")]
		public string AcademicRank
		{
			get
			{
				return this._AcademicRank;
			}
			set
			{
				if ((this._AcademicRank != value))
				{
					this.OnAcademicRankChanging(value);
					this.SendPropertyChanging();
					this._AcademicRank = value;
					this.SendPropertyChanged("AcademicRank");
					this.OnAcademicRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_Status", DbType="Bit")]
		public System.Nullable<bool> Data_Status
		{
			get
			{
				return this._Data_Status;
			}
			set
			{
				if ((this._Data_Status != value))
				{
					this.OnData_StatusChanging(value);
					this.SendPropertyChanging();
					this._Data_Status = value;
					this.SendPropertyChanged("Data_Status");
					this.OnData_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kurs", DbType="Int")]
		public System.Nullable<int> Kurs
		{
			get
			{
				return this._Kurs;
			}
			set
			{
				if ((this._Kurs != value))
				{
					this.OnKursChanging(value);
					this.SendPropertyChanging();
					this._Kurs = value;
					this.SendPropertyChanged("Kurs");
					this.OnKursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearEnter", DbType="Int")]
		public System.Nullable<int> YearEnter
		{
			get
			{
				return this._YearEnter;
			}
			set
			{
				if ((this._YearEnter != value))
				{
					this.OnYearEnterChanging(value);
					this.SendPropertyChanging();
					this._YearEnter = value;
					this.SendPropertyChanged("YearEnter");
					this.OnYearEnterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Specialization", DbType="Int")]
		public System.Nullable<int> FK_Specialization
		{
			get
			{
				return this._FK_Specialization;
			}
			set
			{
				if ((this._FK_Specialization != value))
				{
					if (this._SpecializationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SpecializationChanging(value);
					this.SendPropertyChanging();
					this._FK_Specialization = value;
					this.SendPropertyChanged("FK_Specialization");
					this.OnFK_SpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_StudentGroup", DbType="Int")]
		public System.Nullable<int> FK_StudentGroup
		{
			get
			{
				return this._FK_StudentGroup;
			}
			set
			{
				if ((this._FK_StudentGroup != value))
				{
					if (this._StudentGroupsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_StudentGroupChanging(value);
					this.SendPropertyChanging();
					this._FK_StudentGroup = value;
					this.SendPropertyChanged("FK_StudentGroup");
					this.OnFK_StudentGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_BasicParametrsAndUsersMapping", Storage="_BasicParametrsAndUsersMapping", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<BasicParametrsAndUsersMapping> BasicParametrsAndUsersMapping
		{
			get
			{
				return this._BasicParametrsAndUsersMapping;
			}
			set
			{
				this._BasicParametrsAndUsersMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CalculatedParametrsAndUsersMapping", Storage="_CalculatedParametrsAndUsersMapping", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<CalculatedParametrsAndUsersMapping> CalculatedParametrsAndUsersMapping
		{
			get
			{
				return this._CalculatedParametrsAndUsersMapping;
			}
			set
			{
				this._CalculatedParametrsAndUsersMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedCalculatedParametrs", Storage="_CollectedCalculatedParametrs", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<CollectedCalculatedParametrs> CollectedCalculatedParametrs
		{
			get
			{
				return this._CollectedCalculatedParametrs;
			}
			set
			{
				this._CollectedCalculatedParametrs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_CollectedIndocators", Storage="_CollectedIndocators", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<CollectedIndocators> CollectedIndocators
		{
			get
			{
				return this._CollectedIndocators;
			}
			set
			{
				this._CollectedIndocators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConfirmationHistory", Storage="_ConfirmationHistory", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<ConfirmationHistory> ConfirmationHistory
		{
			get
			{
				return this._ConfirmationHistory;
			}
			set
			{
				this._ConfirmationHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_ConnectGroup_And_Users", Storage="_ConnectGroup_And_Users", ThisKey="UsersTableID", OtherKey="FK_UserTable")]
		public EntitySet<ConnectGroup_And_Users> ConnectGroup_And_Users
		{
			get
			{
				return this._ConnectGroup_And_Users;
			}
			set
			{
				this._ConnectGroup_And_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_IndicatorsAndUsersMapping", Storage="_IndicatorsAndUsersMapping", ThisKey="UsersTableID", OtherKey="FK_UsresTable")]
		public EntitySet<IndicatorsAndUsersMapping> IndicatorsAndUsersMapping
		{
			get
			{
				return this._IndicatorsAndUsersMapping;
			}
			set
			{
				this._IndicatorsAndUsersMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_MultiUser", Storage="_MultiUser", ThisKey="UsersTableID", OtherKey="FK_UserCanAccess")]
		public EntitySet<MultiUser> MultiUser
		{
			get
			{
				return this._MultiUser;
			}
			set
			{
				this._MultiUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_MultiUser1", Storage="_MultiUser1", ThisKey="UsersTableID", OtherKey="FK_UserToAccess")]
		public EntitySet<MultiUser> MultiUser1
		{
			get
			{
				return this._MultiUser1;
			}
			set
			{
				this._MultiUser1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_Rank_Autors", Storage="_Rank_Autors", ThisKey="UsersTableID", OtherKey="FK_Users")]
		public EntitySet<Rank_Autors> Rank_Autors
		{
			get
			{
				return this._Rank_Autors;
			}
			set
			{
				this._Rank_Autors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_TypeOfWritingFIO", Storage="_TypeOfWritingFIO", ThisKey="UsersTableID", OtherKey="FK_UserTableID")]
		public EntitySet<TypeOfWritingFIO> TypeOfWritingFIO
		{
			get
			{
				return this._TypeOfWritingFIO;
			}
			set
			{
				this._TypeOfWritingFIO.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UserDataChangeHistory", Storage="_UserDataChangeHistory", ThisKey="UsersTableID", OtherKey="FK_User")]
		public EntitySet<UserDataChangeHistory> UserDataChangeHistory
		{
			get
			{
				return this._UserDataChangeHistory;
			}
			set
			{
				this._UserDataChangeHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_UsersAndUserGroupMappingTable", Storage="_UsersAndUserGroupMappingTable", ThisKey="UsersTableID", OtherKey="FK_UserTable")]
		public EntitySet<UsersAndUserGroupMappingTable> UsersAndUserGroupMappingTable
		{
			get
			{
				return this._UsersAndUserGroupMappingTable;
			}
			set
			{
				this._UsersAndUserGroupMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zCompetitionsTable", Storage="_zCompetitionsTable", ThisKey="UsersTableID", OtherKey="FK_Curator")]
		public EntitySet<zCompetitionsTable> zCompetitionsTable
		{
			get
			{
				return this._zCompetitionsTable;
			}
			set
			{
				this._zCompetitionsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zExpertAndExpertGroupMappingTable", Storage="_zExpertAndExpertGroupMappingTable", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<zExpertAndExpertGroupMappingTable> zExpertAndExpertGroupMappingTable
		{
			get
			{
				return this._zExpertAndExpertGroupMappingTable;
			}
			set
			{
				this._zExpertAndExpertGroupMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zExpertPointsValue", Storage="_zExpertPointsValue", ThisKey="UsersTableID", OtherKey="FK_ExpertsTable")]
		public EntitySet<zExpertPointsValue> zExpertPointsValue
		{
			get
			{
				return this._zExpertPointsValue;
			}
			set
			{
				this._zExpertPointsValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zExpertsAndApplicationMappingTable", Storage="_zExpertsAndApplicationMappingTable", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<zExpertsAndApplicationMappingTable> zExpertsAndApplicationMappingTable
		{
			get
			{
				return this._zExpertsAndApplicationMappingTable;
			}
			set
			{
				this._zExpertsAndApplicationMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zPartnersTable", Storage="_zPartnersTable", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<zPartnersTable> zPartnersTable
		{
			get
			{
				return this._zPartnersTable;
			}
			set
			{
				this._zPartnersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zTaskPRManualTable", Storage="_zTaskPRManualTable", ThisKey="UsersTableID", OtherKey="FK_UsersTable")]
		public EntitySet<zTaskPRManualTable> zTaskPRManualTable
		{
			get
			{
				return this._zTaskPRManualTable;
			}
			set
			{
				this._zTaskPRManualTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_Aplication", Storage="_Aplications", ThisKey="UsersTableID", OtherKey="FK_UserAdd")]
		public EntitySet<Aplication> Aplications
		{
			get
			{
				return this._Aplications;
			}
			set
			{
				this._Aplications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FifthLevelSubdivisionTable_UsersTable", Storage="_FifthLevelSubdivisionTable", ThisKey="FK_FifthLevelSubdivisionTable", OtherKey="FifthLevelSubdivisionTableID", IsForeignKey=true)]
		public FifthLevelSubdivisionTable FifthLevelSubdivisionTable
		{
			get
			{
				return this._FifthLevelSubdivisionTable.Entity;
			}
			set
			{
				FifthLevelSubdivisionTable previousValue = this._FifthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FifthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FifthLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._FifthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_FifthLevelSubdivisionTable = value.FifthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FifthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FifthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FirstLevelSubdivisionTable_UsersTable", Storage="_FirstLevelSubdivisionTable", ThisKey="FK_FirstLevelSubdivisionTable", OtherKey="FirstLevelSubdivisionTableID", IsForeignKey=true)]
		public FirstLevelSubdivisionTable FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable.Entity;
			}
			set
			{
				FirstLevelSubdivisionTable previousValue = this._FirstLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FirstLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FirstLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._FirstLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_FirstLevelSubdivisionTable = value.FirstLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FirstLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FirstLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FourthLevelSubdivisionTable_UsersTable", Storage="_FourthLevelSubdivisionTable", ThisKey="FK_FourthLevelSubdivisionTable", OtherKey="FourthLevelSubdivisionTableID", IsForeignKey=true)]
		public FourthLevelSubdivisionTable FourthLevelSubdivisionTable
		{
			get
			{
				return this._FourthLevelSubdivisionTable.Entity;
			}
			set
			{
				FourthLevelSubdivisionTable previousValue = this._FourthLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._FourthLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FourthLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._FourthLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_FourthLevelSubdivisionTable = value.FourthLevelSubdivisionTableID;
					}
					else
					{
						this._FK_FourthLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("FourthLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecondLevelSubdivisionTable_UsersTable", Storage="_SecondLevelSubdivisionTable", ThisKey="FK_SecondLevelSubdivisionTable", OtherKey="SecondLevelSubdivisionTableID", IsForeignKey=true)]
		public SecondLevelSubdivisionTable SecondLevelSubdivisionTable
		{
			get
			{
				return this._SecondLevelSubdivisionTable.Entity;
			}
			set
			{
				SecondLevelSubdivisionTable previousValue = this._SecondLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._SecondLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecondLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._SecondLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_SecondLevelSubdivisionTable = value.SecondLevelSubdivisionTableID;
					}
					else
					{
						this._FK_SecondLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecondLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecializationTable_UsersTable", Storage="_SpecializationTable", ThisKey="FK_Specialization", OtherKey="SpecializationTableID", IsForeignKey=true)]
		public SpecializationTable SpecializationTable
		{
			get
			{
				return this._SpecializationTable.Entity;
			}
			set
			{
				SpecializationTable previousValue = this._SpecializationTable.Entity;
				if (((previousValue != value) 
							|| (this._SpecializationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecializationTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._SpecializationTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_Specialization = value.SpecializationTableID;
					}
					else
					{
						this._FK_Specialization = default(Nullable<int>);
					}
					this.SendPropertyChanged("SpecializationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupsTable_UsersTable", Storage="_StudentGroupsTable", ThisKey="FK_StudentGroup", OtherKey="ID", IsForeignKey=true)]
		public StudentGroupsTable StudentGroupsTable
		{
			get
			{
				return this._StudentGroupsTable.Entity;
			}
			set
			{
				StudentGroupsTable previousValue = this._StudentGroupsTable.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroupsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroupsTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._StudentGroupsTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_StudentGroup = value.ID;
					}
					else
					{
						this._FK_StudentGroup = default(Nullable<int>);
					}
					this.SendPropertyChanged("StudentGroupsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThirdLevelSubdivisionTable_UsersTable", Storage="_ThirdLevelSubdivisionTable", ThisKey="FK_ThirdLevelSubdivisionTable", OtherKey="ThirdLevelSubdivisionTableID", IsForeignKey=true)]
		public ThirdLevelSubdivisionTable ThirdLevelSubdivisionTable
		{
			get
			{
				return this._ThirdLevelSubdivisionTable.Entity;
			}
			set
			{
				ThirdLevelSubdivisionTable previousValue = this._ThirdLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ThirdLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThirdLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._ThirdLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_ThirdLevelSubdivisionTable = value.ThirdLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ThirdLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThirdLevelSubdivisionTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZeroLevelSubdivisionTable_UsersTable", Storage="_ZeroLevelSubdivisionTable", ThisKey="FK_ZeroLevelSubdivisionTable", OtherKey="ZeroLevelSubdivisionTableID", IsForeignKey=true)]
		public ZeroLevelSubdivisionTable ZeroLevelSubdivisionTable
		{
			get
			{
				return this._ZeroLevelSubdivisionTable.Entity;
			}
			set
			{
				ZeroLevelSubdivisionTable previousValue = this._ZeroLevelSubdivisionTable.Entity;
				if (((previousValue != value) 
							|| (this._ZeroLevelSubdivisionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZeroLevelSubdivisionTable.Entity = null;
						previousValue.UsersTable.Remove(this);
					}
					this._ZeroLevelSubdivisionTable.Entity = value;
					if ((value != null))
					{
						value.UsersTable.Add(this);
						this._FK_ZeroLevelSubdivisionTable = value.ZeroLevelSubdivisionTableID;
					}
					else
					{
						this._FK_ZeroLevelSubdivisionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("ZeroLevelSubdivisionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BasicParametrsAndUsersMapping(BasicParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_BasicParametrsAndUsersMapping(BasicParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_CalculatedParametrsAndUsersMapping(CalculatedParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_CalculatedParametrsAndUsersMapping(CalculatedParametrsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_CollectedCalculatedParametrs(CollectedCalculatedParametrs entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_CollectedCalculatedParametrs(CollectedCalculatedParametrs entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_CollectedIndocators(CollectedIndocators entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_CollectedIndocators(CollectedIndocators entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_ConfirmationHistory(ConfirmationHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_ConnectGroup_And_Users(ConnectGroup_And_Users entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_IndicatorsAndUsersMapping(IndicatorsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_IndicatorsAndUsersMapping(IndicatorsAndUsersMapping entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_MultiUser(MultiUser entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_MultiUser(MultiUser entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_MultiUser1(MultiUser entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable1 = this;
		}
		
		private void detach_MultiUser1(MultiUser entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable1 = null;
		}
		
		private void attach_Rank_Autors(Rank_Autors entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_Rank_Autors(Rank_Autors entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_TypeOfWritingFIO(TypeOfWritingFIO entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_TypeOfWritingFIO(TypeOfWritingFIO entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_UserDataChangeHistory(UserDataChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_UserDataChangeHistory(UserDataChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_UsersAndUserGroupMappingTable(UsersAndUserGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_zCompetitionsTable(zCompetitionsTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_zCompetitionsTable(zCompetitionsTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_zExpertAndExpertGroupMappingTable(zExpertAndExpertGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_zExpertAndExpertGroupMappingTable(zExpertAndExpertGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_zExpertPointsValue(zExpertPointsValue entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_zExpertPointsValue(zExpertPointsValue entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_zExpertsAndApplicationMappingTable(zExpertsAndApplicationMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_zExpertsAndApplicationMappingTable(zExpertsAndApplicationMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_zPartnersTable(zPartnersTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_zPartnersTable(zPartnersTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_zTaskPRManualTable(zTaskPRManualTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_zTaskPRManualTable(zTaskPRManualTable entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
		
		private void attach_Aplications(Aplication entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = this;
		}
		
		private void detach_Aplications(Aplication entity)
		{
			this.SendPropertyChanging();
			entity.UsersTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zActionPRManualTable")]
	public partial class zActionPRManualTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ActionPR;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<zActionsCompetitionsMappingTable> _zActionsCompetitionsMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActionPRChanging(string value);
    partial void OnActionPRChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public zActionPRManualTable()
		{
			this._zActionsCompetitionsMappingTable = new EntitySet<zActionsCompetitionsMappingTable>(new Action<zActionsCompetitionsMappingTable>(this.attach_zActionsCompetitionsMappingTable), new Action<zActionsCompetitionsMappingTable>(this.detach_zActionsCompetitionsMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionPR", DbType="NVarChar(MAX)")]
		public string ActionPR
		{
			get
			{
				return this._ActionPR;
			}
			set
			{
				if ((this._ActionPR != value))
				{
					this.OnActionPRChanging(value);
					this.SendPropertyChanging();
					this._ActionPR = value;
					this.SendPropertyChanged("ActionPR");
					this.OnActionPRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zActionPRManualTable_zActionsCompetitionsMappingTable", Storage="_zActionsCompetitionsMappingTable", ThisKey="ID", OtherKey="FK_ActionPR")]
		public EntitySet<zActionsCompetitionsMappingTable> zActionsCompetitionsMappingTable
		{
			get
			{
				return this._zActionsCompetitionsMappingTable;
			}
			set
			{
				this._zActionsCompetitionsMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zActionsCompetitionsMappingTable(zActionsCompetitionsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zActionPRManualTable = this;
		}
		
		private void detach_zActionsCompetitionsMappingTable(zActionsCompetitionsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zActionPRManualTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zActionsCompetitionsMappingTable")]
	public partial class zActionsCompetitionsMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FK_ActionPR;
		
		private System.Nullable<int> _FK_Competiton;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<zActionPRManualTable> _zActionPRManualTable;
		
		private EntityRef<zCompetitionsTable> _zCompetitionsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFK_ActionPRChanging(System.Nullable<int> value);
    partial void OnFK_ActionPRChanged();
    partial void OnFK_CompetitonChanging(System.Nullable<int> value);
    partial void OnFK_CompetitonChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public zActionsCompetitionsMappingTable()
		{
			this._zActionPRManualTable = default(EntityRef<zActionPRManualTable>);
			this._zCompetitionsTable = default(EntityRef<zCompetitionsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ActionPR", DbType="Int")]
		public System.Nullable<int> FK_ActionPR
		{
			get
			{
				return this._FK_ActionPR;
			}
			set
			{
				if ((this._FK_ActionPR != value))
				{
					if (this._zActionPRManualTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ActionPRChanging(value);
					this.SendPropertyChanging();
					this._FK_ActionPR = value;
					this.SendPropertyChanged("FK_ActionPR");
					this.OnFK_ActionPRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Competiton", DbType="Int")]
		public System.Nullable<int> FK_Competiton
		{
			get
			{
				return this._FK_Competiton;
			}
			set
			{
				if ((this._FK_Competiton != value))
				{
					if (this._zCompetitionsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitonChanging(value);
					this.SendPropertyChanging();
					this._FK_Competiton = value;
					this.SendPropertyChanged("FK_Competiton");
					this.OnFK_CompetitonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zActionPRManualTable_zActionsCompetitionsMappingTable", Storage="_zActionPRManualTable", ThisKey="FK_ActionPR", OtherKey="ID", IsForeignKey=true)]
		public zActionPRManualTable zActionPRManualTable
		{
			get
			{
				return this._zActionPRManualTable.Entity;
			}
			set
			{
				zActionPRManualTable previousValue = this._zActionPRManualTable.Entity;
				if (((previousValue != value) 
							|| (this._zActionPRManualTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zActionPRManualTable.Entity = null;
						previousValue.zActionsCompetitionsMappingTable.Remove(this);
					}
					this._zActionPRManualTable.Entity = value;
					if ((value != null))
					{
						value.zActionsCompetitionsMappingTable.Add(this);
						this._FK_ActionPR = value.ID;
					}
					else
					{
						this._FK_ActionPR = default(Nullable<int>);
					}
					this.SendPropertyChanged("zActionPRManualTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zActionsCompetitionsMappingTable", Storage="_zCompetitionsTable", ThisKey="FK_Competiton", OtherKey="ID", IsForeignKey=true)]
		public zCompetitionsTable zCompetitionsTable
		{
			get
			{
				return this._zCompetitionsTable.Entity;
			}
			set
			{
				zCompetitionsTable previousValue = this._zCompetitionsTable.Entity;
				if (((previousValue != value) 
							|| (this._zCompetitionsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCompetitionsTable.Entity = null;
						previousValue.zActionsCompetitionsMappingTable.Remove(this);
					}
					this._zCompetitionsTable.Entity = value;
					if ((value != null))
					{
						value.zActionsCompetitionsMappingTable.Add(this);
						this._FK_Competiton = value.ID;
					}
					else
					{
						this._FK_Competiton = default(Nullable<int>);
					}
					this.SendPropertyChanged("zCompetitionsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zApplicationAndPartnersMappingTable")]
	public partial class zApplicationAndPartnersMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FK_PartnersTable;
		
		private System.Nullable<int> _FK_Application;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<zApplicationTable> _zApplicationTable;
		
		private EntityRef<zPartnersTable> _zPartnersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFK_PartnersTableChanging(System.Nullable<int> value);
    partial void OnFK_PartnersTableChanged();
    partial void OnFK_ApplicationChanging(System.Nullable<int> value);
    partial void OnFK_ApplicationChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public zApplicationAndPartnersMappingTable()
		{
			this._zApplicationTable = default(EntityRef<zApplicationTable>);
			this._zPartnersTable = default(EntityRef<zPartnersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_PartnersTable", DbType="Int")]
		public System.Nullable<int> FK_PartnersTable
		{
			get
			{
				return this._FK_PartnersTable;
			}
			set
			{
				if ((this._FK_PartnersTable != value))
				{
					if (this._zPartnersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_PartnersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_PartnersTable = value;
					this.SendPropertyChanged("FK_PartnersTable");
					this.OnFK_PartnersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Application", DbType="Int")]
		public System.Nullable<int> FK_Application
		{
			get
			{
				return this._FK_Application;
			}
			set
			{
				if ((this._FK_Application != value))
				{
					if (this._zApplicationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ApplicationChanging(value);
					this.SendPropertyChanging();
					this._FK_Application = value;
					this.SendPropertyChanged("FK_Application");
					this.OnFK_ApplicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zApplicationAndPartnersMappingTable", Storage="_zApplicationTable", ThisKey="FK_Application", OtherKey="ID", IsForeignKey=true)]
		public zApplicationTable zApplicationTable
		{
			get
			{
				return this._zApplicationTable.Entity;
			}
			set
			{
				zApplicationTable previousValue = this._zApplicationTable.Entity;
				if (((previousValue != value) 
							|| (this._zApplicationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zApplicationTable.Entity = null;
						previousValue.zApplicationAndPartnersMappingTable.Remove(this);
					}
					this._zApplicationTable.Entity = value;
					if ((value != null))
					{
						value.zApplicationAndPartnersMappingTable.Add(this);
						this._FK_Application = value.ID;
					}
					else
					{
						this._FK_Application = default(Nullable<int>);
					}
					this.SendPropertyChanged("zApplicationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zPartnersTable_zApplicationAndPartnersMappingTable", Storage="_zPartnersTable", ThisKey="FK_PartnersTable", OtherKey="ID", IsForeignKey=true)]
		public zPartnersTable zPartnersTable
		{
			get
			{
				return this._zPartnersTable.Entity;
			}
			set
			{
				zPartnersTable previousValue = this._zPartnersTable.Entity;
				if (((previousValue != value) 
							|| (this._zPartnersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zPartnersTable.Entity = null;
						previousValue.zApplicationAndPartnersMappingTable.Remove(this);
					}
					this._zPartnersTable.Entity = value;
					if ((value != null))
					{
						value.zApplicationAndPartnersMappingTable.Add(this);
						this._FK_PartnersTable = value.ID;
					}
					else
					{
						this._FK_PartnersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zPartnersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zApplicationTable")]
	public partial class zApplicationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_UsersTable;
		
		private System.Nullable<int> _FK_CompetitionTable;
		
		private System.Nullable<System.DateTime> _CretaDateTime;
		
		private System.Nullable<bool> _Sended;
		
		private System.Nullable<System.DateTime> _SendedDataTime;
		
		private System.Nullable<bool> _Accept;
		
		private System.Nullable<System.DateTime> _StartProjectDate;
		
		private System.Nullable<System.DateTime> _EndProjectDate;
		
		private EntitySet<zApplicationAndPartnersMappingTable> _zApplicationAndPartnersMappingTable;
		
		private EntitySet<zCollectedRowsTable> _zCollectedRowsTable;
		
		private EntitySet<zDocumentsTable> _zDocumentsTable;
		
		private EntitySet<zExpertPointsValue> _zExpertPointsValue;
		
		private EntitySet<zExpertsAndApplicationMappingTable> _zExpertsAndApplicationMappingTable;
		
		private EntityRef<zCompetitionsTable> _zCompetitionsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_UsersTableChanging(int value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_CompetitionTableChanging(System.Nullable<int> value);
    partial void OnFK_CompetitionTableChanged();
    partial void OnCretaDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCretaDateTimeChanged();
    partial void OnSendedChanging(System.Nullable<bool> value);
    partial void OnSendedChanged();
    partial void OnSendedDataTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSendedDataTimeChanged();
    partial void OnAcceptChanging(System.Nullable<bool> value);
    partial void OnAcceptChanged();
    partial void OnStartProjectDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartProjectDateChanged();
    partial void OnEndProjectDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndProjectDateChanged();
    #endregion
		
		public zApplicationTable()
		{
			this._zApplicationAndPartnersMappingTable = new EntitySet<zApplicationAndPartnersMappingTable>(new Action<zApplicationAndPartnersMappingTable>(this.attach_zApplicationAndPartnersMappingTable), new Action<zApplicationAndPartnersMappingTable>(this.detach_zApplicationAndPartnersMappingTable));
			this._zCollectedRowsTable = new EntitySet<zCollectedRowsTable>(new Action<zCollectedRowsTable>(this.attach_zCollectedRowsTable), new Action<zCollectedRowsTable>(this.detach_zCollectedRowsTable));
			this._zDocumentsTable = new EntitySet<zDocumentsTable>(new Action<zDocumentsTable>(this.attach_zDocumentsTable), new Action<zDocumentsTable>(this.detach_zDocumentsTable));
			this._zExpertPointsValue = new EntitySet<zExpertPointsValue>(new Action<zExpertPointsValue>(this.attach_zExpertPointsValue), new Action<zExpertPointsValue>(this.detach_zExpertPointsValue));
			this._zExpertsAndApplicationMappingTable = new EntitySet<zExpertsAndApplicationMappingTable>(new Action<zExpertsAndApplicationMappingTable>(this.attach_zExpertsAndApplicationMappingTable), new Action<zExpertsAndApplicationMappingTable>(this.detach_zExpertsAndApplicationMappingTable));
			this._zCompetitionsTable = default(EntityRef<zCompetitionsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int NOT NULL")]
		public int FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CompetitionTable", DbType="Int")]
		public System.Nullable<int> FK_CompetitionTable
		{
			get
			{
				return this._FK_CompetitionTable;
			}
			set
			{
				if ((this._FK_CompetitionTable != value))
				{
					if (this._zCompetitionsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CompetitionTable = value;
					this.SendPropertyChanged("FK_CompetitionTable");
					this.OnFK_CompetitionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CretaDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CretaDateTime
		{
			get
			{
				return this._CretaDateTime;
			}
			set
			{
				if ((this._CretaDateTime != value))
				{
					this.OnCretaDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CretaDateTime = value;
					this.SendPropertyChanged("CretaDateTime");
					this.OnCretaDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sended", DbType="Bit")]
		public System.Nullable<bool> Sended
		{
			get
			{
				return this._Sended;
			}
			set
			{
				if ((this._Sended != value))
				{
					this.OnSendedChanging(value);
					this.SendPropertyChanging();
					this._Sended = value;
					this.SendPropertyChanged("Sended");
					this.OnSendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendedDataTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SendedDataTime
		{
			get
			{
				return this._SendedDataTime;
			}
			set
			{
				if ((this._SendedDataTime != value))
				{
					this.OnSendedDataTimeChanging(value);
					this.SendPropertyChanging();
					this._SendedDataTime = value;
					this.SendPropertyChanged("SendedDataTime");
					this.OnSendedDataTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accept", DbType="Bit")]
		public System.Nullable<bool> Accept
		{
			get
			{
				return this._Accept;
			}
			set
			{
				if ((this._Accept != value))
				{
					this.OnAcceptChanging(value);
					this.SendPropertyChanging();
					this._Accept = value;
					this.SendPropertyChanged("Accept");
					this.OnAcceptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartProjectDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartProjectDate
		{
			get
			{
				return this._StartProjectDate;
			}
			set
			{
				if ((this._StartProjectDate != value))
				{
					this.OnStartProjectDateChanging(value);
					this.SendPropertyChanging();
					this._StartProjectDate = value;
					this.SendPropertyChanged("StartProjectDate");
					this.OnStartProjectDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndProjectDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndProjectDate
		{
			get
			{
				return this._EndProjectDate;
			}
			set
			{
				if ((this._EndProjectDate != value))
				{
					this.OnEndProjectDateChanging(value);
					this.SendPropertyChanging();
					this._EndProjectDate = value;
					this.SendPropertyChanged("EndProjectDate");
					this.OnEndProjectDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zApplicationAndPartnersMappingTable", Storage="_zApplicationAndPartnersMappingTable", ThisKey="ID", OtherKey="FK_Application")]
		public EntitySet<zApplicationAndPartnersMappingTable> zApplicationAndPartnersMappingTable
		{
			get
			{
				return this._zApplicationAndPartnersMappingTable;
			}
			set
			{
				this._zApplicationAndPartnersMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zCollectedRowsTable", Storage="_zCollectedRowsTable", ThisKey="ID", OtherKey="FK_ApplicationTable")]
		public EntitySet<zCollectedRowsTable> zCollectedRowsTable
		{
			get
			{
				return this._zCollectedRowsTable;
			}
			set
			{
				this._zCollectedRowsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zDocumentsTable", Storage="_zDocumentsTable", ThisKey="ID", OtherKey="FK_ApplicationTable")]
		public EntitySet<zDocumentsTable> zDocumentsTable
		{
			get
			{
				return this._zDocumentsTable;
			}
			set
			{
				this._zDocumentsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zExpertPointsValue", Storage="_zExpertPointsValue", ThisKey="ID", OtherKey="FK_ApplicationTable")]
		public EntitySet<zExpertPointsValue> zExpertPointsValue
		{
			get
			{
				return this._zExpertPointsValue;
			}
			set
			{
				this._zExpertPointsValue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zExpertsAndApplicationMappingTable", Storage="_zExpertsAndApplicationMappingTable", ThisKey="ID", OtherKey="FK_ApplicationsTable")]
		public EntitySet<zExpertsAndApplicationMappingTable> zExpertsAndApplicationMappingTable
		{
			get
			{
				return this._zExpertsAndApplicationMappingTable;
			}
			set
			{
				this._zExpertsAndApplicationMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zApplicationTable", Storage="_zCompetitionsTable", ThisKey="FK_CompetitionTable", OtherKey="ID", IsForeignKey=true)]
		public zCompetitionsTable zCompetitionsTable
		{
			get
			{
				return this._zCompetitionsTable.Entity;
			}
			set
			{
				zCompetitionsTable previousValue = this._zCompetitionsTable.Entity;
				if (((previousValue != value) 
							|| (this._zCompetitionsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCompetitionsTable.Entity = null;
						previousValue.zApplicationTable.Remove(this);
					}
					this._zCompetitionsTable.Entity = value;
					if ((value != null))
					{
						value.zApplicationTable.Add(this);
						this._FK_CompetitionTable = value.ID;
					}
					else
					{
						this._FK_CompetitionTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zCompetitionsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zApplicationAndPartnersMappingTable(zApplicationAndPartnersMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = this;
		}
		
		private void detach_zApplicationAndPartnersMappingTable(zApplicationAndPartnersMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = null;
		}
		
		private void attach_zCollectedRowsTable(zCollectedRowsTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = this;
		}
		
		private void detach_zCollectedRowsTable(zCollectedRowsTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = null;
		}
		
		private void attach_zDocumentsTable(zDocumentsTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = this;
		}
		
		private void detach_zDocumentsTable(zDocumentsTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = null;
		}
		
		private void attach_zExpertPointsValue(zExpertPointsValue entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = this;
		}
		
		private void detach_zExpertPointsValue(zExpertPointsValue entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = null;
		}
		
		private void attach_zExpertsAndApplicationMappingTable(zExpertsAndApplicationMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = this;
		}
		
		private void detach_zExpertsAndApplicationMappingTable(zExpertsAndApplicationMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zApplicationTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zBlockTable")]
	public partial class zBlockTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _BlockName;
		
		private bool _Active;
		
		private EntitySet<zSectionTable> _zSectionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlockNameChanging(string value);
    partial void OnBlockNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public zBlockTable()
		{
			this._zSectionTable = new EntitySet<zSectionTable>(new Action<zSectionTable>(this.attach_zSectionTable), new Action<zSectionTable>(this.detach_zSectionTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockName", DbType="NVarChar(MAX)")]
		public string BlockName
		{
			get
			{
				return this._BlockName;
			}
			set
			{
				if ((this._BlockName != value))
				{
					this.OnBlockNameChanging(value);
					this.SendPropertyChanging();
					this._BlockName = value;
					this.SendPropertyChanged("BlockName");
					this.OnBlockNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zBlockTable_zSectionTable", Storage="_zSectionTable", ThisKey="ID", OtherKey="FK_BlockID")]
		public EntitySet<zSectionTable> zSectionTable
		{
			get
			{
				return this._zSectionTable;
			}
			set
			{
				this._zSectionTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zSectionTable(zSectionTable entity)
		{
			this.SendPropertyChanging();
			entity.zBlockTable = this;
		}
		
		private void detach_zSectionTable(zSectionTable entity)
		{
			this.SendPropertyChanging();
			entity.zBlockTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zCollectedDataTable")]
	public partial class zCollectedDataTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private System.DateTime _CreateDateTime;
		
		private System.DateTime _LastChangeDateTime;
		
		private System.Nullable<int> _FK_ColumnTable;
		
		private System.Nullable<int> _FK_CollectedRowsTable;
		
		private System.Nullable<int> _FK_ConstantListTable;
		
		private string _ValueText;
		
		private System.Nullable<double> _ValueDouble;
		
		private System.Nullable<int> _ValueInt;
		
		private System.Nullable<bool> _ValueBit;
		
		private System.Nullable<int> _ValueFK_CollectedDataTable;
		
		private System.Nullable<System.DateTime> _ValueDataTime;
		
		private EntitySet<zCollectedDataTable> _zCollectedDataTable2;
		
		private EntityRef<zCollectedDataTable> _zCollectedDataTable1;
		
		private EntityRef<zCollectedRowsTable> _zCollectedRowsTable;
		
		private EntityRef<zColumnTable> _zColumnTable;
		
		private EntityRef<zConstantListTable> _zConstantListTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreateDateTimeChanging(System.DateTime value);
    partial void OnCreateDateTimeChanged();
    partial void OnLastChangeDateTimeChanging(System.DateTime value);
    partial void OnLastChangeDateTimeChanged();
    partial void OnFK_ColumnTableChanging(System.Nullable<int> value);
    partial void OnFK_ColumnTableChanged();
    partial void OnFK_CollectedRowsTableChanging(System.Nullable<int> value);
    partial void OnFK_CollectedRowsTableChanged();
    partial void OnFK_ConstantListTableChanging(System.Nullable<int> value);
    partial void OnFK_ConstantListTableChanged();
    partial void OnValueTextChanging(string value);
    partial void OnValueTextChanged();
    partial void OnValueDoubleChanging(System.Nullable<double> value);
    partial void OnValueDoubleChanged();
    partial void OnValueIntChanging(System.Nullable<int> value);
    partial void OnValueIntChanged();
    partial void OnValueBitChanging(System.Nullable<bool> value);
    partial void OnValueBitChanged();
    partial void OnValueFK_CollectedDataTableChanging(System.Nullable<int> value);
    partial void OnValueFK_CollectedDataTableChanged();
    partial void OnValueDataTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnValueDataTimeChanged();
    #endregion
		
		public zCollectedDataTable()
		{
			this._zCollectedDataTable2 = new EntitySet<zCollectedDataTable>(new Action<zCollectedDataTable>(this.attach_zCollectedDataTable2), new Action<zCollectedDataTable>(this.detach_zCollectedDataTable2));
			this._zCollectedDataTable1 = default(EntityRef<zCollectedDataTable>);
			this._zCollectedRowsTable = default(EntityRef<zCollectedRowsTable>);
			this._zColumnTable = default(EntityRef<zColumnTable>);
			this._zConstantListTable = default(EntityRef<zConstantListTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDateTime
		{
			get
			{
				return this._CreateDateTime;
			}
			set
			{
				if ((this._CreateDateTime != value))
				{
					this.OnCreateDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateDateTime = value;
					this.SendPropertyChanged("CreateDateTime");
					this.OnCreateDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangeDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangeDateTime
		{
			get
			{
				return this._LastChangeDateTime;
			}
			set
			{
				if ((this._LastChangeDateTime != value))
				{
					this.OnLastChangeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastChangeDateTime = value;
					this.SendPropertyChanged("LastChangeDateTime");
					this.OnLastChangeDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ColumnTable", DbType="Int")]
		public System.Nullable<int> FK_ColumnTable
		{
			get
			{
				return this._FK_ColumnTable;
			}
			set
			{
				if ((this._FK_ColumnTable != value))
				{
					if (this._zColumnTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ColumnTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ColumnTable = value;
					this.SendPropertyChanged("FK_ColumnTable");
					this.OnFK_ColumnTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CollectedRowsTable", DbType="Int")]
		public System.Nullable<int> FK_CollectedRowsTable
		{
			get
			{
				return this._FK_CollectedRowsTable;
			}
			set
			{
				if ((this._FK_CollectedRowsTable != value))
				{
					if (this._zCollectedRowsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CollectedRowsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CollectedRowsTable = value;
					this.SendPropertyChanged("FK_CollectedRowsTable");
					this.OnFK_CollectedRowsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ConstantListTable", DbType="Int")]
		public System.Nullable<int> FK_ConstantListTable
		{
			get
			{
				return this._FK_ConstantListTable;
			}
			set
			{
				if ((this._FK_ConstantListTable != value))
				{
					if (this._zConstantListTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ConstantListTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ConstantListTable = value;
					this.SendPropertyChanged("FK_ConstantListTable");
					this.OnFK_ConstantListTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueText", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ValueText
		{
			get
			{
				return this._ValueText;
			}
			set
			{
				if ((this._ValueText != value))
				{
					this.OnValueTextChanging(value);
					this.SendPropertyChanging();
					this._ValueText = value;
					this.SendPropertyChanged("ValueText");
					this.OnValueTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueDouble", DbType="Float")]
		public System.Nullable<double> ValueDouble
		{
			get
			{
				return this._ValueDouble;
			}
			set
			{
				if ((this._ValueDouble != value))
				{
					this.OnValueDoubleChanging(value);
					this.SendPropertyChanging();
					this._ValueDouble = value;
					this.SendPropertyChanged("ValueDouble");
					this.OnValueDoubleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueInt", DbType="Int")]
		public System.Nullable<int> ValueInt
		{
			get
			{
				return this._ValueInt;
			}
			set
			{
				if ((this._ValueInt != value))
				{
					this.OnValueIntChanging(value);
					this.SendPropertyChanging();
					this._ValueInt = value;
					this.SendPropertyChanged("ValueInt");
					this.OnValueIntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueBit", DbType="Bit")]
		public System.Nullable<bool> ValueBit
		{
			get
			{
				return this._ValueBit;
			}
			set
			{
				if ((this._ValueBit != value))
				{
					this.OnValueBitChanging(value);
					this.SendPropertyChanging();
					this._ValueBit = value;
					this.SendPropertyChanged("ValueBit");
					this.OnValueBitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueFK_CollectedDataTable", DbType="Int")]
		public System.Nullable<int> ValueFK_CollectedDataTable
		{
			get
			{
				return this._ValueFK_CollectedDataTable;
			}
			set
			{
				if ((this._ValueFK_CollectedDataTable != value))
				{
					if (this._zCollectedDataTable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueFK_CollectedDataTableChanging(value);
					this.SendPropertyChanging();
					this._ValueFK_CollectedDataTable = value;
					this.SendPropertyChanged("ValueFK_CollectedDataTable");
					this.OnValueFK_CollectedDataTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueDataTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValueDataTime
		{
			get
			{
				return this._ValueDataTime;
			}
			set
			{
				if ((this._ValueDataTime != value))
				{
					this.OnValueDataTimeChanging(value);
					this.SendPropertyChanging();
					this._ValueDataTime = value;
					this.SendPropertyChanged("ValueDataTime");
					this.OnValueDataTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCollectedDataTable_zCollectedDataTable", Storage="_zCollectedDataTable2", ThisKey="ID", OtherKey="ValueFK_CollectedDataTable")]
		public EntitySet<zCollectedDataTable> zCollectedDataTable2
		{
			get
			{
				return this._zCollectedDataTable2;
			}
			set
			{
				this._zCollectedDataTable2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCollectedDataTable_zCollectedDataTable", Storage="_zCollectedDataTable1", ThisKey="ValueFK_CollectedDataTable", OtherKey="ID", IsForeignKey=true)]
		public zCollectedDataTable zCollectedDataTable1
		{
			get
			{
				return this._zCollectedDataTable1.Entity;
			}
			set
			{
				zCollectedDataTable previousValue = this._zCollectedDataTable1.Entity;
				if (((previousValue != value) 
							|| (this._zCollectedDataTable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCollectedDataTable1.Entity = null;
						previousValue.zCollectedDataTable2.Remove(this);
					}
					this._zCollectedDataTable1.Entity = value;
					if ((value != null))
					{
						value.zCollectedDataTable2.Add(this);
						this._ValueFK_CollectedDataTable = value.ID;
					}
					else
					{
						this._ValueFK_CollectedDataTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zCollectedDataTable1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCollectedRowsTable_zCollectedDataTable", Storage="_zCollectedRowsTable", ThisKey="FK_CollectedRowsTable", OtherKey="ID", IsForeignKey=true)]
		public zCollectedRowsTable zCollectedRowsTable
		{
			get
			{
				return this._zCollectedRowsTable.Entity;
			}
			set
			{
				zCollectedRowsTable previousValue = this._zCollectedRowsTable.Entity;
				if (((previousValue != value) 
							|| (this._zCollectedRowsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCollectedRowsTable.Entity = null;
						previousValue.zCollectedDataTable.Remove(this);
					}
					this._zCollectedRowsTable.Entity = value;
					if ((value != null))
					{
						value.zCollectedDataTable.Add(this);
						this._FK_CollectedRowsTable = value.ID;
					}
					else
					{
						this._FK_CollectedRowsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zCollectedRowsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zCollectedDataTable", Storage="_zColumnTable", ThisKey="FK_ColumnTable", OtherKey="ID", IsForeignKey=true)]
		public zColumnTable zColumnTable
		{
			get
			{
				return this._zColumnTable.Entity;
			}
			set
			{
				zColumnTable previousValue = this._zColumnTable.Entity;
				if (((previousValue != value) 
							|| (this._zColumnTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zColumnTable.Entity = null;
						previousValue.zCollectedDataTable.Remove(this);
					}
					this._zColumnTable.Entity = value;
					if ((value != null))
					{
						value.zCollectedDataTable.Add(this);
						this._FK_ColumnTable = value.ID;
					}
					else
					{
						this._FK_ColumnTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zColumnTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zConstantListTable_zCollectedDataTable", Storage="_zConstantListTable", ThisKey="FK_ConstantListTable", OtherKey="ID", IsForeignKey=true)]
		public zConstantListTable zConstantListTable
		{
			get
			{
				return this._zConstantListTable.Entity;
			}
			set
			{
				zConstantListTable previousValue = this._zConstantListTable.Entity;
				if (((previousValue != value) 
							|| (this._zConstantListTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zConstantListTable.Entity = null;
						previousValue.zCollectedDataTable.Remove(this);
					}
					this._zConstantListTable.Entity = value;
					if ((value != null))
					{
						value.zCollectedDataTable.Add(this);
						this._FK_ConstantListTable = value.ID;
					}
					else
					{
						this._FK_ConstantListTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zConstantListTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zCollectedDataTable2(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zCollectedDataTable1 = this;
		}
		
		private void detach_zCollectedDataTable2(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zCollectedDataTable1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zCollectedRowsTable")]
	public partial class zCollectedRowsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private int _FK_SectionTable;
		
		private int _FK_ApplicationTable;
		
		private EntitySet<zCollectedDataTable> _zCollectedDataTable;
		
		private EntityRef<zApplicationTable> _zApplicationTable;
		
		private EntityRef<zSectionTable> _zSectionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_SectionTableChanging(int value);
    partial void OnFK_SectionTableChanged();
    partial void OnFK_ApplicationTableChanging(int value);
    partial void OnFK_ApplicationTableChanged();
    #endregion
		
		public zCollectedRowsTable()
		{
			this._zCollectedDataTable = new EntitySet<zCollectedDataTable>(new Action<zCollectedDataTable>(this.attach_zCollectedDataTable), new Action<zCollectedDataTable>(this.detach_zCollectedDataTable));
			this._zApplicationTable = default(EntityRef<zApplicationTable>);
			this._zSectionTable = default(EntityRef<zSectionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SectionTable", DbType="Int NOT NULL")]
		public int FK_SectionTable
		{
			get
			{
				return this._FK_SectionTable;
			}
			set
			{
				if ((this._FK_SectionTable != value))
				{
					if (this._zSectionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SectionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SectionTable = value;
					this.SendPropertyChanged("FK_SectionTable");
					this.OnFK_SectionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ApplicationTable", DbType="Int NOT NULL")]
		public int FK_ApplicationTable
		{
			get
			{
				return this._FK_ApplicationTable;
			}
			set
			{
				if ((this._FK_ApplicationTable != value))
				{
					if (this._zApplicationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ApplicationTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ApplicationTable = value;
					this.SendPropertyChanged("FK_ApplicationTable");
					this.OnFK_ApplicationTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCollectedRowsTable_zCollectedDataTable", Storage="_zCollectedDataTable", ThisKey="ID", OtherKey="FK_CollectedRowsTable")]
		public EntitySet<zCollectedDataTable> zCollectedDataTable
		{
			get
			{
				return this._zCollectedDataTable;
			}
			set
			{
				this._zCollectedDataTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zCollectedRowsTable", Storage="_zApplicationTable", ThisKey="FK_ApplicationTable", OtherKey="ID", IsForeignKey=true)]
		public zApplicationTable zApplicationTable
		{
			get
			{
				return this._zApplicationTable.Entity;
			}
			set
			{
				zApplicationTable previousValue = this._zApplicationTable.Entity;
				if (((previousValue != value) 
							|| (this._zApplicationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zApplicationTable.Entity = null;
						previousValue.zCollectedRowsTable.Remove(this);
					}
					this._zApplicationTable.Entity = value;
					if ((value != null))
					{
						value.zCollectedRowsTable.Add(this);
						this._FK_ApplicationTable = value.ID;
					}
					else
					{
						this._FK_ApplicationTable = default(int);
					}
					this.SendPropertyChanged("zApplicationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zSectionTable_zCollectedRowsTable", Storage="_zSectionTable", ThisKey="FK_SectionTable", OtherKey="ID", IsForeignKey=true)]
		public zSectionTable zSectionTable
		{
			get
			{
				return this._zSectionTable.Entity;
			}
			set
			{
				zSectionTable previousValue = this._zSectionTable.Entity;
				if (((previousValue != value) 
							|| (this._zSectionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zSectionTable.Entity = null;
						previousValue.zCollectedRowsTable.Remove(this);
					}
					this._zSectionTable.Entity = value;
					if ((value != null))
					{
						value.zCollectedRowsTable.Add(this);
						this._FK_SectionTable = value.ID;
					}
					else
					{
						this._FK_SectionTable = default(int);
					}
					this.SendPropertyChanged("zSectionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zCollectedDataTable(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zCollectedRowsTable = this;
		}
		
		private void detach_zCollectedDataTable(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zCollectedRowsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zColumnTable")]
	public partial class zColumnTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _Description;
		
		private int _FK_SectionTable;
		
		private int _DataType;
		
		private System.Nullable<int> _FK_ColumnTable;
		
		private System.Nullable<int> _FK_ColumnConnectFromTable;
		
		private System.Nullable<int> _FK_ColumnConnectToTable;
		
		private System.Nullable<int> _FK_ConstantListsTable;
		
		private System.Nullable<bool> _TotalUp;
		
		private string _UniqueMark;
		
		private System.Nullable<bool> _SortBy;
		
		private bool _Visible;
		
		private System.Nullable<double> _MaxValue;
		
		private System.Nullable<double> _MinValue;
		
		private EntitySet<zCollectedDataTable> _zCollectedDataTable;
		
		private EntitySet<zColumnTable> _zColumnTable2;
		
		private EntitySet<zColumnTable> _zColumnTable4;
		
		private EntitySet<zColumnTable> _zColumnTable6;
		
		private EntityRef<zColumnTable> _zColumnTable1;
		
		private EntityRef<zColumnTable> _zColumnTable3;
		
		private EntityRef<zColumnTable> _zColumnTable5;
		
		private EntityRef<zConstantListTable> _zConstantListTable;
		
		private EntityRef<zSectionTable> _zSectionTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFK_SectionTableChanging(int value);
    partial void OnFK_SectionTableChanged();
    partial void OnDataTypeChanging(int value);
    partial void OnDataTypeChanged();
    partial void OnFK_ColumnTableChanging(System.Nullable<int> value);
    partial void OnFK_ColumnTableChanged();
    partial void OnFK_ColumnConnectFromTableChanging(System.Nullable<int> value);
    partial void OnFK_ColumnConnectFromTableChanged();
    partial void OnFK_ColumnConnectToTableChanging(System.Nullable<int> value);
    partial void OnFK_ColumnConnectToTableChanged();
    partial void OnFK_ConstantListsTableChanging(System.Nullable<int> value);
    partial void OnFK_ConstantListsTableChanged();
    partial void OnTotalUpChanging(System.Nullable<bool> value);
    partial void OnTotalUpChanged();
    partial void OnUniqueMarkChanging(string value);
    partial void OnUniqueMarkChanged();
    partial void OnSortByChanging(System.Nullable<bool> value);
    partial void OnSortByChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnMaxValueChanging(System.Nullable<double> value);
    partial void OnMaxValueChanged();
    partial void OnMinValueChanging(System.Nullable<double> value);
    partial void OnMinValueChanged();
    #endregion
		
		public zColumnTable()
		{
			this._zCollectedDataTable = new EntitySet<zCollectedDataTable>(new Action<zCollectedDataTable>(this.attach_zCollectedDataTable), new Action<zCollectedDataTable>(this.detach_zCollectedDataTable));
			this._zColumnTable2 = new EntitySet<zColumnTable>(new Action<zColumnTable>(this.attach_zColumnTable2), new Action<zColumnTable>(this.detach_zColumnTable2));
			this._zColumnTable4 = new EntitySet<zColumnTable>(new Action<zColumnTable>(this.attach_zColumnTable4), new Action<zColumnTable>(this.detach_zColumnTable4));
			this._zColumnTable6 = new EntitySet<zColumnTable>(new Action<zColumnTable>(this.attach_zColumnTable6), new Action<zColumnTable>(this.detach_zColumnTable6));
			this._zColumnTable1 = default(EntityRef<zColumnTable>);
			this._zColumnTable3 = default(EntityRef<zColumnTable>);
			this._zColumnTable5 = default(EntityRef<zColumnTable>);
			this._zConstantListTable = default(EntityRef<zConstantListTable>);
			this._zSectionTable = default(EntityRef<zSectionTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_SectionTable", DbType="Int NOT NULL")]
		public int FK_SectionTable
		{
			get
			{
				return this._FK_SectionTable;
			}
			set
			{
				if ((this._FK_SectionTable != value))
				{
					if (this._zSectionTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_SectionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_SectionTable = value;
					this.SendPropertyChanged("FK_SectionTable");
					this.OnFK_SectionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int NOT NULL")]
		public int DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ColumnTable", DbType="Int")]
		public System.Nullable<int> FK_ColumnTable
		{
			get
			{
				return this._FK_ColumnTable;
			}
			set
			{
				if ((this._FK_ColumnTable != value))
				{
					if (this._zColumnTable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ColumnTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ColumnTable = value;
					this.SendPropertyChanged("FK_ColumnTable");
					this.OnFK_ColumnTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ColumnConnectFromTable", DbType="Int")]
		public System.Nullable<int> FK_ColumnConnectFromTable
		{
			get
			{
				return this._FK_ColumnConnectFromTable;
			}
			set
			{
				if ((this._FK_ColumnConnectFromTable != value))
				{
					if (this._zColumnTable5.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ColumnConnectFromTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ColumnConnectFromTable = value;
					this.SendPropertyChanged("FK_ColumnConnectFromTable");
					this.OnFK_ColumnConnectFromTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ColumnConnectToTable", DbType="Int")]
		public System.Nullable<int> FK_ColumnConnectToTable
		{
			get
			{
				return this._FK_ColumnConnectToTable;
			}
			set
			{
				if ((this._FK_ColumnConnectToTable != value))
				{
					if (this._zColumnTable3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ColumnConnectToTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ColumnConnectToTable = value;
					this.SendPropertyChanged("FK_ColumnConnectToTable");
					this.OnFK_ColumnConnectToTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ConstantListsTable", DbType="Int")]
		public System.Nullable<int> FK_ConstantListsTable
		{
			get
			{
				return this._FK_ConstantListsTable;
			}
			set
			{
				if ((this._FK_ConstantListsTable != value))
				{
					if (this._zConstantListTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ConstantListsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ConstantListsTable = value;
					this.SendPropertyChanged("FK_ConstantListsTable");
					this.OnFK_ConstantListsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalUp", DbType="Bit")]
		public System.Nullable<bool> TotalUp
		{
			get
			{
				return this._TotalUp;
			}
			set
			{
				if ((this._TotalUp != value))
				{
					this.OnTotalUpChanging(value);
					this.SendPropertyChanging();
					this._TotalUp = value;
					this.SendPropertyChanged("TotalUp");
					this.OnTotalUpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueMark", DbType="VarChar(50)")]
		public string UniqueMark
		{
			get
			{
				return this._UniqueMark;
			}
			set
			{
				if ((this._UniqueMark != value))
				{
					this.OnUniqueMarkChanging(value);
					this.SendPropertyChanging();
					this._UniqueMark = value;
					this.SendPropertyChanged("UniqueMark");
					this.OnUniqueMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortBy", DbType="Bit")]
		public System.Nullable<bool> SortBy
		{
			get
			{
				return this._SortBy;
			}
			set
			{
				if ((this._SortBy != value))
				{
					this.OnSortByChanging(value);
					this.SendPropertyChanging();
					this._SortBy = value;
					this.SendPropertyChanged("SortBy");
					this.OnSortByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Float")]
		public System.Nullable<double> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Float")]
		public System.Nullable<double> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zCollectedDataTable", Storage="_zCollectedDataTable", ThisKey="ID", OtherKey="FK_ColumnTable")]
		public EntitySet<zCollectedDataTable> zCollectedDataTable
		{
			get
			{
				return this._zCollectedDataTable;
			}
			set
			{
				this._zCollectedDataTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zColumnTable", Storage="_zColumnTable2", ThisKey="ID", OtherKey="FK_ColumnTable")]
		public EntitySet<zColumnTable> zColumnTable2
		{
			get
			{
				return this._zColumnTable2;
			}
			set
			{
				this._zColumnTable2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zColumnTable1", Storage="_zColumnTable4", ThisKey="ID", OtherKey="FK_ColumnConnectToTable")]
		public EntitySet<zColumnTable> zColumnTable4
		{
			get
			{
				return this._zColumnTable4;
			}
			set
			{
				this._zColumnTable4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zColumnTable2", Storage="_zColumnTable6", ThisKey="ID", OtherKey="FK_ColumnConnectFromTable")]
		public EntitySet<zColumnTable> zColumnTable6
		{
			get
			{
				return this._zColumnTable6;
			}
			set
			{
				this._zColumnTable6.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zColumnTable", Storage="_zColumnTable1", ThisKey="FK_ColumnTable", OtherKey="ID", IsForeignKey=true)]
		public zColumnTable zColumnTable1
		{
			get
			{
				return this._zColumnTable1.Entity;
			}
			set
			{
				zColumnTable previousValue = this._zColumnTable1.Entity;
				if (((previousValue != value) 
							|| (this._zColumnTable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zColumnTable1.Entity = null;
						previousValue.zColumnTable2.Remove(this);
					}
					this._zColumnTable1.Entity = value;
					if ((value != null))
					{
						value.zColumnTable2.Add(this);
						this._FK_ColumnTable = value.ID;
					}
					else
					{
						this._FK_ColumnTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zColumnTable1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zColumnTable1", Storage="_zColumnTable3", ThisKey="FK_ColumnConnectToTable", OtherKey="ID", IsForeignKey=true)]
		public zColumnTable zColumnTable3
		{
			get
			{
				return this._zColumnTable3.Entity;
			}
			set
			{
				zColumnTable previousValue = this._zColumnTable3.Entity;
				if (((previousValue != value) 
							|| (this._zColumnTable3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zColumnTable3.Entity = null;
						previousValue.zColumnTable4.Remove(this);
					}
					this._zColumnTable3.Entity = value;
					if ((value != null))
					{
						value.zColumnTable4.Add(this);
						this._FK_ColumnConnectToTable = value.ID;
					}
					else
					{
						this._FK_ColumnConnectToTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zColumnTable3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zColumnTable_zColumnTable2", Storage="_zColumnTable5", ThisKey="FK_ColumnConnectFromTable", OtherKey="ID", IsForeignKey=true)]
		public zColumnTable zColumnTable5
		{
			get
			{
				return this._zColumnTable5.Entity;
			}
			set
			{
				zColumnTable previousValue = this._zColumnTable5.Entity;
				if (((previousValue != value) 
							|| (this._zColumnTable5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zColumnTable5.Entity = null;
						previousValue.zColumnTable6.Remove(this);
					}
					this._zColumnTable5.Entity = value;
					if ((value != null))
					{
						value.zColumnTable6.Add(this);
						this._FK_ColumnConnectFromTable = value.ID;
					}
					else
					{
						this._FK_ColumnConnectFromTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zColumnTable5");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zConstantListTable_zColumnTable", Storage="_zConstantListTable", ThisKey="FK_ConstantListsTable", OtherKey="ID", IsForeignKey=true)]
		public zConstantListTable zConstantListTable
		{
			get
			{
				return this._zConstantListTable.Entity;
			}
			set
			{
				zConstantListTable previousValue = this._zConstantListTable.Entity;
				if (((previousValue != value) 
							|| (this._zConstantListTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zConstantListTable.Entity = null;
						previousValue.zColumnTable.Remove(this);
					}
					this._zConstantListTable.Entity = value;
					if ((value != null))
					{
						value.zColumnTable.Add(this);
						this._FK_ConstantListsTable = value.ID;
					}
					else
					{
						this._FK_ConstantListsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zConstantListTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zSectionTable_zColumnTable", Storage="_zSectionTable", ThisKey="FK_SectionTable", OtherKey="ID", IsForeignKey=true)]
		public zSectionTable zSectionTable
		{
			get
			{
				return this._zSectionTable.Entity;
			}
			set
			{
				zSectionTable previousValue = this._zSectionTable.Entity;
				if (((previousValue != value) 
							|| (this._zSectionTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zSectionTable.Entity = null;
						previousValue.zColumnTable.Remove(this);
					}
					this._zSectionTable.Entity = value;
					if ((value != null))
					{
						value.zColumnTable.Add(this);
						this._FK_SectionTable = value.ID;
					}
					else
					{
						this._FK_SectionTable = default(int);
					}
					this.SendPropertyChanged("zSectionTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zCollectedDataTable(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable = this;
		}
		
		private void detach_zCollectedDataTable(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable = null;
		}
		
		private void attach_zColumnTable2(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable1 = this;
		}
		
		private void detach_zColumnTable2(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable1 = null;
		}
		
		private void attach_zColumnTable4(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable3 = this;
		}
		
		private void detach_zColumnTable4(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable3 = null;
		}
		
		private void attach_zColumnTable6(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable5 = this;
		}
		
		private void detach_zColumnTable6(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zColumnTable5 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zCompetitionsTable")]
	public partial class zCompetitionsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _Number;
		
		private System.Nullable<bool> _OpenForApplications;
		
		private string _TemplateDocName;
		
		private string _TemplateDocWithoutMarksName;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<double> _Budjet;
		
		private System.Nullable<bool> _Sended;
		
		private System.Nullable<int> _FK_Curator;
		
		private EntitySet<zActionsCompetitionsMappingTable> _zActionsCompetitionsMappingTable;
		
		private EntitySet<zApplicationTable> _zApplicationTable;
		
		private EntitySet<zConstantListTable> _zConstantListTable;
		
		private EntitySet<zExpertsAndCompetitionMappngTamplateTable> _zExpertsAndCompetitionMappngTamplateTable;
		
		private EntitySet<zFormCompetitionMappingTable> _zFormCompetitionMappingTable;
		
		private EntitySet<zSectionTable> _zSectionTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnOpenForApplicationsChanging(System.Nullable<bool> value);
    partial void OnOpenForApplicationsChanged();
    partial void OnTemplateDocNameChanging(string value);
    partial void OnTemplateDocNameChanged();
    partial void OnTemplateDocWithoutMarksNameChanging(string value);
    partial void OnTemplateDocWithoutMarksNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnBudjetChanging(System.Nullable<double> value);
    partial void OnBudjetChanged();
    partial void OnSendedChanging(System.Nullable<bool> value);
    partial void OnSendedChanged();
    partial void OnFK_CuratorChanging(System.Nullable<int> value);
    partial void OnFK_CuratorChanged();
    #endregion
		
		public zCompetitionsTable()
		{
			this._zActionsCompetitionsMappingTable = new EntitySet<zActionsCompetitionsMappingTable>(new Action<zActionsCompetitionsMappingTable>(this.attach_zActionsCompetitionsMappingTable), new Action<zActionsCompetitionsMappingTable>(this.detach_zActionsCompetitionsMappingTable));
			this._zApplicationTable = new EntitySet<zApplicationTable>(new Action<zApplicationTable>(this.attach_zApplicationTable), new Action<zApplicationTable>(this.detach_zApplicationTable));
			this._zConstantListTable = new EntitySet<zConstantListTable>(new Action<zConstantListTable>(this.attach_zConstantListTable), new Action<zConstantListTable>(this.detach_zConstantListTable));
			this._zExpertsAndCompetitionMappngTamplateTable = new EntitySet<zExpertsAndCompetitionMappngTamplateTable>(new Action<zExpertsAndCompetitionMappngTamplateTable>(this.attach_zExpertsAndCompetitionMappngTamplateTable), new Action<zExpertsAndCompetitionMappngTamplateTable>(this.detach_zExpertsAndCompetitionMappngTamplateTable));
			this._zFormCompetitionMappingTable = new EntitySet<zFormCompetitionMappingTable>(new Action<zFormCompetitionMappingTable>(this.attach_zFormCompetitionMappingTable), new Action<zFormCompetitionMappingTable>(this.detach_zFormCompetitionMappingTable));
			this._zSectionTable = new EntitySet<zSectionTable>(new Action<zSectionTable>(this.attach_zSectionTable), new Action<zSectionTable>(this.detach_zSectionTable));
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenForApplications", DbType="Bit")]
		public System.Nullable<bool> OpenForApplications
		{
			get
			{
				return this._OpenForApplications;
			}
			set
			{
				if ((this._OpenForApplications != value))
				{
					this.OnOpenForApplicationsChanging(value);
					this.SendPropertyChanging();
					this._OpenForApplications = value;
					this.SendPropertyChanged("OpenForApplications");
					this.OnOpenForApplicationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateDocName", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TemplateDocName
		{
			get
			{
				return this._TemplateDocName;
			}
			set
			{
				if ((this._TemplateDocName != value))
				{
					this.OnTemplateDocNameChanging(value);
					this.SendPropertyChanging();
					this._TemplateDocName = value;
					this.SendPropertyChanged("TemplateDocName");
					this.OnTemplateDocNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateDocWithoutMarksName", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TemplateDocWithoutMarksName
		{
			get
			{
				return this._TemplateDocWithoutMarksName;
			}
			set
			{
				if ((this._TemplateDocWithoutMarksName != value))
				{
					this.OnTemplateDocWithoutMarksNameChanging(value);
					this.SendPropertyChanging();
					this._TemplateDocWithoutMarksName = value;
					this.SendPropertyChanged("TemplateDocWithoutMarksName");
					this.OnTemplateDocWithoutMarksNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Budjet", DbType="Float")]
		public System.Nullable<double> Budjet
		{
			get
			{
				return this._Budjet;
			}
			set
			{
				if ((this._Budjet != value))
				{
					this.OnBudjetChanging(value);
					this.SendPropertyChanging();
					this._Budjet = value;
					this.SendPropertyChanged("Budjet");
					this.OnBudjetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sended", DbType="Bit")]
		public System.Nullable<bool> Sended
		{
			get
			{
				return this._Sended;
			}
			set
			{
				if ((this._Sended != value))
				{
					this.OnSendedChanging(value);
					this.SendPropertyChanging();
					this._Sended = value;
					this.SendPropertyChanged("Sended");
					this.OnSendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Curator", DbType="Int")]
		public System.Nullable<int> FK_Curator
		{
			get
			{
				return this._FK_Curator;
			}
			set
			{
				if ((this._FK_Curator != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CuratorChanging(value);
					this.SendPropertyChanging();
					this._FK_Curator = value;
					this.SendPropertyChanged("FK_Curator");
					this.OnFK_CuratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zActionsCompetitionsMappingTable", Storage="_zActionsCompetitionsMappingTable", ThisKey="ID", OtherKey="FK_Competiton")]
		public EntitySet<zActionsCompetitionsMappingTable> zActionsCompetitionsMappingTable
		{
			get
			{
				return this._zActionsCompetitionsMappingTable;
			}
			set
			{
				this._zActionsCompetitionsMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zApplicationTable", Storage="_zApplicationTable", ThisKey="ID", OtherKey="FK_CompetitionTable")]
		public EntitySet<zApplicationTable> zApplicationTable
		{
			get
			{
				return this._zApplicationTable;
			}
			set
			{
				this._zApplicationTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zConstantListTable", Storage="_zConstantListTable", ThisKey="ID", OtherKey="FK_CompetitionTable")]
		public EntitySet<zConstantListTable> zConstantListTable
		{
			get
			{
				return this._zConstantListTable;
			}
			set
			{
				this._zConstantListTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zExpertsAndCompetitionMappngTamplateTable", Storage="_zExpertsAndCompetitionMappngTamplateTable", ThisKey="ID", OtherKey="FK_CompetitionsTable")]
		public EntitySet<zExpertsAndCompetitionMappngTamplateTable> zExpertsAndCompetitionMappngTamplateTable
		{
			get
			{
				return this._zExpertsAndCompetitionMappngTamplateTable;
			}
			set
			{
				this._zExpertsAndCompetitionMappngTamplateTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zFormCompetitionMappingTable", Storage="_zFormCompetitionMappingTable", ThisKey="ID", OtherKey="FK_Competition")]
		public EntitySet<zFormCompetitionMappingTable> zFormCompetitionMappingTable
		{
			get
			{
				return this._zFormCompetitionMappingTable;
			}
			set
			{
				this._zFormCompetitionMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zSectionTable", Storage="_zSectionTable", ThisKey="ID", OtherKey="FK_CompetitionsTable")]
		public EntitySet<zSectionTable> zSectionTable
		{
			get
			{
				return this._zSectionTable;
			}
			set
			{
				this._zSectionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zCompetitionsTable", Storage="_UsersTable", ThisKey="FK_Curator", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.zCompetitionsTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.zCompetitionsTable.Add(this);
						this._FK_Curator = value.UsersTableID;
					}
					else
					{
						this._FK_Curator = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zActionsCompetitionsMappingTable(zActionsCompetitionsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = this;
		}
		
		private void detach_zActionsCompetitionsMappingTable(zActionsCompetitionsMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = null;
		}
		
		private void attach_zApplicationTable(zApplicationTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = this;
		}
		
		private void detach_zApplicationTable(zApplicationTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = null;
		}
		
		private void attach_zConstantListTable(zConstantListTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = this;
		}
		
		private void detach_zConstantListTable(zConstantListTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = null;
		}
		
		private void attach_zExpertsAndCompetitionMappngTamplateTable(zExpertsAndCompetitionMappngTamplateTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = this;
		}
		
		private void detach_zExpertsAndCompetitionMappngTamplateTable(zExpertsAndCompetitionMappngTamplateTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = null;
		}
		
		private void attach_zFormCompetitionMappingTable(zFormCompetitionMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = this;
		}
		
		private void detach_zFormCompetitionMappingTable(zFormCompetitionMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = null;
		}
		
		private void attach_zSectionTable(zSectionTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = this;
		}
		
		private void detach_zSectionTable(zSectionTable entity)
		{
			this.SendPropertyChanging();
			entity.zCompetitionsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zConstantListTable")]
	public partial class zConstantListTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _FK_CompetitionTable;
		
		private EntitySet<zCollectedDataTable> _zCollectedDataTable;
		
		private EntitySet<zColumnTable> _zColumnTable;
		
		private EntityRef<zCompetitionsTable> _zCompetitionsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_CompetitionTableChanging(int value);
    partial void OnFK_CompetitionTableChanged();
    #endregion
		
		public zConstantListTable()
		{
			this._zCollectedDataTable = new EntitySet<zCollectedDataTable>(new Action<zCollectedDataTable>(this.attach_zCollectedDataTable), new Action<zCollectedDataTable>(this.detach_zCollectedDataTable));
			this._zColumnTable = new EntitySet<zColumnTable>(new Action<zColumnTable>(this.attach_zColumnTable), new Action<zColumnTable>(this.detach_zColumnTable));
			this._zCompetitionsTable = default(EntityRef<zCompetitionsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(120)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CompetitionTable", DbType="Int NOT NULL")]
		public int FK_CompetitionTable
		{
			get
			{
				return this._FK_CompetitionTable;
			}
			set
			{
				if ((this._FK_CompetitionTable != value))
				{
					if (this._zCompetitionsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CompetitionTable = value;
					this.SendPropertyChanged("FK_CompetitionTable");
					this.OnFK_CompetitionTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zConstantListTable_zCollectedDataTable", Storage="_zCollectedDataTable", ThisKey="ID", OtherKey="FK_ConstantListTable")]
		public EntitySet<zCollectedDataTable> zCollectedDataTable
		{
			get
			{
				return this._zCollectedDataTable;
			}
			set
			{
				this._zCollectedDataTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zConstantListTable_zColumnTable", Storage="_zColumnTable", ThisKey="ID", OtherKey="FK_ConstantListsTable")]
		public EntitySet<zColumnTable> zColumnTable
		{
			get
			{
				return this._zColumnTable;
			}
			set
			{
				this._zColumnTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zConstantListTable", Storage="_zCompetitionsTable", ThisKey="FK_CompetitionTable", OtherKey="ID", IsForeignKey=true)]
		public zCompetitionsTable zCompetitionsTable
		{
			get
			{
				return this._zCompetitionsTable.Entity;
			}
			set
			{
				zCompetitionsTable previousValue = this._zCompetitionsTable.Entity;
				if (((previousValue != value) 
							|| (this._zCompetitionsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCompetitionsTable.Entity = null;
						previousValue.zConstantListTable.Remove(this);
					}
					this._zCompetitionsTable.Entity = value;
					if ((value != null))
					{
						value.zConstantListTable.Add(this);
						this._FK_CompetitionTable = value.ID;
					}
					else
					{
						this._FK_CompetitionTable = default(int);
					}
					this.SendPropertyChanged("zCompetitionsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zCollectedDataTable(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zConstantListTable = this;
		}
		
		private void detach_zCollectedDataTable(zCollectedDataTable entity)
		{
			this.SendPropertyChanging();
			entity.zConstantListTable = null;
		}
		
		private void attach_zColumnTable(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zConstantListTable = this;
		}
		
		private void detach_zColumnTable(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zConstantListTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zDocumentsTable")]
	public partial class zDocumentsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private System.Nullable<int> _FK_ApplicationTable;
		
		private System.Nullable<System.DateTime> _AddDateTime;
		
		private string _LinkOut;
		
		private EntityRef<zApplicationTable> _zApplicationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFK_ApplicationTableChanging(System.Nullable<int> value);
    partial void OnFK_ApplicationTableChanged();
    partial void OnAddDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateTimeChanged();
    partial void OnLinkOutChanging(string value);
    partial void OnLinkOutChanged();
    #endregion
		
		public zDocumentsTable()
		{
			this._zApplicationTable = default(EntityRef<zApplicationTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ApplicationTable", DbType="Int")]
		public System.Nullable<int> FK_ApplicationTable
		{
			get
			{
				return this._FK_ApplicationTable;
			}
			set
			{
				if ((this._FK_ApplicationTable != value))
				{
					if (this._zApplicationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ApplicationTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ApplicationTable = value;
					this.SendPropertyChanged("FK_ApplicationTable");
					this.OnFK_ApplicationTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDateTime
		{
			get
			{
				return this._AddDateTime;
			}
			set
			{
				if ((this._AddDateTime != value))
				{
					this.OnAddDateTimeChanging(value);
					this.SendPropertyChanging();
					this._AddDateTime = value;
					this.SendPropertyChanged("AddDateTime");
					this.OnAddDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkOut", DbType="VarChar(MAX)")]
		public string LinkOut
		{
			get
			{
				return this._LinkOut;
			}
			set
			{
				if ((this._LinkOut != value))
				{
					this.OnLinkOutChanging(value);
					this.SendPropertyChanging();
					this._LinkOut = value;
					this.SendPropertyChanged("LinkOut");
					this.OnLinkOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zDocumentsTable", Storage="_zApplicationTable", ThisKey="FK_ApplicationTable", OtherKey="ID", IsForeignKey=true)]
		public zApplicationTable zApplicationTable
		{
			get
			{
				return this._zApplicationTable.Entity;
			}
			set
			{
				zApplicationTable previousValue = this._zApplicationTable.Entity;
				if (((previousValue != value) 
							|| (this._zApplicationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zApplicationTable.Entity = null;
						previousValue.zDocumentsTable.Remove(this);
					}
					this._zApplicationTable.Entity = value;
					if ((value != null))
					{
						value.zDocumentsTable.Add(this);
						this._FK_ApplicationTable = value.ID;
					}
					else
					{
						this._FK_ApplicationTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zApplicationTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZeroLevelSubdivisionTable")]
	public partial class ZeroLevelSubdivisionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZeroLevelSubdivisionTableID;
		
		private bool _Active;
		
		private string _Name;
		
		private EntitySet<CollectedBasicParametersTable> _CollectedBasicParametersTable;
		
		private EntitySet<FirstLevelSubdivisionTable> _FirstLevelSubdivisionTable;
		
		private EntitySet<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZeroLevelSubdivisionTableIDChanging(int value);
    partial void OnZeroLevelSubdivisionTableIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ZeroLevelSubdivisionTable()
		{
			this._CollectedBasicParametersTable = new EntitySet<CollectedBasicParametersTable>(new Action<CollectedBasicParametersTable>(this.attach_CollectedBasicParametersTable), new Action<CollectedBasicParametersTable>(this.detach_CollectedBasicParametersTable));
			this._FirstLevelSubdivisionTable = new EntitySet<FirstLevelSubdivisionTable>(new Action<FirstLevelSubdivisionTable>(this.attach_FirstLevelSubdivisionTable), new Action<FirstLevelSubdivisionTable>(this.detach_FirstLevelSubdivisionTable));
			this._UsersTable = new EntitySet<UsersTable>(new Action<UsersTable>(this.attach_UsersTable), new Action<UsersTable>(this.detach_UsersTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZeroLevelSubdivisionTableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ZeroLevelSubdivisionTableID
		{
			get
			{
				return this._ZeroLevelSubdivisionTableID;
			}
			set
			{
				if ((this._ZeroLevelSubdivisionTableID != value))
				{
					this.OnZeroLevelSubdivisionTableIDChanging(value);
					this.SendPropertyChanging();
					this._ZeroLevelSubdivisionTableID = value;
					this.SendPropertyChanged("ZeroLevelSubdivisionTableID");
					this.OnZeroLevelSubdivisionTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZeroLevelSubdivisionTable_CollectedBasicParametersTable", Storage="_CollectedBasicParametersTable", ThisKey="ZeroLevelSubdivisionTableID", OtherKey="FK_ZeroLevelSubdivisionTable")]
		public EntitySet<CollectedBasicParametersTable> CollectedBasicParametersTable
		{
			get
			{
				return this._CollectedBasicParametersTable;
			}
			set
			{
				this._CollectedBasicParametersTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZeroLevelSubdivisionTable_FirstLevelSubdivisionTable", Storage="_FirstLevelSubdivisionTable", ThisKey="ZeroLevelSubdivisionTableID", OtherKey="FK_ZeroLevelSubvisionTable")]
		public EntitySet<FirstLevelSubdivisionTable> FirstLevelSubdivisionTable
		{
			get
			{
				return this._FirstLevelSubdivisionTable;
			}
			set
			{
				this._FirstLevelSubdivisionTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ZeroLevelSubdivisionTable_UsersTable", Storage="_UsersTable", ThisKey="ZeroLevelSubdivisionTableID", OtherKey="FK_ZeroLevelSubdivisionTable")]
		public EntitySet<UsersTable> UsersTable
		{
			get
			{
				return this._UsersTable;
			}
			set
			{
				this._UsersTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ZeroLevelSubdivisionTable = this;
		}
		
		private void detach_CollectedBasicParametersTable(CollectedBasicParametersTable entity)
		{
			this.SendPropertyChanging();
			entity.ZeroLevelSubdivisionTable = null;
		}
		
		private void attach_FirstLevelSubdivisionTable(FirstLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.ZeroLevelSubdivisionTable = this;
		}
		
		private void detach_FirstLevelSubdivisionTable(FirstLevelSubdivisionTable entity)
		{
			this.SendPropertyChanging();
			entity.ZeroLevelSubdivisionTable = null;
		}
		
		private void attach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ZeroLevelSubdivisionTable = this;
		}
		
		private void detach_UsersTable(UsersTable entity)
		{
			this.SendPropertyChanging();
			entity.ZeroLevelSubdivisionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zExpertAndExpertGroupMappingTable")]
	public partial class zExpertAndExpertGroupMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private System.Nullable<int> _FK_ExpertGroupTable;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
		private EntityRef<zExpertGroup> _zExpertGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_ExpertGroupTableChanging(System.Nullable<int> value);
    partial void OnFK_ExpertGroupTableChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    #endregion
		
		public zExpertAndExpertGroupMappingTable()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			this._zExpertGroup = default(EntityRef<zExpertGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ExpertGroupTable", DbType="Int")]
		public System.Nullable<int> FK_ExpertGroupTable
		{
			get
			{
				return this._FK_ExpertGroupTable;
			}
			set
			{
				if ((this._FK_ExpertGroupTable != value))
				{
					if (this._zExpertGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ExpertGroupTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ExpertGroupTable = value;
					this.SendPropertyChanged("FK_ExpertGroupTable");
					this.OnFK_ExpertGroupTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zExpertAndExpertGroupMappingTable", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.zExpertAndExpertGroupMappingTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.zExpertAndExpertGroupMappingTable.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zExpertGroup_zExpertAndExpertGroupMappingTable", Storage="_zExpertGroup", ThisKey="FK_ExpertGroupTable", OtherKey="ID", IsForeignKey=true)]
		public zExpertGroup zExpertGroup
		{
			get
			{
				return this._zExpertGroup.Entity;
			}
			set
			{
				zExpertGroup previousValue = this._zExpertGroup.Entity;
				if (((previousValue != value) 
							|| (this._zExpertGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zExpertGroup.Entity = null;
						previousValue.zExpertAndExpertGroupMappingTable.Remove(this);
					}
					this._zExpertGroup.Entity = value;
					if ((value != null))
					{
						value.zExpertAndExpertGroupMappingTable.Add(this);
						this._FK_ExpertGroupTable = value.ID;
					}
					else
					{
						this._FK_ExpertGroupTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zExpertGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zExpertGroup")]
	public partial class zExpertGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _Name;
		
		private EntitySet<zExpertAndExpertGroupMappingTable> _zExpertAndExpertGroupMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public zExpertGroup()
		{
			this._zExpertAndExpertGroupMappingTable = new EntitySet<zExpertAndExpertGroupMappingTable>(new Action<zExpertAndExpertGroupMappingTable>(this.attach_zExpertAndExpertGroupMappingTable), new Action<zExpertAndExpertGroupMappingTable>(this.detach_zExpertAndExpertGroupMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zExpertGroup_zExpertAndExpertGroupMappingTable", Storage="_zExpertAndExpertGroupMappingTable", ThisKey="ID", OtherKey="FK_ExpertGroupTable")]
		public EntitySet<zExpertAndExpertGroupMappingTable> zExpertAndExpertGroupMappingTable
		{
			get
			{
				return this._zExpertAndExpertGroupMappingTable;
			}
			set
			{
				this._zExpertAndExpertGroupMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zExpertAndExpertGroupMappingTable(zExpertAndExpertGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zExpertGroup = this;
		}
		
		private void detach_zExpertAndExpertGroupMappingTable(zExpertAndExpertGroupMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zExpertGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zExpertPoints")]
	public partial class zExpertPoints : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _MinValue;
		
		private System.Nullable<int> _MaxValue;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<zExpertPointsValue> _zExpertPointsValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMinValueChanging(System.Nullable<int> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<int> value);
    partial void OnMaxValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public zExpertPoints()
		{
			this._zExpertPointsValue = new EntitySet<zExpertPointsValue>(new Action<zExpertPointsValue>(this.attach_zExpertPointsValue), new Action<zExpertPointsValue>(this.detach_zExpertPointsValue));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Int")]
		public System.Nullable<int> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Int")]
		public System.Nullable<int> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zExpertPoints_zExpertPointsValue", Storage="_zExpertPointsValue", ThisKey="ID", OtherKey="FK_ExpertPoints")]
		public EntitySet<zExpertPointsValue> zExpertPointsValue
		{
			get
			{
				return this._zExpertPointsValue;
			}
			set
			{
				this._zExpertPointsValue.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zExpertPointsValue(zExpertPointsValue entity)
		{
			this.SendPropertyChanging();
			entity.zExpertPoints = this;
		}
		
		private void detach_zExpertPointsValue(zExpertPointsValue entity)
		{
			this.SendPropertyChanging();
			entity.zExpertPoints = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zExpertPointsValue")]
	public partial class zExpertPointsValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private System.Nullable<int> _FK_ApplicationTable;
		
		private System.Nullable<int> _FK_ExpertPoints;
		
		private System.Nullable<System.DateTime> _LastChangeDataTime;
		
		private System.Nullable<bool> _Sended;
		
		private System.Nullable<System.DateTime> _SendedDataTime;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_ExpertsTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
		private EntityRef<zApplicationTable> _zApplicationTable;
		
		private EntityRef<zExpertPoints> _zExpertPoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnFK_ApplicationTableChanging(System.Nullable<int> value);
    partial void OnFK_ApplicationTableChanged();
    partial void OnFK_ExpertPointsChanging(System.Nullable<int> value);
    partial void OnFK_ExpertPointsChanged();
    partial void OnLastChangeDataTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastChangeDataTimeChanged();
    partial void OnSendedChanging(System.Nullable<bool> value);
    partial void OnSendedChanged();
    partial void OnSendedDataTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSendedDataTimeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ExpertsTableChanging(System.Nullable<int> value);
    partial void OnFK_ExpertsTableChanged();
    #endregion
		
		public zExpertPointsValue()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			this._zApplicationTable = default(EntityRef<zApplicationTable>);
			this._zExpertPoints = default(EntityRef<zExpertPoints>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ApplicationTable", DbType="Int")]
		public System.Nullable<int> FK_ApplicationTable
		{
			get
			{
				return this._FK_ApplicationTable;
			}
			set
			{
				if ((this._FK_ApplicationTable != value))
				{
					if (this._zApplicationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ApplicationTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ApplicationTable = value;
					this.SendPropertyChanged("FK_ApplicationTable");
					this.OnFK_ApplicationTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ExpertPoints", DbType="Int")]
		public System.Nullable<int> FK_ExpertPoints
		{
			get
			{
				return this._FK_ExpertPoints;
			}
			set
			{
				if ((this._FK_ExpertPoints != value))
				{
					if (this._zExpertPoints.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ExpertPointsChanging(value);
					this.SendPropertyChanging();
					this._FK_ExpertPoints = value;
					this.SendPropertyChanged("FK_ExpertPoints");
					this.OnFK_ExpertPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChangeDataTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastChangeDataTime
		{
			get
			{
				return this._LastChangeDataTime;
			}
			set
			{
				if ((this._LastChangeDataTime != value))
				{
					this.OnLastChangeDataTimeChanging(value);
					this.SendPropertyChanging();
					this._LastChangeDataTime = value;
					this.SendPropertyChanged("LastChangeDataTime");
					this.OnLastChangeDataTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sended", DbType="Bit")]
		public System.Nullable<bool> Sended
		{
			get
			{
				return this._Sended;
			}
			set
			{
				if ((this._Sended != value))
				{
					this.OnSendedChanging(value);
					this.SendPropertyChanging();
					this._Sended = value;
					this.SendPropertyChanged("Sended");
					this.OnSendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendedDataTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SendedDataTime
		{
			get
			{
				return this._SendedDataTime;
			}
			set
			{
				if ((this._SendedDataTime != value))
				{
					this.OnSendedDataTimeChanging(value);
					this.SendPropertyChanging();
					this._SendedDataTime = value;
					this.SendPropertyChanged("SendedDataTime");
					this.OnSendedDataTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ExpertsTable", DbType="Int")]
		public System.Nullable<int> FK_ExpertsTable
		{
			get
			{
				return this._FK_ExpertsTable;
			}
			set
			{
				if ((this._FK_ExpertsTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ExpertsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ExpertsTable = value;
					this.SendPropertyChanged("FK_ExpertsTable");
					this.OnFK_ExpertsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zExpertPointsValue", Storage="_UsersTable", ThisKey="FK_ExpertsTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.zExpertPointsValue.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.zExpertPointsValue.Add(this);
						this._FK_ExpertsTable = value.UsersTableID;
					}
					else
					{
						this._FK_ExpertsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zExpertPointsValue", Storage="_zApplicationTable", ThisKey="FK_ApplicationTable", OtherKey="ID", IsForeignKey=true)]
		public zApplicationTable zApplicationTable
		{
			get
			{
				return this._zApplicationTable.Entity;
			}
			set
			{
				zApplicationTable previousValue = this._zApplicationTable.Entity;
				if (((previousValue != value) 
							|| (this._zApplicationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zApplicationTable.Entity = null;
						previousValue.zExpertPointsValue.Remove(this);
					}
					this._zApplicationTable.Entity = value;
					if ((value != null))
					{
						value.zExpertPointsValue.Add(this);
						this._FK_ApplicationTable = value.ID;
					}
					else
					{
						this._FK_ApplicationTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zApplicationTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zExpertPoints_zExpertPointsValue", Storage="_zExpertPoints", ThisKey="FK_ExpertPoints", OtherKey="ID", IsForeignKey=true)]
		public zExpertPoints zExpertPoints
		{
			get
			{
				return this._zExpertPoints.Entity;
			}
			set
			{
				zExpertPoints previousValue = this._zExpertPoints.Entity;
				if (((previousValue != value) 
							|| (this._zExpertPoints.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zExpertPoints.Entity = null;
						previousValue.zExpertPointsValue.Remove(this);
					}
					this._zExpertPoints.Entity = value;
					if ((value != null))
					{
						value.zExpertPointsValue.Add(this);
						this._FK_ExpertPoints = value.ID;
					}
					else
					{
						this._FK_ExpertPoints = default(Nullable<int>);
					}
					this.SendPropertyChanged("zExpertPoints");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zExpertsAndApplicationMappingTable")]
	public partial class zExpertsAndApplicationMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_ApplicationsTable;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
		private EntityRef<zApplicationTable> _zApplicationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ApplicationsTableChanging(System.Nullable<int> value);
    partial void OnFK_ApplicationsTableChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    #endregion
		
		public zExpertsAndApplicationMappingTable()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			this._zApplicationTable = default(EntityRef<zApplicationTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ApplicationsTable", DbType="Int")]
		public System.Nullable<int> FK_ApplicationsTable
		{
			get
			{
				return this._FK_ApplicationsTable;
			}
			set
			{
				if ((this._FK_ApplicationsTable != value))
				{
					if (this._zApplicationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ApplicationsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_ApplicationsTable = value;
					this.SendPropertyChanged("FK_ApplicationsTable");
					this.OnFK_ApplicationsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zExpertsAndApplicationMappingTable", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.zExpertsAndApplicationMappingTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.zExpertsAndApplicationMappingTable.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zApplicationTable_zExpertsAndApplicationMappingTable", Storage="_zApplicationTable", ThisKey="FK_ApplicationsTable", OtherKey="ID", IsForeignKey=true)]
		public zApplicationTable zApplicationTable
		{
			get
			{
				return this._zApplicationTable.Entity;
			}
			set
			{
				zApplicationTable previousValue = this._zApplicationTable.Entity;
				if (((previousValue != value) 
							|| (this._zApplicationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zApplicationTable.Entity = null;
						previousValue.zExpertsAndApplicationMappingTable.Remove(this);
					}
					this._zApplicationTable.Entity = value;
					if ((value != null))
					{
						value.zExpertsAndApplicationMappingTable.Add(this);
						this._FK_ApplicationsTable = value.ID;
					}
					else
					{
						this._FK_ApplicationsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zApplicationTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zExpertsAndCompetitionMappngTamplateTable")]
	public partial class zExpertsAndCompetitionMappngTamplateTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private int _FK_UsersTable;
		
		private System.Nullable<int> _FK_CompetitionsTable;
		
		private EntityRef<zCompetitionsTable> _zCompetitionsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_UsersTableChanging(int value);
    partial void OnFK_UsersTableChanged();
    partial void OnFK_CompetitionsTableChanging(System.Nullable<int> value);
    partial void OnFK_CompetitionsTableChanged();
    #endregion
		
		public zExpertsAndCompetitionMappngTamplateTable()
		{
			this._zCompetitionsTable = default(EntityRef<zCompetitionsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int NOT NULL")]
		public int FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CompetitionsTable", DbType="Int")]
		public System.Nullable<int> FK_CompetitionsTable
		{
			get
			{
				return this._FK_CompetitionsTable;
			}
			set
			{
				if ((this._FK_CompetitionsTable != value))
				{
					if (this._zCompetitionsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CompetitionsTable = value;
					this.SendPropertyChanged("FK_CompetitionsTable");
					this.OnFK_CompetitionsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zExpertsAndCompetitionMappngTamplateTable", Storage="_zCompetitionsTable", ThisKey="FK_CompetitionsTable", OtherKey="ID", IsForeignKey=true)]
		public zCompetitionsTable zCompetitionsTable
		{
			get
			{
				return this._zCompetitionsTable.Entity;
			}
			set
			{
				zCompetitionsTable previousValue = this._zCompetitionsTable.Entity;
				if (((previousValue != value) 
							|| (this._zCompetitionsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCompetitionsTable.Entity = null;
						previousValue.zExpertsAndCompetitionMappngTamplateTable.Remove(this);
					}
					this._zCompetitionsTable.Entity = value;
					if ((value != null))
					{
						value.zExpertsAndCompetitionMappngTamplateTable.Add(this);
						this._FK_CompetitionsTable = value.ID;
					}
					else
					{
						this._FK_CompetitionsTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("zCompetitionsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zFormCompetitionMappingTable")]
	public partial class zFormCompetitionMappingTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_Competition;
		
		private System.Nullable<int> _FK_Form;
		
		private EntityRef<zCompetitionsTable> _zCompetitionsTable;
		
		private EntityRef<zTemplateFormTable> _zTemplateFormTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_CompetitionChanging(System.Nullable<int> value);
    partial void OnFK_CompetitionChanged();
    partial void OnFK_FormChanging(System.Nullable<int> value);
    partial void OnFK_FormChanged();
    #endregion
		
		public zFormCompetitionMappingTable()
		{
			this._zCompetitionsTable = default(EntityRef<zCompetitionsTable>);
			this._zTemplateFormTable = default(EntityRef<zTemplateFormTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Competition", DbType="Int")]
		public System.Nullable<int> FK_Competition
		{
			get
			{
				return this._FK_Competition;
			}
			set
			{
				if ((this._FK_Competition != value))
				{
					if (this._zCompetitionsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionChanging(value);
					this.SendPropertyChanging();
					this._FK_Competition = value;
					this.SendPropertyChanged("FK_Competition");
					this.OnFK_CompetitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Form", DbType="Int")]
		public System.Nullable<int> FK_Form
		{
			get
			{
				return this._FK_Form;
			}
			set
			{
				if ((this._FK_Form != value))
				{
					if (this._zTemplateFormTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_FormChanging(value);
					this.SendPropertyChanging();
					this._FK_Form = value;
					this.SendPropertyChanged("FK_Form");
					this.OnFK_FormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zFormCompetitionMappingTable", Storage="_zCompetitionsTable", ThisKey="FK_Competition", OtherKey="ID", IsForeignKey=true)]
		public zCompetitionsTable zCompetitionsTable
		{
			get
			{
				return this._zCompetitionsTable.Entity;
			}
			set
			{
				zCompetitionsTable previousValue = this._zCompetitionsTable.Entity;
				if (((previousValue != value) 
							|| (this._zCompetitionsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCompetitionsTable.Entity = null;
						previousValue.zFormCompetitionMappingTable.Remove(this);
					}
					this._zCompetitionsTable.Entity = value;
					if ((value != null))
					{
						value.zFormCompetitionMappingTable.Add(this);
						this._FK_Competition = value.ID;
					}
					else
					{
						this._FK_Competition = default(Nullable<int>);
					}
					this.SendPropertyChanged("zCompetitionsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zTemplateFormTable_zFormCompetitionMappingTable", Storage="_zTemplateFormTable", ThisKey="FK_Form", OtherKey="ID", IsForeignKey=true)]
		public zTemplateFormTable zTemplateFormTable
		{
			get
			{
				return this._zTemplateFormTable.Entity;
			}
			set
			{
				zTemplateFormTable previousValue = this._zTemplateFormTable.Entity;
				if (((previousValue != value) 
							|| (this._zTemplateFormTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zTemplateFormTable.Entity = null;
						previousValue.zFormCompetitionMappingTable.Remove(this);
					}
					this._zTemplateFormTable.Entity = value;
					if ((value != null))
					{
						value.zFormCompetitionMappingTable.Add(this);
						this._FK_Form = value.ID;
					}
					else
					{
						this._FK_Form = default(Nullable<int>);
					}
					this.SendPropertyChanged("zTemplateFormTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zIndicatorManualTable")]
	public partial class zIndicatorManualTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _IndicatorName;
		
		private System.Nullable<double> _IndicatorValue;
		
		private System.Nullable<bool> _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndicatorNameChanging(string value);
    partial void OnIndicatorNameChanged();
    partial void OnIndicatorValueChanging(System.Nullable<double> value);
    partial void OnIndicatorValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public zIndicatorManualTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IndicatorName
		{
			get
			{
				return this._IndicatorName;
			}
			set
			{
				if ((this._IndicatorName != value))
				{
					this.OnIndicatorNameChanging(value);
					this.SendPropertyChanging();
					this._IndicatorName = value;
					this.SendPropertyChanged("IndicatorName");
					this.OnIndicatorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndicatorValue", DbType="Float")]
		public System.Nullable<double> IndicatorValue
		{
			get
			{
				return this._IndicatorValue;
			}
			set
			{
				if ((this._IndicatorValue != value))
				{
					this.OnIndicatorValueChanging(value);
					this.SendPropertyChanging();
					this._IndicatorValue = value;
					this.SendPropertyChanged("IndicatorValue");
					this.OnIndicatorValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zPartnersTable")]
	public partial class zPartnersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private System.Nullable<bool> _Role;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private EntitySet<zApplicationAndPartnersMappingTable> _zApplicationAndPartnersMappingTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnRoleChanging(System.Nullable<bool> value);
    partial void OnRoleChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    #endregion
		
		public zPartnersTable()
		{
			this._zApplicationAndPartnersMappingTable = new EntitySet<zApplicationAndPartnersMappingTable>(new Action<zApplicationAndPartnersMappingTable>(this.attach_zApplicationAndPartnersMappingTable), new Action<zApplicationAndPartnersMappingTable>(this.detach_zApplicationAndPartnersMappingTable));
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Bit")]
		public System.Nullable<bool> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zPartnersTable_zApplicationAndPartnersMappingTable", Storage="_zApplicationAndPartnersMappingTable", ThisKey="ID", OtherKey="FK_PartnersTable")]
		public EntitySet<zApplicationAndPartnersMappingTable> zApplicationAndPartnersMappingTable
		{
			get
			{
				return this._zApplicationAndPartnersMappingTable;
			}
			set
			{
				this._zApplicationAndPartnersMappingTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zPartnersTable", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.zPartnersTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.zPartnersTable.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zApplicationAndPartnersMappingTable(zApplicationAndPartnersMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zPartnersTable = this;
		}
		
		private void detach_zApplicationAndPartnersMappingTable(zApplicationAndPartnersMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zPartnersTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zSectionTable")]
	public partial class zSectionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _Active;
		
		private string _Name;
		
		private string _Description;
		
		private int _FK_CompetitionsTable;
		
		private System.Nullable<int> _ColumnMaxCount;
		
		private System.Nullable<int> _FK_BlockID;
		
		private EntitySet<zCollectedRowsTable> _zCollectedRowsTable;
		
		private EntitySet<zColumnTable> _zColumnTable;
		
		private EntityRef<zCompetitionsTable> _zCompetitionsTable;
		
		private EntityRef<zBlockTable> _zBlockTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFK_CompetitionsTableChanging(int value);
    partial void OnFK_CompetitionsTableChanged();
    partial void OnColumnMaxCountChanging(System.Nullable<int> value);
    partial void OnColumnMaxCountChanged();
    partial void OnFK_BlockIDChanging(System.Nullable<int> value);
    partial void OnFK_BlockIDChanged();
    #endregion
		
		public zSectionTable()
		{
			this._zCollectedRowsTable = new EntitySet<zCollectedRowsTable>(new Action<zCollectedRowsTable>(this.attach_zCollectedRowsTable), new Action<zCollectedRowsTable>(this.detach_zCollectedRowsTable));
			this._zColumnTable = new EntitySet<zColumnTable>(new Action<zColumnTable>(this.attach_zColumnTable), new Action<zColumnTable>(this.detach_zColumnTable));
			this._zCompetitionsTable = default(EntityRef<zCompetitionsTable>);
			this._zBlockTable = default(EntityRef<zBlockTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_CompetitionsTable", DbType="Int NOT NULL")]
		public int FK_CompetitionsTable
		{
			get
			{
				return this._FK_CompetitionsTable;
			}
			set
			{
				if ((this._FK_CompetitionsTable != value))
				{
					if (this._zCompetitionsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_CompetitionsTableChanging(value);
					this.SendPropertyChanging();
					this._FK_CompetitionsTable = value;
					this.SendPropertyChanged("FK_CompetitionsTable");
					this.OnFK_CompetitionsTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnMaxCount", DbType="Int")]
		public System.Nullable<int> ColumnMaxCount
		{
			get
			{
				return this._ColumnMaxCount;
			}
			set
			{
				if ((this._ColumnMaxCount != value))
				{
					this.OnColumnMaxCountChanging(value);
					this.SendPropertyChanging();
					this._ColumnMaxCount = value;
					this.SendPropertyChanged("ColumnMaxCount");
					this.OnColumnMaxCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_BlockID", DbType="Int")]
		public System.Nullable<int> FK_BlockID
		{
			get
			{
				return this._FK_BlockID;
			}
			set
			{
				if ((this._FK_BlockID != value))
				{
					if (this._zBlockTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_BlockIDChanging(value);
					this.SendPropertyChanging();
					this._FK_BlockID = value;
					this.SendPropertyChanged("FK_BlockID");
					this.OnFK_BlockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zSectionTable_zCollectedRowsTable", Storage="_zCollectedRowsTable", ThisKey="ID", OtherKey="FK_SectionTable")]
		public EntitySet<zCollectedRowsTable> zCollectedRowsTable
		{
			get
			{
				return this._zCollectedRowsTable;
			}
			set
			{
				this._zCollectedRowsTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zSectionTable_zColumnTable", Storage="_zColumnTable", ThisKey="ID", OtherKey="FK_SectionTable")]
		public EntitySet<zColumnTable> zColumnTable
		{
			get
			{
				return this._zColumnTable;
			}
			set
			{
				this._zColumnTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zCompetitionsTable_zSectionTable", Storage="_zCompetitionsTable", ThisKey="FK_CompetitionsTable", OtherKey="ID", IsForeignKey=true)]
		public zCompetitionsTable zCompetitionsTable
		{
			get
			{
				return this._zCompetitionsTable.Entity;
			}
			set
			{
				zCompetitionsTable previousValue = this._zCompetitionsTable.Entity;
				if (((previousValue != value) 
							|| (this._zCompetitionsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zCompetitionsTable.Entity = null;
						previousValue.zSectionTable.Remove(this);
					}
					this._zCompetitionsTable.Entity = value;
					if ((value != null))
					{
						value.zSectionTable.Add(this);
						this._FK_CompetitionsTable = value.ID;
					}
					else
					{
						this._FK_CompetitionsTable = default(int);
					}
					this.SendPropertyChanged("zCompetitionsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zBlockTable_zSectionTable", Storage="_zBlockTable", ThisKey="FK_BlockID", OtherKey="ID", IsForeignKey=true)]
		public zBlockTable zBlockTable
		{
			get
			{
				return this._zBlockTable.Entity;
			}
			set
			{
				zBlockTable previousValue = this._zBlockTable.Entity;
				if (((previousValue != value) 
							|| (this._zBlockTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zBlockTable.Entity = null;
						previousValue.zSectionTable.Remove(this);
					}
					this._zBlockTable.Entity = value;
					if ((value != null))
					{
						value.zSectionTable.Add(this);
						this._FK_BlockID = value.ID;
					}
					else
					{
						this._FK_BlockID = default(Nullable<int>);
					}
					this.SendPropertyChanged("zBlockTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zCollectedRowsTable(zCollectedRowsTable entity)
		{
			this.SendPropertyChanging();
			entity.zSectionTable = this;
		}
		
		private void detach_zCollectedRowsTable(zCollectedRowsTable entity)
		{
			this.SendPropertyChanging();
			entity.zSectionTable = null;
		}
		
		private void attach_zColumnTable(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zSectionTable = this;
		}
		
		private void detach_zColumnTable(zColumnTable entity)
		{
			this.SendPropertyChanging();
			entity.zSectionTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zTaskPRManualTable")]
	public partial class zTaskPRManualTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TaskPR;
		
		private bool _Active;
		
		private System.Nullable<int> _FK_UsersTable;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTaskPRChanging(string value);
    partial void OnTaskPRChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFK_UsersTableChanging(System.Nullable<int> value);
    partial void OnFK_UsersTableChanged();
    #endregion
		
		public zTaskPRManualTable()
		{
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskPR", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TaskPR
		{
			get
			{
				return this._TaskPR;
			}
			set
			{
				if ((this._TaskPR != value))
				{
					this.OnTaskPRChanging(value);
					this.SendPropertyChanging();
					this._TaskPR = value;
					this.SendPropertyChanged("TaskPR");
					this.OnTaskPRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UsersTable", DbType="Int")]
		public System.Nullable<int> FK_UsersTable
		{
			get
			{
				return this._FK_UsersTable;
			}
			set
			{
				if ((this._FK_UsersTable != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersTableChanging(value);
					this.SendPropertyChanging();
					this._FK_UsersTable = value;
					this.SendPropertyChanged("FK_UsersTable");
					this.OnFK_UsersTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_zTaskPRManualTable", Storage="_UsersTable", ThisKey="FK_UsersTable", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.zTaskPRManualTable.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.zTaskPRManualTable.Add(this);
						this._FK_UsersTable = value.UsersTableID;
					}
					else
					{
						this._FK_UsersTable = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zTemplateFormTable")]
	public partial class zTemplateFormTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private string _FormName;
		
		private string _Description;
		
		private EntitySet<zFormCompetitionMappingTable> _zFormCompetitionMappingTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public zTemplateFormTable()
		{
			this._zFormCompetitionMappingTable = new EntitySet<zFormCompetitionMappingTable>(new Action<zFormCompetitionMappingTable>(this.attach_zFormCompetitionMappingTable), new Action<zFormCompetitionMappingTable>(this.detach_zFormCompetitionMappingTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="VarChar(MAX)")]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zTemplateFormTable_zFormCompetitionMappingTable", Storage="_zFormCompetitionMappingTable", ThisKey="ID", OtherKey="FK_Form")]
		public EntitySet<zFormCompetitionMappingTable> zFormCompetitionMappingTable
		{
			get
			{
				return this._zFormCompetitionMappingTable;
			}
			set
			{
				this._zFormCompetitionMappingTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_zFormCompetitionMappingTable(zFormCompetitionMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zTemplateFormTable = this;
		}
		
		private void detach_zFormCompetitionMappingTable(zFormCompetitionMappingTable entity)
		{
			this.SendPropertyChanging();
			entity.zTemplateFormTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Aplications")]
	public partial class Aplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _FK_ApplicationType;
		
		private System.Nullable<int> _FK_UserAdd;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _TelephoneNumber;
		
		private string _Text;
		
		private string _FileURL;
		
		private System.Nullable<int> _Confirmed;
		
		private EntityRef<ApplictionTypes> _ApplictionTypes;
		
		private EntityRef<UsersTable> _UsersTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnFK_ApplicationTypeChanging(System.Nullable<int> value);
    partial void OnFK_ApplicationTypeChanged();
    partial void OnFK_UserAddChanging(System.Nullable<int> value);
    partial void OnFK_UserAddChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTelephoneNumberChanging(string value);
    partial void OnTelephoneNumberChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnFileURLChanging(string value);
    partial void OnFileURLChanged();
    partial void OnConfirmedChanging(System.Nullable<int> value);
    partial void OnConfirmedChanged();
    #endregion
		
		public Aplication()
		{
			this._ApplictionTypes = default(EntityRef<ApplictionTypes>);
			this._UsersTable = default(EntityRef<UsersTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_ApplicationType", DbType="Int")]
		public System.Nullable<int> FK_ApplicationType
		{
			get
			{
				return this._FK_ApplicationType;
			}
			set
			{
				if ((this._FK_ApplicationType != value))
				{
					if (this._ApplictionTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_ApplicationTypeChanging(value);
					this.SendPropertyChanging();
					this._FK_ApplicationType = value;
					this.SendPropertyChanged("FK_ApplicationType");
					this.OnFK_ApplicationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserAdd", DbType="Int")]
		public System.Nullable<int> FK_UserAdd
		{
			get
			{
				return this._FK_UserAdd;
			}
			set
			{
				if ((this._FK_UserAdd != value))
				{
					if (this._UsersTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserAddChanging(value);
					this.SendPropertyChanging();
					this._FK_UserAdd = value;
					this.SendPropertyChanged("FK_UserAdd");
					this.OnFK_UserAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="NVarChar(50)")]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this.OnTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumber = value;
					this.SendPropertyChanged("TelephoneNumber");
					this.OnTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileURL", DbType="NVarChar(MAX)")]
		public string FileURL
		{
			get
			{
				return this._FileURL;
			}
			set
			{
				if ((this._FileURL != value))
				{
					this.OnFileURLChanging(value);
					this.SendPropertyChanging();
					this._FileURL = value;
					this.SendPropertyChanged("FileURL");
					this.OnFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Int")]
		public System.Nullable<int> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplictionTypes_Aplication", Storage="_ApplictionTypes", ThisKey="FK_ApplicationType", OtherKey="ID", IsForeignKey=true)]
		public ApplictionTypes ApplictionTypes
		{
			get
			{
				return this._ApplictionTypes.Entity;
			}
			set
			{
				ApplictionTypes previousValue = this._ApplictionTypes.Entity;
				if (((previousValue != value) 
							|| (this._ApplictionTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplictionTypes.Entity = null;
						previousValue.Aplications.Remove(this);
					}
					this._ApplictionTypes.Entity = value;
					if ((value != null))
					{
						value.Aplications.Add(this);
						this._FK_ApplicationType = value.ID;
					}
					else
					{
						this._FK_ApplicationType = default(Nullable<int>);
					}
					this.SendPropertyChanged("ApplictionTypes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersTable_Aplication", Storage="_UsersTable", ThisKey="FK_UserAdd", OtherKey="UsersTableID", IsForeignKey=true)]
		public UsersTable UsersTable
		{
			get
			{
				return this._UsersTable.Entity;
			}
			set
			{
				UsersTable previousValue = this._UsersTable.Entity;
				if (((previousValue != value) 
							|| (this._UsersTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersTable.Entity = null;
						previousValue.Aplications.Remove(this);
					}
					this._UsersTable.Entity = value;
					if ((value != null))
					{
						value.Aplications.Add(this);
						this._FK_UserAdd = value.UsersTableID;
					}
					else
					{
						this._FK_UserAdd = default(Nullable<int>);
					}
					this.SendPropertyChanged("UsersTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
