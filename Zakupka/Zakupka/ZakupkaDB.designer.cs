#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zakupka
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ZakupkaDB")]
	public partial class ZakupkaDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContracts(Contracts instance);
    partial void UpdateContracts(Contracts instance);
    partial void DeleteContracts(Contracts instance);
    partial void InsertEvents(Events instance);
    partial void UpdateEvents(Events instance);
    partial void DeleteEvents(Events instance);
    partial void InsertProjects(Projects instance);
    partial void UpdateProjects(Projects instance);
    partial void DeleteProjects(Projects instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertCollectedValues(CollectedValues instance);
    partial void UpdateCollectedValues(CollectedValues instance);
    partial void DeleteCollectedValues(CollectedValues instance);
    partial void InsertFields(Fields instance);
    partial void UpdateFields(Fields instance);
    partial void DeleteFields(Fields instance);
    partial void InsertViewField(ViewField instance);
    partial void UpdateViewField(ViewField instance);
    partial void DeleteViewField(ViewField instance);
    #endregion
		
		public ZakupkaDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ZakupkaDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ZakupkaDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ZakupkaDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ZakupkaDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ZakupkaDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contracts> Contracts
		{
			get
			{
				return this.GetTable<Contracts>();
			}
		}
		
		public System.Data.Linq.Table<Events> Events
		{
			get
			{
				return this.GetTable<Events>();
			}
		}
		
		public System.Data.Linq.Table<Projects> Projects
		{
			get
			{
				return this.GetTable<Projects>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<CollectedValues> CollectedValues
		{
			get
			{
				return this.GetTable<CollectedValues>();
			}
		}
		
		public System.Data.Linq.Table<Fields> Fields
		{
			get
			{
				return this.GetTable<Fields>();
			}
		}
		
		public System.Data.Linq.Table<ViewField> ViewField
		{
			get
			{
				return this.GetTable<ViewField>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contracts")]
	public partial class Contracts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contractID;
		
		private bool _active;
		
		private string _name;
		
		private System.Nullable<int> _fk_event;
		
		private System.Nullable<int> _fk_project;
		
		private EntitySet<CollectedValues> _CollectedValues;
		
		private EntityRef<Events> _Events;
		
		private EntityRef<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncontractIDChanging(int value);
    partial void OncontractIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onfk_eventChanging(System.Nullable<int> value);
    partial void Onfk_eventChanged();
    partial void Onfk_projectChanging(System.Nullable<int> value);
    partial void Onfk_projectChanged();
    #endregion
		
		public Contracts()
		{
			this._CollectedValues = new EntitySet<CollectedValues>(new Action<CollectedValues>(this.attach_CollectedValues), new Action<CollectedValues>(this.detach_CollectedValues));
			this._Events = default(EntityRef<Events>);
			this._Projects = default(EntityRef<Projects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contractID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contractID
		{
			get
			{
				return this._contractID;
			}
			set
			{
				if ((this._contractID != value))
				{
					this.OncontractIDChanging(value);
					this.SendPropertyChanging();
					this._contractID = value;
					this.SendPropertyChanged("contractID");
					this.OncontractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_event", DbType="Int")]
		public System.Nullable<int> fk_event
		{
			get
			{
				return this._fk_event;
			}
			set
			{
				if ((this._fk_event != value))
				{
					if (this._Events.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_eventChanging(value);
					this.SendPropertyChanging();
					this._fk_event = value;
					this.SendPropertyChanged("fk_event");
					this.Onfk_eventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_project", DbType="Int")]
		public System.Nullable<int> fk_project
		{
			get
			{
				return this._fk_project;
			}
			set
			{
				if ((this._fk_project != value))
				{
					if (this._Projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_projectChanging(value);
					this.SendPropertyChanging();
					this._fk_project = value;
					this.SendPropertyChanged("fk_project");
					this.Onfk_projectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contracts_CollectedValues", Storage="_CollectedValues", ThisKey="contractID", OtherKey="fk_contract")]
		public EntitySet<CollectedValues> CollectedValues
		{
			get
			{
				return this._CollectedValues;
			}
			set
			{
				this._CollectedValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_Contracts", Storage="_Events", ThisKey="fk_event", OtherKey="eventID", IsForeignKey=true)]
		public Events Events
		{
			get
			{
				return this._Events.Entity;
			}
			set
			{
				Events previousValue = this._Events.Entity;
				if (((previousValue != value) 
							|| (this._Events.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Events.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Events.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._fk_event = value.eventID;
					}
					else
					{
						this._fk_event = default(Nullable<int>);
					}
					this.SendPropertyChanged("Events");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_Contracts", Storage="_Projects", ThisKey="fk_project", OtherKey="projectID", IsForeignKey=true)]
		public Projects Projects
		{
			get
			{
				return this._Projects.Entity;
			}
			set
			{
				Projects previousValue = this._Projects.Entity;
				if (((previousValue != value) 
							|| (this._Projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Projects.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Projects.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._fk_project = value.projectID;
					}
					else
					{
						this._fk_project = default(Nullable<int>);
					}
					this.SendPropertyChanged("Projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedValues(CollectedValues entity)
		{
			this.SendPropertyChanging();
			entity.Contracts = this;
		}
		
		private void detach_CollectedValues(CollectedValues entity)
		{
			this.SendPropertyChanging();
			entity.Contracts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Events : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _eventID;
		
		private bool _active;
		
		private string _name;
		
		private EntitySet<Contracts> _Contracts;
		
		private EntitySet<Projects> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OneventIDChanging(int value);
    partial void OneventIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Events()
		{
			this._Contracts = new EntitySet<Contracts>(new Action<Contracts>(this.attach_Contracts), new Action<Contracts>(this.detach_Contracts));
			this._Projects = new EntitySet<Projects>(new Action<Projects>(this.attach_Projects), new Action<Projects>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int eventID
		{
			get
			{
				return this._eventID;
			}
			set
			{
				if ((this._eventID != value))
				{
					this.OneventIDChanging(value);
					this.SendPropertyChanging();
					this._eventID = value;
					this.SendPropertyChanged("eventID");
					this.OneventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_Contracts", Storage="_Contracts", ThisKey="eventID", OtherKey="fk_event")]
		public EntitySet<Contracts> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_Projects", Storage="_Projects", ThisKey="eventID", OtherKey="fk_event")]
		public EntitySet<Projects> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contracts entity)
		{
			this.SendPropertyChanging();
			entity.Events = this;
		}
		
		private void detach_Contracts(Contracts entity)
		{
			this.SendPropertyChanging();
			entity.Events = null;
		}
		
		private void attach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Events = this;
		}
		
		private void detach_Projects(Projects entity)
		{
			this.SendPropertyChanging();
			entity.Events = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _projectID;
		
		private bool _active;
		
		private string _name;
		
		private int _fk_event;
		
		private EntitySet<Contracts> _Contracts;
		
		private EntityRef<Events> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprojectIDChanging(int value);
    partial void OnprojectIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onfk_eventChanging(int value);
    partial void Onfk_eventChanged();
    #endregion
		
		public Projects()
		{
			this._Contracts = new EntitySet<Contracts>(new Action<Contracts>(this.attach_Contracts), new Action<Contracts>(this.detach_Contracts));
			this._Events = default(EntityRef<Events>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int projectID
		{
			get
			{
				return this._projectID;
			}
			set
			{
				if ((this._projectID != value))
				{
					this.OnprojectIDChanging(value);
					this.SendPropertyChanging();
					this._projectID = value;
					this.SendPropertyChanged("projectID");
					this.OnprojectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_event", DbType="Int NOT NULL")]
		public int fk_event
		{
			get
			{
				return this._fk_event;
			}
			set
			{
				if ((this._fk_event != value))
				{
					if (this._Events.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_eventChanging(value);
					this.SendPropertyChanging();
					this._fk_event = value;
					this.SendPropertyChanged("fk_event");
					this.Onfk_eventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Projects_Contracts", Storage="_Contracts", ThisKey="projectID", OtherKey="fk_project")]
		public EntitySet<Contracts> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Events_Projects", Storage="_Events", ThisKey="fk_event", OtherKey="eventID", IsForeignKey=true)]
		public Events Events
		{
			get
			{
				return this._Events.Entity;
			}
			set
			{
				Events previousValue = this._Events.Entity;
				if (((previousValue != value) 
							|| (this._Events.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Events.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Events.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._fk_event = value.eventID;
					}
					else
					{
						this._fk_event = default(int);
					}
					this.SendPropertyChanged("Events");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contracts entity)
		{
			this.SendPropertyChanging();
			entity.Projects = this;
		}
		
		private void detach_Contracts(Contracts entity)
		{
			this.SendPropertyChanging();
			entity.Projects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private bool _active;
		
		private string _email;
		
		private string _login;
		
		private string _password;
		
		private string _struct;
		
		private string _name;
		
		private EntitySet<CollectedValues> _CollectedValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnstructChanging(string value);
    partial void OnstructChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Users()
		{
			this._CollectedValues = new EntitySet<CollectedValues>(new Action<CollectedValues>(this.attach_CollectedValues), new Action<CollectedValues>(this.detach_CollectedValues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="struct", Storage="_struct", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string @struct
		{
			get
			{
				return this._struct;
			}
			set
			{
				if ((this._struct != value))
				{
					this.OnstructChanging(value);
					this.SendPropertyChanging();
					this._struct = value;
					this.SendPropertyChanged("@struct");
					this.OnstructChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_CollectedValues", Storage="_CollectedValues", ThisKey="userID", OtherKey="fk_user")]
		public EntitySet<CollectedValues> CollectedValues
		{
			get
			{
				return this._CollectedValues;
			}
			set
			{
				this._CollectedValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedValues(CollectedValues entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_CollectedValues(CollectedValues entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedValues")]
	public partial class CollectedValues : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _collectedFieldID;
		
		private bool _active;
		
		private int _version;
		
		private string _value;
		
		private int _fk_field;
		
		private int _fk_contract;
		
		private int _fk_user;
		
		private System.DateTime _createDateTime;
		
		private EntityRef<Contracts> _Contracts;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Fields> _Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncollectedFieldIDChanging(int value);
    partial void OncollectedFieldIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void Onfk_fieldChanging(int value);
    partial void Onfk_fieldChanged();
    partial void Onfk_contractChanging(int value);
    partial void Onfk_contractChanged();
    partial void Onfk_userChanging(int value);
    partial void Onfk_userChanged();
    partial void OncreateDateTimeChanging(System.DateTime value);
    partial void OncreateDateTimeChanged();
    #endregion
		
		public CollectedValues()
		{
			this._Contracts = default(EntityRef<Contracts>);
			this._Users = default(EntityRef<Users>);
			this._Fields = default(EntityRef<Fields>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_collectedFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int collectedFieldID
		{
			get
			{
				return this._collectedFieldID;
			}
			set
			{
				if ((this._collectedFieldID != value))
				{
					this.OncollectedFieldIDChanging(value);
					this.SendPropertyChanging();
					this._collectedFieldID = value;
					this.SendPropertyChanged("collectedFieldID");
					this.OncollectedFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="Int NOT NULL")]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_field", DbType="Int NOT NULL")]
		public int fk_field
		{
			get
			{
				return this._fk_field;
			}
			set
			{
				if ((this._fk_field != value))
				{
					if (this._Fields.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_fieldChanging(value);
					this.SendPropertyChanging();
					this._fk_field = value;
					this.SendPropertyChanged("fk_field");
					this.Onfk_fieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_contract", DbType="Int NOT NULL")]
		public int fk_contract
		{
			get
			{
				return this._fk_contract;
			}
			set
			{
				if ((this._fk_contract != value))
				{
					if (this._Contracts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_contractChanging(value);
					this.SendPropertyChanging();
					this._fk_contract = value;
					this.SendPropertyChanged("fk_contract");
					this.Onfk_contractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_user", DbType="Int NOT NULL")]
		public int fk_user
		{
			get
			{
				return this._fk_user;
			}
			set
			{
				if ((this._fk_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_userChanging(value);
					this.SendPropertyChanging();
					this._fk_user = value;
					this.SendPropertyChanged("fk_user");
					this.Onfk_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime createDateTime
		{
			get
			{
				return this._createDateTime;
			}
			set
			{
				if ((this._createDateTime != value))
				{
					this.OncreateDateTimeChanging(value);
					this.SendPropertyChanging();
					this._createDateTime = value;
					this.SendPropertyChanged("createDateTime");
					this.OncreateDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contracts_CollectedValues", Storage="_Contracts", ThisKey="fk_contract", OtherKey="contractID", IsForeignKey=true)]
		public Contracts Contracts
		{
			get
			{
				return this._Contracts.Entity;
			}
			set
			{
				Contracts previousValue = this._Contracts.Entity;
				if (((previousValue != value) 
							|| (this._Contracts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contracts.Entity = null;
						previousValue.CollectedValues.Remove(this);
					}
					this._Contracts.Entity = value;
					if ((value != null))
					{
						value.CollectedValues.Add(this);
						this._fk_contract = value.contractID;
					}
					else
					{
						this._fk_contract = default(int);
					}
					this.SendPropertyChanged("Contracts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_CollectedValues", Storage="_Users", ThisKey="fk_user", OtherKey="userID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.CollectedValues.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.CollectedValues.Add(this);
						this._fk_user = value.userID;
					}
					else
					{
						this._fk_user = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fields_CollectedValues", Storage="_Fields", ThisKey="fk_field", OtherKey="filedID", IsForeignKey=true)]
		public Fields Fields
		{
			get
			{
				return this._Fields.Entity;
			}
			set
			{
				Fields previousValue = this._Fields.Entity;
				if (((previousValue != value) 
							|| (this._Fields.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fields.Entity = null;
						previousValue.CollectedValues.Remove(this);
					}
					this._Fields.Entity = value;
					if ((value != null))
					{
						value.CollectedValues.Add(this);
						this._fk_field = value.filedID;
					}
					else
					{
						this._fk_field = default(int);
					}
					this.SendPropertyChanged("Fields");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fields")]
	public partial class Fields : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _filedID;
		
		private bool _active;
		
		private string _name;
		
		private string _description;
		
		private string _type;
		
		private int _line;
		
		private int _col;
		
		private int _height;
		
		private int _width;
		
		private System.Nullable<int> _step;
		
		private EntitySet<CollectedValues> _CollectedValues;
		
		private EntitySet<ViewField> _ViewField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfiledIDChanging(int value);
    partial void OnfiledIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnlineChanging(int value);
    partial void OnlineChanged();
    partial void OncolChanging(int value);
    partial void OncolChanged();
    partial void OnheightChanging(int value);
    partial void OnheightChanged();
    partial void OnwidthChanging(int value);
    partial void OnwidthChanged();
    partial void OnstepChanging(System.Nullable<int> value);
    partial void OnstepChanged();
    #endregion
		
		public Fields()
		{
			this._CollectedValues = new EntitySet<CollectedValues>(new Action<CollectedValues>(this.attach_CollectedValues), new Action<CollectedValues>(this.detach_CollectedValues));
			this._ViewField = new EntitySet<ViewField>(new Action<ViewField>(this.attach_ViewField), new Action<ViewField>(this.detach_ViewField));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int filedID
		{
			get
			{
				return this._filedID;
			}
			set
			{
				if ((this._filedID != value))
				{
					this.OnfiledIDChanging(value);
					this.SendPropertyChanging();
					this._filedID = value;
					this.SendPropertyChanged("filedID");
					this.OnfiledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line", DbType="Int NOT NULL")]
		public int line
		{
			get
			{
				return this._line;
			}
			set
			{
				if ((this._line != value))
				{
					this.OnlineChanging(value);
					this.SendPropertyChanging();
					this._line = value;
					this.SendPropertyChanged("line");
					this.OnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_col", DbType="Int NOT NULL")]
		public int col
		{
			get
			{
				return this._col;
			}
			set
			{
				if ((this._col != value))
				{
					this.OncolChanging(value);
					this.SendPropertyChanging();
					this._col = value;
					this.SendPropertyChanged("col");
					this.OncolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Int NOT NULL")]
		public int height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Int NOT NULL")]
		public int width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_step", DbType="Int")]
		public System.Nullable<int> step
		{
			get
			{
				return this._step;
			}
			set
			{
				if ((this._step != value))
				{
					this.OnstepChanging(value);
					this.SendPropertyChanging();
					this._step = value;
					this.SendPropertyChanged("step");
					this.OnstepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fields_CollectedValues", Storage="_CollectedValues", ThisKey="filedID", OtherKey="fk_field")]
		public EntitySet<CollectedValues> CollectedValues
		{
			get
			{
				return this._CollectedValues;
			}
			set
			{
				this._CollectedValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fields_ViewField", Storage="_ViewField", ThisKey="filedID", OtherKey="fk_field")]
		public EntitySet<ViewField> ViewField
		{
			get
			{
				return this._ViewField;
			}
			set
			{
				this._ViewField.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CollectedValues(CollectedValues entity)
		{
			this.SendPropertyChanging();
			entity.Fields = this;
		}
		
		private void detach_CollectedValues(CollectedValues entity)
		{
			this.SendPropertyChanging();
			entity.Fields = null;
		}
		
		private void attach_ViewField(ViewField entity)
		{
			this.SendPropertyChanging();
			entity.Fields = this;
		}
		
		private void detach_ViewField(ViewField entity)
		{
			this.SendPropertyChanging();
			entity.Fields = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewField")]
	public partial class ViewField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<bool> _active;
		
		private System.Nullable<int> _viewtype;
		
		private System.Nullable<int> _fk_field;
		
		private System.Nullable<int> _orderby;
		
		private EntityRef<Fields> _Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    partial void OnviewtypeChanging(System.Nullable<int> value);
    partial void OnviewtypeChanged();
    partial void Onfk_fieldChanging(System.Nullable<int> value);
    partial void Onfk_fieldChanged();
    partial void OnorderbyChanging(System.Nullable<int> value);
    partial void OnorderbyChanged();
    #endregion
		
		public ViewField()
		{
			this._Fields = default(EntityRef<Fields>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewtype", DbType="Int")]
		public System.Nullable<int> viewtype
		{
			get
			{
				return this._viewtype;
			}
			set
			{
				if ((this._viewtype != value))
				{
					this.OnviewtypeChanging(value);
					this.SendPropertyChanging();
					this._viewtype = value;
					this.SendPropertyChanged("viewtype");
					this.OnviewtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_field", DbType="Int")]
		public System.Nullable<int> fk_field
		{
			get
			{
				return this._fk_field;
			}
			set
			{
				if ((this._fk_field != value))
				{
					if (this._Fields.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_fieldChanging(value);
					this.SendPropertyChanging();
					this._fk_field = value;
					this.SendPropertyChanged("fk_field");
					this.Onfk_fieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderby", DbType="Int")]
		public System.Nullable<int> orderby
		{
			get
			{
				return this._orderby;
			}
			set
			{
				if ((this._orderby != value))
				{
					this.OnorderbyChanging(value);
					this.SendPropertyChanging();
					this._orderby = value;
					this.SendPropertyChanged("orderby");
					this.OnorderbyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fields_ViewField", Storage="_Fields", ThisKey="fk_field", OtherKey="filedID", IsForeignKey=true)]
		public Fields Fields
		{
			get
			{
				return this._Fields.Entity;
			}
			set
			{
				Fields previousValue = this._Fields.Entity;
				if (((previousValue != value) 
							|| (this._Fields.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fields.Entity = null;
						previousValue.ViewField.Remove(this);
					}
					this._Fields.Entity = value;
					if ((value != null))
					{
						value.ViewField.Add(this);
						this._fk_field = value.filedID;
					}
					else
					{
						this._fk_field = default(Nullable<int>);
					}
					this.SendPropertyChanged("Fields");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
