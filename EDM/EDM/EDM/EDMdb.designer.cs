#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ApproveDB")]
	public partial class EDMdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDocuments(Documents instance);
    partial void UpdateDocuments(Documents instance);
    partial void DeleteDocuments(Documents instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertDocumentsInStep(DocumentsInStep instance);
    partial void UpdateDocumentsInStep(DocumentsInStep instance);
    partial void DeleteDocumentsInStep(DocumentsInStep instance);
    partial void InsertEmailBots(EmailBots instance);
    partial void UpdateEmailBots(EmailBots instance);
    partial void DeleteEmailBots(EmailBots instance);
    partial void InsertEmailCopies(EmailCopies instance);
    partial void UpdateEmailCopies(EmailCopies instance);
    partial void DeleteEmailCopies(EmailCopies instance);
    partial void InsertEmailTemplates(EmailTemplates instance);
    partial void UpdateEmailTemplates(EmailTemplates instance);
    partial void DeleteEmailTemplates(EmailTemplates instance);
    partial void InsertParticipants(Participants instance);
    partial void UpdateParticipants(Participants instance);
    partial void DeleteParticipants(Participants instance);
    partial void InsertProcesses(Processes instance);
    partial void UpdateProcesses(Processes instance);
    partial void DeleteProcesses(Processes instance);
    partial void InsertProcessTemplate(ProcessTemplate instance);
    partial void UpdateProcessTemplate(ProcessTemplate instance);
    partial void DeleteProcessTemplate(ProcessTemplate instance);
    partial void InsertProcessTemplateParticipant(ProcessTemplateParticipant instance);
    partial void UpdateProcessTemplateParticipant(ProcessTemplateParticipant instance);
    partial void DeleteProcessTemplateParticipant(ProcessTemplateParticipant instance);
    partial void InsertProcessVersions(ProcessVersions instance);
    partial void UpdateProcessVersions(ProcessVersions instance);
    partial void DeleteProcessVersions(ProcessVersions instance);
    partial void InsertSteps(Steps instance);
    partial void UpdateSteps(Steps instance);
    partial void DeleteSteps(Steps instance);
    partial void InsertStruct(Struct instance);
    partial void UpdateStruct(Struct instance);
    partial void DeleteStruct(Struct instance);
    #endregion
		
		public EDMdbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ApproveDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EDMdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EDMdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EDMdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EDMdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Documents> Documents
		{
			get
			{
				return this.GetTable<Documents>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<DocumentsInStep> DocumentsInStep
		{
			get
			{
				return this.GetTable<DocumentsInStep>();
			}
		}
		
		public System.Data.Linq.Table<EmailBots> EmailBots
		{
			get
			{
				return this.GetTable<EmailBots>();
			}
		}
		
		public System.Data.Linq.Table<EmailCopies> EmailCopies
		{
			get
			{
				return this.GetTable<EmailCopies>();
			}
		}
		
		public System.Data.Linq.Table<EmailTemplates> EmailTemplates
		{
			get
			{
				return this.GetTable<EmailTemplates>();
			}
		}
		
		public System.Data.Linq.Table<Participants> Participants
		{
			get
			{
				return this.GetTable<Participants>();
			}
		}
		
		public System.Data.Linq.Table<Processes> Processes
		{
			get
			{
				return this.GetTable<Processes>();
			}
		}
		
		public System.Data.Linq.Table<ProcessTemplate> ProcessTemplate
		{
			get
			{
				return this.GetTable<ProcessTemplate>();
			}
		}
		
		public System.Data.Linq.Table<ProcessTemplateParticipant> ProcessTemplateParticipant
		{
			get
			{
				return this.GetTable<ProcessTemplateParticipant>();
			}
		}
		
		public System.Data.Linq.Table<ProcessVersions> ProcessVersions
		{
			get
			{
				return this.GetTable<ProcessVersions>();
			}
		}
		
		public System.Data.Linq.Table<Steps> Steps
		{
			get
			{
				return this.GetTable<Steps>();
			}
		}
		
		public System.Data.Linq.Table<Struct> Struct
		{
			get
			{
				return this.GetTable<Struct>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Documents")]
	public partial class Documents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _documentID;
		
		private string _documentName;
		
		private bool _active;
		
		private int _fk_processVersion;
		
		private string _documentComment;
		
		private EntityRef<ProcessVersions> _ProcessVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndocumentIDChanging(int value);
    partial void OndocumentIDChanged();
    partial void OndocumentNameChanging(string value);
    partial void OndocumentNameChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_processVersionChanging(int value);
    partial void Onfk_processVersionChanged();
    partial void OndocumentCommentChanging(string value);
    partial void OndocumentCommentChanged();
    #endregion
		
		public Documents()
		{
			this._ProcessVersions = default(EntityRef<ProcessVersions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int documentID
		{
			get
			{
				return this._documentID;
			}
			set
			{
				if ((this._documentID != value))
				{
					this.OndocumentIDChanging(value);
					this.SendPropertyChanging();
					this._documentID = value;
					this.SendPropertyChanged("documentID");
					this.OndocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string documentName
		{
			get
			{
				return this._documentName;
			}
			set
			{
				if ((this._documentName != value))
				{
					this.OndocumentNameChanging(value);
					this.SendPropertyChanging();
					this._documentName = value;
					this.SendPropertyChanged("documentName");
					this.OndocumentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_processVersion", DbType="Int NOT NULL")]
		public int fk_processVersion
		{
			get
			{
				return this._fk_processVersion;
			}
			set
			{
				if ((this._fk_processVersion != value))
				{
					if (this._ProcessVersions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_processVersionChanging(value);
					this.SendPropertyChanging();
					this._fk_processVersion = value;
					this.SendPropertyChanged("fk_processVersion");
					this.Onfk_processVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentComment", DbType="VarChar(MAX)")]
		public string documentComment
		{
			get
			{
				return this._documentComment;
			}
			set
			{
				if ((this._documentComment != value))
				{
					this.OndocumentCommentChanging(value);
					this.SendPropertyChanging();
					this._documentComment = value;
					this.SendPropertyChanged("documentComment");
					this.OndocumentCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessVersions_Documents", Storage="_ProcessVersions", ThisKey="fk_processVersion", OtherKey="processVersionID", IsForeignKey=true)]
		public ProcessVersions ProcessVersions
		{
			get
			{
				return this._ProcessVersions.Entity;
			}
			set
			{
				ProcessVersions previousValue = this._ProcessVersions.Entity;
				if (((previousValue != value) 
							|| (this._ProcessVersions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessVersions.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._ProcessVersions.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._fk_processVersion = value.processVersionID;
					}
					else
					{
						this._fk_processVersion = default(int);
					}
					this.SendPropertyChanged("ProcessVersions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private bool _active;
		
		private string _email;
		
		private string _login;
		
		private string _password;
		
		private string _name;
		
		private string _struct;
		
		private System.Nullable<int> _fk_struct;
		
		private bool _canInitiate;
		
		private bool _canCreateTemplate;
		
		private EntitySet<Participants> _Participants;
		
		private EntitySet<Processes> _Processes;
		
		private EntitySet<ProcessTemplate> _ProcessTemplate;
		
		private EntityRef<Struct> _Struct1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstructChanging(string value);
    partial void OnstructChanged();
    partial void Onfk_structChanging(System.Nullable<int> value);
    partial void Onfk_structChanged();
    partial void OncanInitiateChanging(bool value);
    partial void OncanInitiateChanged();
    partial void OncanCreateTemplateChanging(bool value);
    partial void OncanCreateTemplateChanged();
    #endregion
		
		public Users()
		{
			this._Participants = new EntitySet<Participants>(new Action<Participants>(this.attach_Participants), new Action<Participants>(this.detach_Participants));
			this._Processes = new EntitySet<Processes>(new Action<Processes>(this.attach_Processes), new Action<Processes>(this.detach_Processes));
			this._ProcessTemplate = new EntitySet<ProcessTemplate>(new Action<ProcessTemplate>(this.attach_ProcessTemplate), new Action<ProcessTemplate>(this.detach_ProcessTemplate));
			this._Struct1 = default(EntityRef<Struct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="struct", Storage="_struct", DbType="VarChar(200)")]
		public string @struct
		{
			get
			{
				return this._struct;
			}
			set
			{
				if ((this._struct != value))
				{
					this.OnstructChanging(value);
					this.SendPropertyChanging();
					this._struct = value;
					this.SendPropertyChanged("@struct");
					this.OnstructChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_struct", DbType="Int")]
		public System.Nullable<int> fk_struct
		{
			get
			{
				return this._fk_struct;
			}
			set
			{
				if ((this._fk_struct != value))
				{
					if (this._Struct1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_structChanging(value);
					this.SendPropertyChanging();
					this._fk_struct = value;
					this.SendPropertyChanged("fk_struct");
					this.Onfk_structChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_canInitiate", DbType="Bit NOT NULL")]
		public bool canInitiate
		{
			get
			{
				return this._canInitiate;
			}
			set
			{
				if ((this._canInitiate != value))
				{
					this.OncanInitiateChanging(value);
					this.SendPropertyChanging();
					this._canInitiate = value;
					this.SendPropertyChanged("canInitiate");
					this.OncanInitiateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_canCreateTemplate", DbType="Bit NOT NULL")]
		public bool canCreateTemplate
		{
			get
			{
				return this._canCreateTemplate;
			}
			set
			{
				if ((this._canCreateTemplate != value))
				{
					this.OncanCreateTemplateChanging(value);
					this.SendPropertyChanging();
					this._canCreateTemplate = value;
					this.SendPropertyChanged("canCreateTemplate");
					this.OncanCreateTemplateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Participants", Storage="_Participants", ThisKey="userID", OtherKey="fk_user")]
		public EntitySet<Participants> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Processes", Storage="_Processes", ThisKey="userID", OtherKey="fk_initiator")]
		public EntitySet<Processes> Processes
		{
			get
			{
				return this._Processes;
			}
			set
			{
				this._Processes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_ProcessTemplate", Storage="_ProcessTemplate", ThisKey="userID", OtherKey="fk_owner")]
		public EntitySet<ProcessTemplate> ProcessTemplate
		{
			get
			{
				return this._ProcessTemplate;
			}
			set
			{
				this._ProcessTemplate.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Struct_Users", Storage="_Struct1", ThisKey="fk_struct", OtherKey="structID", IsForeignKey=true)]
		public Struct Struct1
		{
			get
			{
				return this._Struct1.Entity;
			}
			set
			{
				Struct previousValue = this._Struct1.Entity;
				if (((previousValue != value) 
							|| (this._Struct1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Struct1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Struct1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._fk_struct = value.structID;
					}
					else
					{
						this._fk_struct = default(Nullable<int>);
					}
					this.SendPropertyChanged("Struct1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participants(Participants entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Participants(Participants entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Processes(Processes entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Processes(Processes entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_ProcessTemplate(ProcessTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_ProcessTemplate(ProcessTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentsInStep")]
	public partial class DocumentsInStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _documentsInStepId;
		
		private string _documentName;
		
		private bool _active;
		
		private int _fk_step;
		
		private string _documentComment;
		
		private EntityRef<Steps> _Steps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndocumentsInStepIdChanging(int value);
    partial void OndocumentsInStepIdChanged();
    partial void OndocumentNameChanging(string value);
    partial void OndocumentNameChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_stepChanging(int value);
    partial void Onfk_stepChanged();
    partial void OndocumentCommentChanging(string value);
    partial void OndocumentCommentChanged();
    #endregion
		
		public DocumentsInStep()
		{
			this._Steps = default(EntityRef<Steps>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentsInStepId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int documentsInStepId
		{
			get
			{
				return this._documentsInStepId;
			}
			set
			{
				if ((this._documentsInStepId != value))
				{
					this.OndocumentsInStepIdChanging(value);
					this.SendPropertyChanging();
					this._documentsInStepId = value;
					this.SendPropertyChanged("documentsInStepId");
					this.OndocumentsInStepIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string documentName
		{
			get
			{
				return this._documentName;
			}
			set
			{
				if ((this._documentName != value))
				{
					this.OndocumentNameChanging(value);
					this.SendPropertyChanging();
					this._documentName = value;
					this.SendPropertyChanged("documentName");
					this.OndocumentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_step", DbType="Int NOT NULL")]
		public int fk_step
		{
			get
			{
				return this._fk_step;
			}
			set
			{
				if ((this._fk_step != value))
				{
					if (this._Steps.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_stepChanging(value);
					this.SendPropertyChanging();
					this._fk_step = value;
					this.SendPropertyChanged("fk_step");
					this.Onfk_stepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentComment", DbType="VarChar(MAX)")]
		public string documentComment
		{
			get
			{
				return this._documentComment;
			}
			set
			{
				if ((this._documentComment != value))
				{
					this.OndocumentCommentChanging(value);
					this.SendPropertyChanging();
					this._documentComment = value;
					this.SendPropertyChanged("documentComment");
					this.OndocumentCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Steps_DocumentsInStep", Storage="_Steps", ThisKey="fk_step", OtherKey="stepID", IsForeignKey=true)]
		public Steps Steps
		{
			get
			{
				return this._Steps.Entity;
			}
			set
			{
				Steps previousValue = this._Steps.Entity;
				if (((previousValue != value) 
							|| (this._Steps.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Steps.Entity = null;
						previousValue.DocumentsInStep.Remove(this);
					}
					this._Steps.Entity = value;
					if ((value != null))
					{
						value.DocumentsInStep.Add(this);
						this._fk_step = value.stepID;
					}
					else
					{
						this._fk_step = default(int);
					}
					this.SendPropertyChanged("Steps");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailBots")]
	public partial class EmailBots : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _email;
		
		private string _smtpName;
		
		private int _port;
		
		private string _password;
		
		private long _sendOk;
		
		private long _sendError;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnsmtpNameChanging(string value);
    partial void OnsmtpNameChanged();
    partial void OnportChanging(int value);
    partial void OnportChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnsendOkChanging(long value);
    partial void OnsendOkChanged();
    partial void OnsendErrorChanging(long value);
    partial void OnsendErrorChanged();
    #endregion
		
		public EmailBots()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_smtpName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string smtpName
		{
			get
			{
				return this._smtpName;
			}
			set
			{
				if ((this._smtpName != value))
				{
					this.OnsmtpNameChanging(value);
					this.SendPropertyChanging();
					this._smtpName = value;
					this.SendPropertyChanged("smtpName");
					this.OnsmtpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_port", DbType="Int NOT NULL")]
		public int port
		{
			get
			{
				return this._port;
			}
			set
			{
				if ((this._port != value))
				{
					this.OnportChanging(value);
					this.SendPropertyChanging();
					this._port = value;
					this.SendPropertyChanged("port");
					this.OnportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sendOk", DbType="BigInt NOT NULL")]
		public long sendOk
		{
			get
			{
				return this._sendOk;
			}
			set
			{
				if ((this._sendOk != value))
				{
					this.OnsendOkChanging(value);
					this.SendPropertyChanging();
					this._sendOk = value;
					this.SendPropertyChanged("sendOk");
					this.OnsendOkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sendError", DbType="BigInt NOT NULL")]
		public long sendError
		{
			get
			{
				return this._sendError;
			}
			set
			{
				if ((this._sendError != value))
				{
					this.OnsendErrorChanging(value);
					this.SendPropertyChanging();
					this._sendError = value;
					this.SendPropertyChanged("sendError");
					this.OnsendErrorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailCopies")]
	public partial class EmailCopies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _emailTo;
		
		private string _emailFrom;
		
		private string _emailTitle;
		
		private string _emailContent;
		
		private string _emailAttachment;
		
		private System.Nullable<System.DateTime> _sendDateTime;
		
		private System.Nullable<bool> _sendOk;
		
		private string _errorMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnemailToChanging(string value);
    partial void OnemailToChanged();
    partial void OnemailFromChanging(string value);
    partial void OnemailFromChanged();
    partial void OnemailTitleChanging(string value);
    partial void OnemailTitleChanged();
    partial void OnemailContentChanging(string value);
    partial void OnemailContentChanged();
    partial void OnemailAttachmentChanging(string value);
    partial void OnemailAttachmentChanged();
    partial void OnsendDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnsendDateTimeChanged();
    partial void OnsendOkChanging(System.Nullable<bool> value);
    partial void OnsendOkChanged();
    partial void OnerrorMessageChanging(string value);
    partial void OnerrorMessageChanged();
    #endregion
		
		public EmailCopies()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailTo", DbType="VarChar(MAX)")]
		public string emailTo
		{
			get
			{
				return this._emailTo;
			}
			set
			{
				if ((this._emailTo != value))
				{
					this.OnemailToChanging(value);
					this.SendPropertyChanging();
					this._emailTo = value;
					this.SendPropertyChanged("emailTo");
					this.OnemailToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailFrom", DbType="VarChar(MAX)")]
		public string emailFrom
		{
			get
			{
				return this._emailFrom;
			}
			set
			{
				if ((this._emailFrom != value))
				{
					this.OnemailFromChanging(value);
					this.SendPropertyChanging();
					this._emailFrom = value;
					this.SendPropertyChanged("emailFrom");
					this.OnemailFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailTitle", DbType="VarChar(MAX)")]
		public string emailTitle
		{
			get
			{
				return this._emailTitle;
			}
			set
			{
				if ((this._emailTitle != value))
				{
					this.OnemailTitleChanging(value);
					this.SendPropertyChanging();
					this._emailTitle = value;
					this.SendPropertyChanged("emailTitle");
					this.OnemailTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailContent", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string emailContent
		{
			get
			{
				return this._emailContent;
			}
			set
			{
				if ((this._emailContent != value))
				{
					this.OnemailContentChanging(value);
					this.SendPropertyChanging();
					this._emailContent = value;
					this.SendPropertyChanged("emailContent");
					this.OnemailContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailAttachment", DbType="VarChar(MAX)")]
		public string emailAttachment
		{
			get
			{
				return this._emailAttachment;
			}
			set
			{
				if ((this._emailAttachment != value))
				{
					this.OnemailAttachmentChanging(value);
					this.SendPropertyChanging();
					this._emailAttachment = value;
					this.SendPropertyChanged("emailAttachment");
					this.OnemailAttachmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sendDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> sendDateTime
		{
			get
			{
				return this._sendDateTime;
			}
			set
			{
				if ((this._sendDateTime != value))
				{
					this.OnsendDateTimeChanging(value);
					this.SendPropertyChanging();
					this._sendDateTime = value;
					this.SendPropertyChanged("sendDateTime");
					this.OnsendDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sendOk", DbType="Bit")]
		public System.Nullable<bool> sendOk
		{
			get
			{
				return this._sendOk;
			}
			set
			{
				if ((this._sendOk != value))
				{
					this.OnsendOkChanging(value);
					this.SendPropertyChanging();
					this._sendOk = value;
					this.SendPropertyChanged("sendOk");
					this.OnsendOkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_errorMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string errorMessage
		{
			get
			{
				return this._errorMessage;
			}
			set
			{
				if ((this._errorMessage != value))
				{
					this.OnerrorMessageChanging(value);
					this.SendPropertyChanging();
					this._errorMessage = value;
					this.SendPropertyChanged("errorMessage");
					this.OnerrorMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailTemplates")]
	public partial class EmailTemplates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private bool _active;
		
		private string _name;
		
		private string _emailTitle;
		
		private string _emailContent;
		
		private string _comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailTitleChanging(string value);
    partial void OnemailTitleChanged();
    partial void OnemailContentChanging(string value);
    partial void OnemailContentChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public EmailTemplates()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailTitle", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string emailTitle
		{
			get
			{
				return this._emailTitle;
			}
			set
			{
				if ((this._emailTitle != value))
				{
					this.OnemailTitleChanging(value);
					this.SendPropertyChanging();
					this._emailTitle = value;
					this.SendPropertyChanged("emailTitle");
					this.OnemailTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailContent", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string emailContent
		{
			get
			{
				return this._emailContent;
			}
			set
			{
				if ((this._emailContent != value))
				{
					this.OnemailContentChanging(value);
					this.SendPropertyChanging();
					this._emailContent = value;
					this.SendPropertyChanged("emailContent");
					this.OnemailContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Participants")]
	public partial class Participants : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _participantID;
		
		private bool _active;
		
		private int _fk_user;
		
		private System.Nullable<System.DateTime> _dateStart;
		
		private System.Nullable<System.DateTime> _dateEnd;
		
		private int _status;
		
		private int _fk_process;
		
		private int _queue;
		
		private System.Nullable<bool> _isNew;
		
		private EntitySet<Steps> _Steps;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Processes> _Processes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnparticipantIDChanging(int value);
    partial void OnparticipantIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_userChanging(int value);
    partial void Onfk_userChanged();
    partial void OndateStartChanging(System.Nullable<System.DateTime> value);
    partial void OndateStartChanged();
    partial void OndateEndChanging(System.Nullable<System.DateTime> value);
    partial void OndateEndChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void Onfk_processChanging(int value);
    partial void Onfk_processChanged();
    partial void OnqueueChanging(int value);
    partial void OnqueueChanged();
    partial void OnisNewChanging(System.Nullable<bool> value);
    partial void OnisNewChanged();
    #endregion
		
		public Participants()
		{
			this._Steps = new EntitySet<Steps>(new Action<Steps>(this.attach_Steps), new Action<Steps>(this.detach_Steps));
			this._Users = default(EntityRef<Users>);
			this._Processes = default(EntityRef<Processes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_participantID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int participantID
		{
			get
			{
				return this._participantID;
			}
			set
			{
				if ((this._participantID != value))
				{
					this.OnparticipantIDChanging(value);
					this.SendPropertyChanging();
					this._participantID = value;
					this.SendPropertyChanged("participantID");
					this.OnparticipantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_user", DbType="Int NOT NULL")]
		public int fk_user
		{
			get
			{
				return this._fk_user;
			}
			set
			{
				if ((this._fk_user != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_userChanging(value);
					this.SendPropertyChanging();
					this._fk_user = value;
					this.SendPropertyChanged("fk_user");
					this.Onfk_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateStart", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateStart
		{
			get
			{
				return this._dateStart;
			}
			set
			{
				if ((this._dateStart != value))
				{
					this.OndateStartChanging(value);
					this.SendPropertyChanging();
					this._dateStart = value;
					this.SendPropertyChanged("dateStart");
					this.OndateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateEnd
		{
			get
			{
				return this._dateEnd;
			}
			set
			{
				if ((this._dateEnd != value))
				{
					this.OndateEndChanging(value);
					this.SendPropertyChanging();
					this._dateEnd = value;
					this.SendPropertyChanged("dateEnd");
					this.OndateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_process", DbType="Int NOT NULL")]
		public int fk_process
		{
			get
			{
				return this._fk_process;
			}
			set
			{
				if ((this._fk_process != value))
				{
					if (this._Processes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_processChanging(value);
					this.SendPropertyChanging();
					this._fk_process = value;
					this.SendPropertyChanged("fk_process");
					this.Onfk_processChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_queue", DbType="Int NOT NULL")]
		public int queue
		{
			get
			{
				return this._queue;
			}
			set
			{
				if ((this._queue != value))
				{
					this.OnqueueChanging(value);
					this.SendPropertyChanging();
					this._queue = value;
					this.SendPropertyChanged("queue");
					this.OnqueueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isNew", DbType="Bit")]
		public System.Nullable<bool> isNew
		{
			get
			{
				return this._isNew;
			}
			set
			{
				if ((this._isNew != value))
				{
					this.OnisNewChanging(value);
					this.SendPropertyChanging();
					this._isNew = value;
					this.SendPropertyChanged("isNew");
					this.OnisNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participants_Steps", Storage="_Steps", ThisKey="participantID", OtherKey="fk_participent")]
		public EntitySet<Steps> Steps
		{
			get
			{
				return this._Steps;
			}
			set
			{
				this._Steps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Participants", Storage="_Users", ThisKey="fk_user", OtherKey="userID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._fk_user = value.userID;
					}
					else
					{
						this._fk_user = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Processes_Participants", Storage="_Processes", ThisKey="fk_process", OtherKey="processID", IsForeignKey=true)]
		public Processes Processes
		{
			get
			{
				return this._Processes.Entity;
			}
			set
			{
				Processes previousValue = this._Processes.Entity;
				if (((previousValue != value) 
							|| (this._Processes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Processes.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._Processes.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._fk_process = value.processID;
					}
					else
					{
						this._fk_process = default(int);
					}
					this.SendPropertyChanged("Processes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Steps(Steps entity)
		{
			this.SendPropertyChanging();
			entity.Participants = this;
		}
		
		private void detach_Steps(Steps entity)
		{
			this.SendPropertyChanging();
			entity.Participants = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Processes")]
	public partial class Processes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _processID;
		
		private bool _active;
		
		private string _name;
		
		private string _type;
		
		private int _fk_initiator;
		
		private int _status;
		
		private System.Nullable<System.DateTime> _startDate;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private string _endComment;
		
		private EntitySet<Participants> _Participants;
		
		private EntitySet<ProcessVersions> _ProcessVersions;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprocessIDChanging(int value);
    partial void OnprocessIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Onfk_initiatorChanging(int value);
    partial void Onfk_initiatorChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    partial void OnendCommentChanging(string value);
    partial void OnendCommentChanged();
    #endregion
		
		public Processes()
		{
			this._Participants = new EntitySet<Participants>(new Action<Participants>(this.attach_Participants), new Action<Participants>(this.detach_Participants));
			this._ProcessVersions = new EntitySet<ProcessVersions>(new Action<ProcessVersions>(this.attach_ProcessVersions), new Action<ProcessVersions>(this.detach_ProcessVersions));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int processID
		{
			get
			{
				return this._processID;
			}
			set
			{
				if ((this._processID != value))
				{
					this.OnprocessIDChanging(value);
					this.SendPropertyChanging();
					this._processID = value;
					this.SendPropertyChanged("processID");
					this.OnprocessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_initiator", DbType="Int NOT NULL")]
		public int fk_initiator
		{
			get
			{
				return this._fk_initiator;
			}
			set
			{
				if ((this._fk_initiator != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_initiatorChanging(value);
					this.SendPropertyChanging();
					this._fk_initiator = value;
					this.SendPropertyChanged("fk_initiator");
					this.Onfk_initiatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endComment", DbType="VarChar(MAX)")]
		public string endComment
		{
			get
			{
				return this._endComment;
			}
			set
			{
				if ((this._endComment != value))
				{
					this.OnendCommentChanging(value);
					this.SendPropertyChanging();
					this._endComment = value;
					this.SendPropertyChanged("endComment");
					this.OnendCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Processes_Participants", Storage="_Participants", ThisKey="processID", OtherKey="fk_process")]
		public EntitySet<Participants> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Processes_ProcessVersions", Storage="_ProcessVersions", ThisKey="processID", OtherKey="fk_process")]
		public EntitySet<ProcessVersions> ProcessVersions
		{
			get
			{
				return this._ProcessVersions;
			}
			set
			{
				this._ProcessVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Processes", Storage="_Users", ThisKey="fk_initiator", OtherKey="userID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Processes.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Processes.Add(this);
						this._fk_initiator = value.userID;
					}
					else
					{
						this._fk_initiator = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participants(Participants entity)
		{
			this.SendPropertyChanging();
			entity.Processes = this;
		}
		
		private void detach_Participants(Participants entity)
		{
			this.SendPropertyChanging();
			entity.Processes = null;
		}
		
		private void attach_ProcessVersions(ProcessVersions entity)
		{
			this.SendPropertyChanging();
			entity.Processes = this;
		}
		
		private void detach_ProcessVersions(ProcessVersions entity)
		{
			this.SendPropertyChanging();
			entity.Processes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessTemplate")]
	public partial class ProcessTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _processTemplateId;
		
		private bool _active;
		
		private int _fk_owner;
		
		private string _name;
		
		private string _title;
		
		private string _content_;
		
		private string _type;
		
		private EntitySet<ProcessTemplateParticipant> _ProcessTemplateParticipant;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprocessTemplateIdChanging(int value);
    partial void OnprocessTemplateIdChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_ownerChanging(int value);
    partial void Onfk_ownerChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Oncontent_Changing(string value);
    partial void Oncontent_Changed();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public ProcessTemplate()
		{
			this._ProcessTemplateParticipant = new EntitySet<ProcessTemplateParticipant>(new Action<ProcessTemplateParticipant>(this.attach_ProcessTemplateParticipant), new Action<ProcessTemplateParticipant>(this.detach_ProcessTemplateParticipant));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processTemplateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int processTemplateId
		{
			get
			{
				return this._processTemplateId;
			}
			set
			{
				if ((this._processTemplateId != value))
				{
					this.OnprocessTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._processTemplateId = value;
					this.SendPropertyChanged("processTemplateId");
					this.OnprocessTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_owner", DbType="Int NOT NULL")]
		public int fk_owner
		{
			get
			{
				return this._fk_owner;
			}
			set
			{
				if ((this._fk_owner != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_ownerChanging(value);
					this.SendPropertyChanging();
					this._fk_owner = value;
					this.SendPropertyChanged("fk_owner");
					this.Onfk_ownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(200)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content_", DbType="VarChar(MAX)")]
		public string content_
		{
			get
			{
				return this._content_;
			}
			set
			{
				if ((this._content_ != value))
				{
					this.Oncontent_Changing(value);
					this.SendPropertyChanging();
					this._content_ = value;
					this.SendPropertyChanged("content_");
					this.Oncontent_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(50)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessTemplate_ProcessTemplateParticipant", Storage="_ProcessTemplateParticipant", ThisKey="processTemplateId", OtherKey="fk_user")]
		public EntitySet<ProcessTemplateParticipant> ProcessTemplateParticipant
		{
			get
			{
				return this._ProcessTemplateParticipant;
			}
			set
			{
				this._ProcessTemplateParticipant.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_ProcessTemplate", Storage="_Users", ThisKey="fk_owner", OtherKey="userID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.ProcessTemplate.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.ProcessTemplate.Add(this);
						this._fk_owner = value.userID;
					}
					else
					{
						this._fk_owner = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessTemplateParticipant(ProcessTemplateParticipant entity)
		{
			this.SendPropertyChanging();
			entity.ProcessTemplate = this;
		}
		
		private void detach_ProcessTemplateParticipant(ProcessTemplateParticipant entity)
		{
			this.SendPropertyChanging();
			entity.ProcessTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessTemplateParticipant")]
	public partial class ProcessTemplateParticipant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _processTemplateParticipantId;
		
		private bool _active;
		
		private int _fk_user;
		
		private int _queue;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private EntityRef<ProcessTemplate> _ProcessTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprocessTemplateParticipantIdChanging(int value);
    partial void OnprocessTemplateParticipantIdChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_userChanging(int value);
    partial void Onfk_userChanged();
    partial void OnqueueChanging(int value);
    partial void OnqueueChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    #endregion
		
		public ProcessTemplateParticipant()
		{
			this._ProcessTemplate = default(EntityRef<ProcessTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processTemplateParticipantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int processTemplateParticipantId
		{
			get
			{
				return this._processTemplateParticipantId;
			}
			set
			{
				if ((this._processTemplateParticipantId != value))
				{
					this.OnprocessTemplateParticipantIdChanging(value);
					this.SendPropertyChanging();
					this._processTemplateParticipantId = value;
					this.SendPropertyChanged("processTemplateParticipantId");
					this.OnprocessTemplateParticipantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_user", DbType="Int NOT NULL")]
		public int fk_user
		{
			get
			{
				return this._fk_user;
			}
			set
			{
				if ((this._fk_user != value))
				{
					if (this._ProcessTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_userChanging(value);
					this.SendPropertyChanging();
					this._fk_user = value;
					this.SendPropertyChanged("fk_user");
					this.Onfk_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_queue", DbType="Int NOT NULL")]
		public int queue
		{
			get
			{
				return this._queue;
			}
			set
			{
				if ((this._queue != value))
				{
					this.OnqueueChanging(value);
					this.SendPropertyChanging();
					this._queue = value;
					this.SendPropertyChanged("queue");
					this.OnqueueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessTemplate_ProcessTemplateParticipant", Storage="_ProcessTemplate", ThisKey="fk_user", OtherKey="processTemplateId", IsForeignKey=true)]
		public ProcessTemplate ProcessTemplate
		{
			get
			{
				return this._ProcessTemplate.Entity;
			}
			set
			{
				ProcessTemplate previousValue = this._ProcessTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ProcessTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessTemplate.Entity = null;
						previousValue.ProcessTemplateParticipant.Remove(this);
					}
					this._ProcessTemplate.Entity = value;
					if ((value != null))
					{
						value.ProcessTemplateParticipant.Add(this);
						this._fk_user = value.processTemplateId;
					}
					else
					{
						this._fk_user = default(int);
					}
					this.SendPropertyChanged("ProcessTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessVersions")]
	public partial class ProcessVersions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _processVersionID;
		
		private bool _active;
		
		private int _fk_process;
		
		private int _version;
		
		private string _comment;
		
		private string _status;
		
		private EntitySet<Documents> _Documents;
		
		private EntitySet<Steps> _Steps;
		
		private EntityRef<Processes> _Processes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprocessVersionIDChanging(int value);
    partial void OnprocessVersionIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_processChanging(int value);
    partial void Onfk_processChanged();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public ProcessVersions()
		{
			this._Documents = new EntitySet<Documents>(new Action<Documents>(this.attach_Documents), new Action<Documents>(this.detach_Documents));
			this._Steps = new EntitySet<Steps>(new Action<Steps>(this.attach_Steps), new Action<Steps>(this.detach_Steps));
			this._Processes = default(EntityRef<Processes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processVersionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int processVersionID
		{
			get
			{
				return this._processVersionID;
			}
			set
			{
				if ((this._processVersionID != value))
				{
					this.OnprocessVersionIDChanging(value);
					this.SendPropertyChanging();
					this._processVersionID = value;
					this.SendPropertyChanged("processVersionID");
					this.OnprocessVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_process", DbType="Int NOT NULL")]
		public int fk_process
		{
			get
			{
				return this._fk_process;
			}
			set
			{
				if ((this._fk_process != value))
				{
					if (this._Processes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_processChanging(value);
					this.SendPropertyChanging();
					this._fk_process = value;
					this.SendPropertyChanged("fk_process");
					this.Onfk_processChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="Int NOT NULL")]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(MAX)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessVersions_Documents", Storage="_Documents", ThisKey="processVersionID", OtherKey="fk_processVersion")]
		public EntitySet<Documents> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessVersions_Steps", Storage="_Steps", ThisKey="processVersionID", OtherKey="fk_processVersion")]
		public EntitySet<Steps> Steps
		{
			get
			{
				return this._Steps;
			}
			set
			{
				this._Steps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Processes_ProcessVersions", Storage="_Processes", ThisKey="fk_process", OtherKey="processID", IsForeignKey=true)]
		public Processes Processes
		{
			get
			{
				return this._Processes.Entity;
			}
			set
			{
				Processes previousValue = this._Processes.Entity;
				if (((previousValue != value) 
							|| (this._Processes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Processes.Entity = null;
						previousValue.ProcessVersions.Remove(this);
					}
					this._Processes.Entity = value;
					if ((value != null))
					{
						value.ProcessVersions.Add(this);
						this._fk_process = value.processID;
					}
					else
					{
						this._fk_process = default(int);
					}
					this.SendPropertyChanged("Processes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Documents entity)
		{
			this.SendPropertyChanging();
			entity.ProcessVersions = this;
		}
		
		private void detach_Documents(Documents entity)
		{
			this.SendPropertyChanging();
			entity.ProcessVersions = null;
		}
		
		private void attach_Steps(Steps entity)
		{
			this.SendPropertyChanging();
			entity.ProcessVersions = this;
		}
		
		private void detach_Steps(Steps entity)
		{
			this.SendPropertyChanging();
			entity.ProcessVersions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Steps")]
	public partial class Steps : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stepID;
		
		private bool _active;
		
		private int _fk_processVersion;
		
		private int _fk_participent;
		
		private string _comment;
		
		private System.Nullable<int> _stepResult;
		
		private System.Nullable<System.DateTime> _date;
		
		private EntitySet<DocumentsInStep> _DocumentsInStep;
		
		private EntityRef<Participants> _Participants;
		
		private EntityRef<ProcessVersions> _ProcessVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstepIDChanging(int value);
    partial void OnstepIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onfk_processVersionChanging(int value);
    partial void Onfk_processVersionChanged();
    partial void Onfk_participentChanging(int value);
    partial void Onfk_participentChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnstepResultChanging(System.Nullable<int> value);
    partial void OnstepResultChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    #endregion
		
		public Steps()
		{
			this._DocumentsInStep = new EntitySet<DocumentsInStep>(new Action<DocumentsInStep>(this.attach_DocumentsInStep), new Action<DocumentsInStep>(this.detach_DocumentsInStep));
			this._Participants = default(EntityRef<Participants>);
			this._ProcessVersions = default(EntityRef<ProcessVersions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stepID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stepID
		{
			get
			{
				return this._stepID;
			}
			set
			{
				if ((this._stepID != value))
				{
					this.OnstepIDChanging(value);
					this.SendPropertyChanging();
					this._stepID = value;
					this.SendPropertyChanged("stepID");
					this.OnstepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_processVersion", DbType="Int NOT NULL")]
		public int fk_processVersion
		{
			get
			{
				return this._fk_processVersion;
			}
			set
			{
				if ((this._fk_processVersion != value))
				{
					if (this._ProcessVersions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_processVersionChanging(value);
					this.SendPropertyChanging();
					this._fk_processVersion = value;
					this.SendPropertyChanged("fk_processVersion");
					this.Onfk_processVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_participent", DbType="Int NOT NULL")]
		public int fk_participent
		{
			get
			{
				return this._fk_participent;
			}
			set
			{
				if ((this._fk_participent != value))
				{
					if (this._Participants.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_participentChanging(value);
					this.SendPropertyChanging();
					this._fk_participent = value;
					this.SendPropertyChanged("fk_participent");
					this.Onfk_participentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(MAX)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stepResult", DbType="Int")]
		public System.Nullable<int> stepResult
		{
			get
			{
				return this._stepResult;
			}
			set
			{
				if ((this._stepResult != value))
				{
					this.OnstepResultChanging(value);
					this.SendPropertyChanging();
					this._stepResult = value;
					this.SendPropertyChanged("stepResult");
					this.OnstepResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Steps_DocumentsInStep", Storage="_DocumentsInStep", ThisKey="stepID", OtherKey="fk_step")]
		public EntitySet<DocumentsInStep> DocumentsInStep
		{
			get
			{
				return this._DocumentsInStep;
			}
			set
			{
				this._DocumentsInStep.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participants_Steps", Storage="_Participants", ThisKey="fk_participent", OtherKey="participantID", IsForeignKey=true)]
		public Participants Participants
		{
			get
			{
				return this._Participants.Entity;
			}
			set
			{
				Participants previousValue = this._Participants.Entity;
				if (((previousValue != value) 
							|| (this._Participants.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participants.Entity = null;
						previousValue.Steps.Remove(this);
					}
					this._Participants.Entity = value;
					if ((value != null))
					{
						value.Steps.Add(this);
						this._fk_participent = value.participantID;
					}
					else
					{
						this._fk_participent = default(int);
					}
					this.SendPropertyChanged("Participants");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessVersions_Steps", Storage="_ProcessVersions", ThisKey="fk_processVersion", OtherKey="processVersionID", IsForeignKey=true)]
		public ProcessVersions ProcessVersions
		{
			get
			{
				return this._ProcessVersions.Entity;
			}
			set
			{
				ProcessVersions previousValue = this._ProcessVersions.Entity;
				if (((previousValue != value) 
							|| (this._ProcessVersions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessVersions.Entity = null;
						previousValue.Steps.Remove(this);
					}
					this._ProcessVersions.Entity = value;
					if ((value != null))
					{
						value.Steps.Add(this);
						this._fk_processVersion = value.processVersionID;
					}
					else
					{
						this._fk_processVersion = default(int);
					}
					this.SendPropertyChanged("ProcessVersions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentsInStep(DocumentsInStep entity)
		{
			this.SendPropertyChanging();
			entity.Steps = this;
		}
		
		private void detach_DocumentsInStep(DocumentsInStep entity)
		{
			this.SendPropertyChanging();
			entity.Steps = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Struct")]
	public partial class Struct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _structID;
		
		private bool _active;
		
		private string _name;
		
		private System.Nullable<int> _fk_parent;
		
		private EntitySet<Users> _Users;
		
		private EntitySet<Struct> _Struct2;
		
		private EntityRef<Struct> _Struct1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstructIDChanging(int value);
    partial void OnstructIDChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onfk_parentChanging(System.Nullable<int> value);
    partial void Onfk_parentChanged();
    #endregion
		
		public Struct()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			this._Struct2 = new EntitySet<Struct>(new Action<Struct>(this.attach_Struct2), new Action<Struct>(this.detach_Struct2));
			this._Struct1 = default(EntityRef<Struct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_structID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int structID
		{
			get
			{
				return this._structID;
			}
			set
			{
				if ((this._structID != value))
				{
					this.OnstructIDChanging(value);
					this.SendPropertyChanging();
					this._structID = value;
					this.SendPropertyChanged("structID");
					this.OnstructIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_parent", DbType="Int")]
		public System.Nullable<int> fk_parent
		{
			get
			{
				return this._fk_parent;
			}
			set
			{
				if ((this._fk_parent != value))
				{
					if (this._Struct1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_parentChanging(value);
					this.SendPropertyChanging();
					this._fk_parent = value;
					this.SendPropertyChanged("fk_parent");
					this.Onfk_parentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Struct_Users", Storage="_Users", ThisKey="structID", OtherKey="fk_struct")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Struct_Struct", Storage="_Struct2", ThisKey="structID", OtherKey="fk_parent")]
		public EntitySet<Struct> Struct2
		{
			get
			{
				return this._Struct2;
			}
			set
			{
				this._Struct2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Struct_Struct", Storage="_Struct1", ThisKey="fk_parent", OtherKey="structID", IsForeignKey=true)]
		public Struct Struct1
		{
			get
			{
				return this._Struct1.Entity;
			}
			set
			{
				Struct previousValue = this._Struct1.Entity;
				if (((previousValue != value) 
							|| (this._Struct1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Struct1.Entity = null;
						previousValue.Struct2.Remove(this);
					}
					this._Struct1.Entity = value;
					if ((value != null))
					{
						value.Struct2.Add(this);
						this._fk_parent = value.structID;
					}
					else
					{
						this._fk_parent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Struct1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Struct1 = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Struct1 = null;
		}
		
		private void attach_Struct2(Struct entity)
		{
			this.SendPropertyChanging();
			entity.Struct1 = this;
		}
		
		private void detach_Struct2(Struct entity)
		{
			this.SendPropertyChanging();
			entity.Struct1 = null;
		}
	}
}
#pragma warning restore 1591
